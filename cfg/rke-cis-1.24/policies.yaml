controls:
version: "rke-cis-1.24"
id: 5
text: "Kubernetes 策略"
type: "policies"
groups:
  - id: 5.1
    text: "RBAC 和服务账户"
    checks:
      - id: 5.1.1
        text: "确保只在必要的情况下使用 cluster-admin 角色（手动）。"
        type: "manual"
        remediation: |-
          识别所有绑定到 cluster-admin 角色的 clusterrolebindings。检查它们是否被使用，以及它们是否需要该角色，或者它们是否可以使用权限更少的角色。在可能的情况下，首先将用户绑定到一个权限较低的角色，然后移除绑定到cluster-admin角色的clusterrolebinding: kubectl delete clusterrolebinding [name]
        scored: false

      - id: 5.1.2
        text: "最小化对机密信息的访问（手动操作）。"
        type: "manual"
        remediation: |-
          在可能的情况下，删除集群中对 Secret 对象的 get、list 和 watch 访问权限。
        scored: false

      - id: 5.1.3
        text: "在角色（Roles）和集群角色（ClusterRoles）中尽量减少通配符的使用（手动）。"
        type: "manual"
        remediation: |-
          在可能的情况下，将 clusterroles 和 roles 中对通配符的使用替换为具体的对象或操作。
        scored: false

      - id: 5.1.4
        text: "最小化创建 Pod 的访问权限（手动方式）。"
        type: "manual"
        remediation: |-
          在可能的情况下，在集群中删除对 pod 对象的创建访问权限。
        scored: false

      - id: 5.1.5
        text: "确保默认服务账号未被激活使用。（手动）"
        type: "manual"
        remediation: |-
          在 Kubernetes 工作负载需要特定访问 Kubernetes API 服务器时，请创建明确的服务账号。修改每个默认服务账号的配置，包括以下数值 automountServiceAccountToken: false。
        scored: false

      - id: 5.1.6
        text: "确保只在必要的情况下挂载服务账户令牌（手动操作）。"
        type: "manual"
        remediation: |-
          修改不需要挂载服务账号令牌的 Pod 和服务账号的定义，将其禁用。
        scored: false

      - id: 5.1.7
        text: "避免使用 system:masters 组（手动）。"
        type: "manual"
        remediation: |-
          将系统中所有用户从系统组：masters 中移除。
        scored: false

      - id: 5.1.8
        text: "在 Kubernetes 集群中限制对 Bind、Impersonate 和 Escalate 权限的使用（手动操作）。"
        type: "manual"
        remediation: |-
          在可能的情况下，从主体中删除模拟、绑定和提升权限的权利。
        scored: false

  - id: 5.2
    text: "Pod 安全标准"
    checks:
      - id: 5.2.1
        text: "确保集群至少有一个处于活动状态的策略控制机制（手动）。"
        type: "manual"
        remediation: |-
          确保每个包含用户工作负载的命名空间都已经部署了 Pod 安全准入或外部策略控制系统。
        scored: false

      - id: 5.2.2
        text: "尽量减少特权容器的准入（手动）"
        type: "manual"
        remediation: |-
          在集群中每个包含用户工作负载的命名空间中添加策略，以限制特权容器的准入。
        scored: false

      - id: 5.2.3
        text: "最小化允许共享主机进程 ID 命名空间的容器的准入（自动化）。"
        audit: |
          kubectl get psp -o json | jq .items[] | jq -r 'select((.spec.hostPID == null) or (.spec.hostPID == false))' | jq .metadata.name | wc -l | xargs -I {} echo '--count={}'
        tests:
          bin_op: or
          test_items:
            - flag: "kubectl: not found"
            - flag: "jq: not found"
            - flag: count
              compare:
                op: gt
                value: 0
        remediation: |-
          在集群中每个包含用户工作负载的命名空间中添加策略，限制 `hostPID` 容器的准入。
        scored: true

      - id: 5.2.4
        text: "最小化容器希望共享主机 IPC 命名空间的准入（自动化）。"
        audit: |
          kubectl get psp -o json | jq .items[] | jq -r 'select((.spec.hostIPC == null) or (.spec.hostIPC == false))' | jq .metadata.name | wc -l | xargs -I {} echo '--count={}'
        tests:
          bin_op: or
          test_items:
            - flag: "kubectl: not found"
            - flag: "jq: not found"
            - flag: count
              compare:
                op: gt
                value: 0
        remediation: |-
          在集群中具有用户工作负载的每个命名空间中添加策略，以限制 `hostIPC` 容器的准入。
        scored: true

      - id: 5.2.5
        text: "限制容器共享主机网络命名空间的准入（自动化）。"
        audit: |
          kubectl get psp -o json | jq .items[] | jq -r 'select((.spec.hostNetwork == null) or (.spec.hostNetwork == false))' | jq .metadata.name | wc -l | xargs -I {} echo '--count={}'
        tests:
          bin_op: or
          test_items:
            - flag: "kubectl: not found"
            - flag: "jq: not found"
            - flag: count
              compare:
                op: gt
                value: 0
        remediation: |-
          在集群中每个具有用户工作负载的命名空间中添加策略，限制`hostNetwork`容器的准入。
        scored: true

      - id: 5.2.6
        text: "尽量减少具有 allowPrivilegeEscalation (Automated) 的容器准入。"
        audit: |
          kubectl get psp -o json | jq .items[] | jq -r 'select((.spec.allowPrivilegeEscalation == null) or (.spec.allowPrivilegeEscalation == false))' | jq .metadata.name | wc -l | xargs -I {} echo '--count={}'
        tests:
          bin_op: or
          test_items:
            - flag: "kubectl: not found"
            - flag: "jq: not found"
            - flag: count
              compare:
                op: gt
                value: 0
        remediation: |-
          向集群中每个具有用户工作负载的命名空间添加策略，限制允许 `.spec.allowPrivilegeEscalation` 设置为 `true` 的容器的准入。
        scored: true

      - id: 5.2.7
        text: "最小化容器以 root 用户身份启动的准入（手动）。"
        type: "manual"
        remediation: |-
          为集群中的每个命名空间创建一个策略，确保要么设置 `MustRunAsNonRoot`，或者设置带有不包括 0 的 UID 范围的 `MustRunAs`。
        scored: false

      - id: 5.2.8
        text: "减少具有 NET_RAW 权限的容器的准入（手动方式）"
        type: "manual"
        remediation: |-
          在集群中的每个具有用户工作负载的命名空间中添加策略，限制具有 `NET_RAW` 能力的容器的准入。
        scored: false

      - id: 5.2.9
        text: "通过降低具有额外权限的容器的准入（手动方式）来加强安全措施。"
        type: "manual"
        remediation: |-
          确保集群中的策略中不存在 `allowedCapabilities`，除非设置为一个空数组。
        scored: false

      - id: 5.2.10
        text: "最小化具有分配的权限的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          审查在集群上运行的应用程序中使用 capabilites 的情况。在一个命名空间中包含不需要任何 Linux 权限的应用程序时，考虑添加一个 PSP，该 PSP 禁止容器接受所有权限的容器。
        scored: false

      - id: 5.2.11
        text: "减少 Windows HostProcess 容器的准入（手动）。"
        type: "manual"
        remediation: |-
          在集群中每个包含用户工作负载的命名空间中添加策略，以限制具有 `.securityContext.windowsOptions.hostProcess` 设置为 `true` 的容器的准入。
        scored: false

      - id: 5.2.12
        text: "减少 HostPath 卷的准入（手动方式）。"
        type: "manual"
        remediation: |-
          向集群中每个包含用户工作负载的命名空间添加策略，以限制具有 `hostPath` 卷的容器的准入。
        scored: false

      - id: 5.2.13
        text: "最小化接受使用 HostPorts 的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          在集群中每个包含用户工作负载的命名空间中添加策略，以限制使用 `hostPort` 部分的容器的准入。
        scored: false

  - id: 5.3
    text: "网络策略和CNI"
    checks:
      - id: 5.3.1
        text: "确保所使用的 CNI 支持 NetworkPolicies（手动）。"
        type: "manual"
        remediation: |-
          如果正在使用的 CNI 插件不支持网络策略，应考虑使用其他插件，或者寻找替代机制限制 Kubernetes 集群中的流量。
        scored: false

      - id: 5.3.2
        text: "确保所有命名空间都定义了 NetworkPolicies（手动）。"
        type: "skip"
        remediation: |-
          按照文档的指导创建 NetworkPolicy 对象，根据需要进行操作。
        scored: false

  - id: 5.4
    text: "密钥管理"
    checks:
      - id: 5.4.1
        text: "更倾向于将Secrets作为文件而不是环境变量使用（手动方式）"
        type: "manual"
        remediation: |-
          如果可能的话，重写应用程序代码，从挂载的秘钥文件读取 Secrets，而不是从环境变量中读取。
        scored: false

      - id: 5.4.2
        text: "考虑外部的秘密存储（手动）。"
        type: "manual"
        remediation: |-
          请参考您的云服务提供商或第三方机密管理解决方案提供的机密管理选项。
        scored: false

  - id: 5.5
    text: "可扩展的准入控制"
    checks:
      - id: 5.5.1
        text: "使用 ImagePolicyWebhook 出入控制器（手动方式）配置镜像来源。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档的指引设置镜像溯源功能。
        scored: false

  - id: 5.7
    text: "一般策略"
    checks:
      - id: 5.7.1
        text: "使用命名空间（手动）创建资源之间的管理边界。"
        type: "manual"
        remediation: |-
          按照文档说明，根据部署需要为对象创建命名空间。
        scored: false

      - id: 5.7.2
        text: "确保在您的 Pod 定义中将 seccomp profile 设置为 docker/default（手动）。"
        type: "manual"
        remediation: |-
          使用 `securityContext` 来在你的 Pod 定义中启用 docker/default seccomp profile。一个示例如下：  securityContext:    seccompProfile:      type: RuntimeDefault
        scored: false

      - id: 5.7.3
        text: "将 SecurityContext 应用于您的 Pod 和容器（手动）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档的指导，为您的 Pods 应用 SecurityContexts。您可以参考 CIS 安全基准文档中提供的建议列表来设置 SecurityContexts。
        scored: false

      - id: 5.7.4
        text: "不应该使用默认命名空间（自动化）。"
        audit: |
          #!/bin/bash
          set -eE
          handle_error() {
              echo "false"
          }
          trap 'handle_error' ERR
          count=$(kubectl get all -n default -o json | jq .items[] | jq -r 'select((.metadata.name!="kubernetes"))' | jq .metadata.name | wc -l)
          if [[ ${count} -gt 0 ]]; then
              echo "false"
              exit
          fi
          echo "true"
        tests:
          bin_op: or
          test_items:
            - flag: "kubectl: not found"
            - flag: "jq: not found"
            - flag: "true"
        remediation: |-
          确保创建命名空间以允许对 Kubernetes 资源进行适当的隔离，并且所有新资源都应该创建在特定的命名空间中。
        scored: true
