controls:
version: "rke2-cis-1.7"
id: 5
text: "Kubernetes 策略"
type: "policies"
groups:
  - id: 5.1
    text: "RBAC（Role-Based Access Control）和服务账号"
    checks:
      - id: 5.1.1
        text: "确保 cluster-admin 角色仅在必要的情况下使用（手动）。"
        type: "manual"
        remediation: |-
          识别所有绑定到 cluster-admin 角色的 clusterrolebindings。检查它们是否被使用，是否需要这个角色，或者是否可以使用权限更少的角色。在可能的情况下，首先将用户绑定到权限较低的角色，然后移除绑定到 cluster-admin 角色的 clusterrolebinding：kubectl delete clusterrolebinding [name]
        scored: false

      - id: 5.1.2
        text: "最小化对机密信息的访问（手动方式）"
        type: "manual"
        remediation: |-
          在可能的情况下，移除对集群中 Secret 对象的 get、list 和 watch 访问权限。
        scored: false

      - id: 5.1.3
        text: "减少在角色 (Roles) 和集群角色 (ClusterRoles) 中使用通配符的数量 (手动)。"
        type: "manual"
        remediation: |-
          在可能的情况下，将 clusterroles 和 roles 中对通配符的使用替换为具体的对象或操作。
        scored: false

      - id: 5.1.4
        text: "减少创建 Pod 的访问权限（手动方式）。"
        type: "manual"
        remediation: |-
          在可能的情况下，请删除集群中对 Pod 对象的创建访问权限。
        scored: false

      - id: 5.1.5
        text: "确保默认服务账号未被激活使用。(手动)"
        type: "manual"
        remediation: |-
          在 Kubernetes 工作负载需要对 Kubernetes API 服务器具有特定访问权限时，创建明确的服务账户。修改每个默认服务账户的配置，包括这个值 automountServiceAccountToken: false。
        scored: false

      - id: 5.1.6
        text: "确保只在必要的地方挂载服务账号令牌（手动）。"
        type: "manual"
        remediation: |-
          修改不需要挂载服务账号令牌的 Pod 和服务账号的定义，禁用该功能。
        scored: false

      - id: 5.1.7
        text: "避免使用 system:masters 组（手动）。"
        type: "manual"
        remediation: |-
          将系统中所有用户从集群中的 system:masters 用户组中移除。
        scored: false

      - id: 5.1.8
        text: "在 Kubernetes 集群中限制对 Bind、Impersonate 和 Escalate 权限的使用（手动方式）。"
        type: "manual"
        remediation: |-
          在可能的情况下，从主体中移除模拟、绑定和提升权限的权利。
        scored: false

      - id: 5.1.9
        text: "限制创建持久卷的访问权限（手动）。"
        type: "manual"
        remediation: |-
          在可能的情况下，移除集群中对 PersistentVolume 对象的创建访问权限。
        scored: false

      - id: 5.1.10
        text: "限制对节点的代理子资源的访问（手动）。"
        type: "manual"
        remediation: |-
          在可能的情况下，删除对节点对象的代理子资源的访问权限。
        scored: false

      - id: 5.1.11
        text: "限制对 certificatesigningrequests 对象的 approval 子资源的访问权限（手动操作）。"
        type: "manual"
        remediation: |-
          在可能的情况下，删除对 certificatesigningrequest 对象的 approval 子资源的访问权限。
        scored: false

      - id: 5.1.12
        text: "最小化对 Webhook 配置对象的访问（手动）。"
        type: "manual"
        remediation: |-
          在可能的情况下，移除对 validatingwebhookconfigurations 或 mutatingwebhookconfigurations 对象的访问权限。
        scored: false

      - id: 5.1.13
        text: "最小化对服务账号令牌创建的访问权限（手动操作）。"
        type: "manual"
        remediation: |-
          在可能的情况下，删除对 serviceaccount 对象的 token 子资源的访问权限。
        scored: false

  - id: 5.2
    text: "Pod 安全标准"
    checks:
      - id: 5.2.1
        text: "确保集群至少有一个处于活动状态的策略控制机制（手动）。"
        type: "manual"
        remediation: |-
          确保每个包含用户工作负载的命名空间中都设置了 Pod 安全准入或外部策略控制系统。
        scored: false

      - id: 5.2.2
        text: "尽量减少特权容器的准入 (手动)"
        type: "manual"
        remediation: |-
          向集群中每个包含用户工作负载的命名空间添加策略，限制特权容器的准入。
        scored: false

      - id: 5.2.3
        text: "最小化容器希望共享主机进程 ID 命名空间的准入（手动）。"
        type: "manual"
        remediation: |-
          在集群中每个具有用户工作负载的命名空间中添加策略，以限制 `hostPID` 容器的准入。
        scored: false

      - id: 5.2.4
        text: "尽量减少容器请求共享主机 IPC 命名空间的准入（手动方式）。"
        type: "manual"
        remediation: |-
          在集群中每个包含用户工作负载的命名空间中添加策略，以限制 `hostIPC` 容器的准入。
        scored: false

      - id: 5.2.5
        text: "尽量减少容器共享主机网络命名空间的准入（手动操作）。"
        type: "manual"
        remediation: |-
          在集群中每个包含用户工作负载的命名空间中添加策略，以限制 `hostNetwork` 容器的准入。
        scored: false

      - id: 5.2.6
        text: "最小化允许具有 allowPrivilegeEscalation 的容器进入 (手动操作)。"
        type: "manual"
        remediation: |-
          向集群中具有用户工作负载的每个命名空间添加策略，以限制允许 `.spec.allowPrivilegeEscalation` 设置为 `true` 的容器的准入。
        scored: false

      - id: 5.2.7
        text: "减少容器以 root 用户权限启动的几率（手动方式）。"
        type: "manual"
        remediation: |-
          为集群中的每个命名空间创建一个策略，确保要么设置 `MustRunAsNonRoot`，要么设置 `MustRunAs` 并且 UID 的范围不包括 0。
        scored: false

      - id: 5.2.8
        text: "限制具有 NET_RAW 能力的容器的准入（手动操作）。"
        type: "manual"
        remediation: |-
          在集群中每个包含用户工作负载的命名空间中添加策略，以限制具有 `NET_RAW` 能力的容器的准入。
        scored: false

      - id: 5.2.9
        text: "最小化具有额外权限的容器的准入（自动化）。"
        type: "manual"
        remediation: |-
          确保集群的策略中不包含 `allowedCapabilities`，除非将其设置为空数组。
        scored: false

      - id: 5.2.10
        text: "最小化具有分配权限的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          审查在您的集群上运行的应用程序中对 capabilites 的使用。对于包含不需要任何 Linux capabilites 的应用程序的命名空间，请考虑添加一个 PSP，禁止接受未删除所有 capabilites 的容器。
        scored: false

      - id: 5.2.11
        text: "减少 Windows HostProcess 容器的准入（手动）。"
        type: "manual"
        remediation: |-
          向集群中每个包含用户工作负载的命名空间添加策略，限制具有 `.securityContext.windowsOptions.hostProcess` 设置为 `true` 的容器的准入。
        scored: false

      - id: 5.2.12
        text: "最小化 HostPath 卷的准入（手动）。"
        type: "manual"
        remediation: |-
          在集群中每个包含用户工作负载的命名空间中添加策略，限制具有 `hostPath` 卷的容器的准入。
        scored: false

      - id: 5.2.13
        text: "减少允许使用 HostPorts 的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          为集群中每个包含用户工作负载的命名空间添加策略，以限制使用 `hostPort` 段的容器的准入。
        scored: false

  - id: 5.3
    text: "网络策略和容器网络接口（CNI）"
    checks:
      - id: 5.3.1
        text: "确保正在使用的 CNI 支持 NetworkPolicies（手动）。"
        type: "manual"
        remediation: |-
          如果使用的 CNI 插件不支持网络策略，应该考虑使用其他插件，或者寻找替代机制来限制 Kubernetes 集群中的流量。
        scored: false

      - id: 5.3.2
        text: "确保所有的命名空间都定义了网络策略(NetworkPolicies)（手动操作）。"
        type: "manual"
        remediation: |-
          根据文档指导，按需创建 NetworkPolicy 对象。
        scored: false

  - id: 5.4
    text: "密钥管理"
    checks:
      - id: 5.4.1
        text: "更倾向于将 Secrets 作为文件而不是作为环境变量使用（手动）。"
        type: "manual"
        remediation: |-
          如果可能的话，重写应用程序代码，从挂载的密钥文件中读取 Secrets，而不是从环境变量中读取。
        scored: false

      - id: 5.4.2
        text: "考虑外部秘钥存储（手动）。"
        type: "manual"
        remediation: |-
          参考您的云服务提供商或第三方秘密管理解决方案提供的秘密管理选项。
        scored: false

  - id: 5.5
    text: "可扩展的准入控制"
    checks:
      - id: 5.5.1
        text: "使用 ImagePolicyWebhook 准入控制器（手动）配置镜像溯源。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档进行操作，设置镜像溯源。
        scored: false

  - id: 5.7
    text: "通用策略"
    checks:
      - id: 5.7.1
        text: "使用命名空间（手动方式）在资源之间创建管理边界。"
        type: "manual"
        remediation: |-
          按照文档说明，根据部署需求为对象创建命名空间。
        scored: false

      - id: 5.7.2
        text: "确保在您的 Pod 定义中将 seccomp 配置设置为 docker/default（手动）。"
        type: "manual"
        remediation: |-
          使用 `securityContext` 在您的 Pod 定义中启用 docker/default seccomp profile。示例如下：  securityContext:    seccompProfile:      type: RuntimeDefault
        scored: false

      - id: 5.7.3
        text: "将 SecurityContext 应用于您的 Pods 和 Containers（手动）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档的指引，为您的 Pods 应用 SecurityContexts。您可以参考 CIS 安全基线对 Docker 容器提出的安全上下文的建议列表。
        scored: false

      - id: 5.7.4
        text: "不应该使用默认命名空间（手动操作）。"
        type: "manual"
        remediation: |-
          确保创建名称空间以允许对 Kubernetes 资源进行适当的隔离，并确保所有新资源都在特定的名称空间中创建。
        scored: false
