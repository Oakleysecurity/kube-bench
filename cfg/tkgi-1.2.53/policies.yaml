controls:
version: "tkgi-1.2.53"
id: 5
text: "Kubernetes 策略"
type: "policies"
groups:
  - id: 5.1
    text: "RBAC 和 Service Accounts"
    checks:
      - id: 5.1.1
        text: "确保只在必要的情况下使用 cluster-admin 角色。"
        type: "manual"
        remediation: |-
          识别所有与 cluster-admin 角色相关的 clusterrolebinding。检查它们是否被使用，以及它们是否需要该角色，或者它们是否可以使用权限更少的角色。在可能的情况下，首先将用户绑定到一个权限较低的角色，然后删除与 cluster-admin 角色相关的 clusterrolebinding：kubectl delete clusterrolebinding [name]注意：这是一个特定于站点的设置。
        scored: false

      - id: 5.1.2
        text: "最小化对机密信息的访问。"
        type: "manual"
        remediation: |-
          在可能的情况下，移除集群中对 secret 对象的 get、list 和 watch 访问权限。例外情况：这是特定于站点的设置。
        scored: false

      - id: 5.1.3
        text: "在角色（Roles）和集群角色（ClusterRoles）中尽量减少通配符的使用。"
        type: "manual"
        remediation: |-
          在可能的情况下，将 clusterroles 和 roles 中对通配符的使用替换为具体的对象或操作。例外情况这是特定于站点的设置。
        scored: false

      - id: 5.1.4
        text: "最小化创建 Pod 的访问权限。"
        type: "manual"
        remediation: |-
          在可能的情况下，删除集群中对 pod 对象的创建访问权限。异常情况这是特定于站点的设置。
        scored: false

      - id: 5.1.5
        text: "确保默认服务账户未被激活使用。"
        type: "manual"
        remediation: |-
          在 Kubernetes 工作负载需要特定访问 Kubernetes API 服务器时，创建明确的服务账户。修改每个默认服务账户的配置，包括该值 automountServiceAccountToken: false。异常这是一个特定于站点的设置。
        scored: false

      - id: 5.1.6
        text: "确保只在必要的情况下挂载 Service Account Tokens。"
        type: "manual"
        remediation: |-
          修改无需挂载服务账号令牌的 Pod 和服务账号的定义，以禁用该功能。特例这是特定于站点的设置。
        scored: false

  - id: 5.2
    text: "Pod 安全策略"
    checks:
      - id: 5.2.1
        text: "减少特权容器的准入。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP，确保 .spec.privileged 字段被省略或设置为 false。特例这是特定于站点的设置。
        scored: false

      - id: 5.2.2
        text: "尽量减少容器共享主机进程 ID 命名空间的准入。"
        type: "manual"
        remediation: |-
          根据 Kubernetes 文档中的描述创建一个 Pod 安全策略（PSP），确保 .spec.hostPID 字段被省略或设置为 false。异常情况这是一个特定于站点的设置。
        scored: false

      - id: 5.2.3
        text: "尽量减少希望共享主机 IPC 命名空间的容器的准入。"
        type: "manual"
        remediation: |-
          根据 Kubernetes 文档中描述的方式创建一个 PSP，并确保 .spec.hostIPC 字段被省略或设置为 false。注意：这是站点特定的设置。
        scored: false

      - id: 5.2.4
        text: "减少希望共享主机网络命名空间的容器准入。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP，确保 .spec.hostNetwork 字段被省略或者设置为 false。例外情况：这是特定于某个站点的设置。
        scored: false

      - id: 5.2.5
        text: "尽量减少允许 allowPrivilegeEscalation 的容器进入。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP，并确保 .spec.allowPrivilegeEscalation 字段被省略或设置为 false。特例这是特定于站点的设置。
        scored: false

      - id: 5.2.6
        text: "将 root 容器的准入最小化。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP，确保 .spec.runAsUser.rule 被设置为 MustRunAsNonRoot 或 MustRunAs，并且 UID 的范围不包括 0。异常这是特定于站点的设置。
        scored: false

      - id: 5.2.7
        text: "限制具有 NET_RAW 能力的容器的准入。"
        type: "manual"
        remediation: |-
          根据 Kubernetes 文档中描述的方式创建一个 PSP，确保 .spec.requiredDropCapabilities 被设置为包含 NET_RAW 或 ALL。注意：这是一个特定于站点的设置。
        scored: false

      - id: 5.2.8
        text: "减少具有附加权限的容器的准入"
        type: "manual"
        remediation: |-
          确保在集群的 PSP 中，allowedCapabilities 参数不出现，除非设置为空数组。异常情况：这是特定于站点的设置。
        scored: false

      - id: 5.2.9
        text: "减少具有分配权限的容器的准入。"
        type: "manual"
        remediation: |-
          审查在集群上运行的应用程序中使用 capabilites 的情况。在一个命名空间包含不需要任何 Linux capabities 运行的应用程序时，考虑添加一个 PSP，禁止接受没有删除所有 capabilities 的容器。例外这是特定于站点的设置。
        scored: false

  - id: 5.3
    text: "网络策略和 CNI"
    checks:
      - id: 5.3.1
        text: "确保所使用的 CNI 支持网络策略。"
        type: "manual"
        remediation: |-
          如果使用的 CNI 插件不支持网络策略，应该考虑使用其他插件，或者找到另一种限制 Kubernetes 集群流量的替代机制。特例这是特定于站点的设置。
        scored: false

      - id: 5.3.2
        text: "确保所有的命名空间都定义了网络策略。"
        type: "manual"
        remediation: |-
          按照文档的说明创建您需要的 NetworkPolicy 对象。异常情况这是特定于站点的设置。
        scored: false

  - id: 5.4
    text: "密钥管理"
    checks:
      - id: 5.4.1
        text: "建议优先将密钥作为文件使用，而不是作为环境变量。"
        type: "manual"
        remediation: |-
          如果可能的话，重写应用程序代码，从挂载的密钥文件中读取密钥，而不是从环境变量中读取。例外情况：这是特定于站点的设置。
        scored: false

      - id: 5.4.2
        text: "考虑使用外部的密钥存储。"
        type: "manual"
        remediation: |-
          请参考您的云服务提供商或第三方秘钥管理解决方案提供的秘钥管理选项。异常这是站点特定设置。
        scored: false

  - id: 5.5
    text: "可扩展的准入控制"
    checks:
      - id: 5.5.1
        text: "使用 ImagePolicyWebhook 出入控制器配置镜像溯源。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档操作，并设置镜像溯源。但是这是与网站相关的设置。
        scored: false

  - id: 5.7
    text: "通用策略"
    checks:
      - id: 5.7.1
        text: "使用命名空间在资源之间创建管理边界。"
        type: "manual"
        remediation: |-
          根据文档创建部署所需的对象名称空间。异常情况：这是特定于站点的设置。
        scored: false

      - id: 5.7.2
        text: "确保在您的 Pod 定义中将 seccomp profile 设置为 docker/default。"
        type: "manual"
        remediation: |-
          Seccomp 是一个目前处于 alpha 版本的功能。默认情况下，所有 alpha 特性都是禁用的。因此，您需要通过传递 "--feature-gates=AllAlpha=true" 参数来在 apiserver 中启用 alpha 特性。编辑主节点上的 /etc/kubernetes/apiserver 文件，并将 KUBE_API_ARGS 参数设置为 "--feature-gates=AllAlpha=true"。KUBE_API_ARGS="--feature-gates=AllAlpha=true"根据您的系统，重新启动 kube-apiserver 服务。例如：systemctl restart kube-apiserver.service使用注解来在您的 pod 定义中启用 docker/default 的 seccomp 配置文件。示例如下：apiVersion: v1kind: Podmetadata:  name: trustworthy-pod  annotations:    seccomp.security.alpha.kubernetes.io/pod: docker/defaultspec:  containers:    - name: trustworthy-container      image: sotrustworthy:latest注意：这是特定于站点的设置。
        scored: false

      - id: 5.7.3
        text: "将安全上下文应用到您的 Pod 和容器中。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档的指引，为您的 Pod 应用安全上下文。可以参考 CIS Docker 容器安全基准提供的建议安全上下文列表。异常这是特定于站点的设置。
        scored: false

      - id: 5.7.4
        text: "默认的命名空间不应该被使用。"
        type: "manual"
        remediation: |-
          确保创建命名空间以便适当地隔离 Kubernetes 资源，并且所有新资源都在特定命名空间中创建。异常情况这是特定于站点的设置。
        scored: false
