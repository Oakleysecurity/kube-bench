controls:
version: "tkgi-1.2.53"
id: 4
text: "工作节点安全配置"
type: "node"
groups:
  - id: 4.1
    text: "工作节点配置文件"
    checks:
      - id: 4.1.1
        text: "确保 kubelet 服务文件的权限设置为 644 或更严格。"
        audit: stat -c permissions=%a /var/vcap/jobs/kubelet/monit
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |-
          在每个工作节点上运行以下命令（基于您系统中文件的位置）。例如，chmod 644 /var/vcap/jobs/kubelet/monit
        scored: true

      - id: 4.1.2
        text: "确保 kubelet 服务文件的所有权设置为 root:root。"
        audit: stat -c %U:%G /var/vcap/jobs/kubelet/monit
        tests:
          test_items:
            - flag: root:root
        remediation: |-
          在每个工作节点上运行以下命令（根据系统中文件位置而定）。例如，chown root:root /var/vcap/jobs/kubelet/monit异常文件的所属组是 vcap。
        scored: true

      - id: 4.1.3
        text: "确保代理 kubeconfig 文件的权限设置为 644 或更严格。"
        audit: stat -c permissions=%a /var/vcap/jobs/kube-proxy/config/kubeconfig
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |-
          在每个 worker 节点上运行以下命令（根据系统中文件的位置）。例如，chmod 644 /var/vcap/jobs/kube-proxy/config/kubeconfig
        scored: true

      - id: 4.1.4
        text: "确保代理 kubeconfig 文件的所有权设置为 root:root。"
        audit: stat -c %U:%G /var/vcap/jobs/kube-proxy/config/kubeconfig
        type: manual
        tests:
          test_items:
            - flag: root:root
        remediation: |-
          在每个工作节点上运行以下命令（根据您系统上文件的位置）。例如，chown root:root /var/vcap/jobs/kube-proxy/config/kubeconfig异常文件的组所有者是 vcap。
        scored: false

      - id: 4.1.5
        text: "确保 kubelet.conf 文件的权限设置为 644 或更严格。"
        audit: stat -c permissions=%a /var/vcap/jobs/kube-proxy/config/kubeconfig
        type: manual
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |-
          在每个工作节点上运行以下命令（根据您系统中文件的位置）。例如，chmod 644 /var/vcap/jobs/kube-proxy/config/kubeconfig异常kubeadm 未用于提供/引导集群。kubeadm 和相关配置文件不存在于工作节点上。
        scored: false

      - id: 4.1.6
        text: "确保 kubelet.conf 文件的所有权设置为 root:root。"
        audit: stat -c %U:%G /etc/kubernetes/kubelet.conf
        type: manual
        tests:
          test_items:
            - flag: root:root
        remediation: |-
          在每个工作节点上运行以下命令（根据系统上文件的位置）。例如，chown root:root /etc/kubernetes/kubelet.conf异常文件所有者是 vcap:vcap
        scored: false

      - id: 4.1.7
        text: "确保证书颁发机构文件的权限设置为 644 或更严格。"
        audit: stat -c permissions=%a /var/vcap/jobs/kubelet/config/kubelet-client-ca.pem
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |-
          运行以下命令修改 --client-ca-file 文件的权限：chmod 644 <filename>。
        scored: true

      - id: 4.1.8
        text: "确保客户端证书颸机构文件的所有权设置为 root:root。"
        audit: stat -c %U:%G /var/vcap/jobs/kubelet/config/kubelet-client-ca.pem
        type: manual
        tests:
          test_items:
            - flag: root:root
              compare:
                op: eq
                value: root:root
        remediation: |-
          运行以下命令来修改 --client-ca-file 的所有权。chown root:root <文件名>异常文件属于 vcap 组。
        scored: false

      - id: 4.1.9
        text: "确保 kubelet --config 配置文件的权限设置为 644 或更严格。"
        audit: stat -c permissions=%a /var/vcap/jobs/kubelet/config/kubeletconfig.yml
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |-
          运行以下命令（使用审计步骤中识别出的配置文件位置）：chmod 644 /var/vcap/jobs/kubelet/config/kubeletconfig.yml
        scored: true

      - id: 4.1.10
        text: "确保 kubelet --config 配置文件的所有权设置为 root:root。"
        audit: stat -c %U:%G /var/vcap/jobs/kubelet/config/kubeletconfig.yml
        type: manual
        tests:
          test_items:
            - flag: root:root
        remediation: |-
          运行以下命令（使用审计步骤中确定的配置文件位置）：chown root:root /var/vcap/jobs/kubelet/config/kubeletconfig.yml异常文件的组所有者是 vcap。
        scored: false

  - id: 4.2
    text: "Kubelet"
    checks:
      - id: 4.2.1
        text: "确保将 anonymous-auth 参数设置为 false。"
        audit: grep "^authentication:\n\s{2}anonymous:\n\s{4}enabled:\sfalse$" /var/vcap/jobs/kubelet/config/kubeletconfig.yml
        tests:
          test_items:
            - flag: "enabled: false"
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑文件将 authentication: anonymous: enabled 设置为 false。如果使用可执行参数，请在每个工作节点上编辑 kubelet 服务文件，并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数。--anonymous-auth=false根据您的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: true

      - id: 4.2.2
        text: "确保 --authorization-mode 参数未设置为 AlwaysAllow。"
        audit: |
          grep "^authorization:\n\s{2}mode: AlwaysAllow$" /var/vcap/jobs/kubelet/config/kubeletconfig.yml
        tests:
          test_items:
            - flag: "AlwaysAllow"
              set: false
        remediation: |-
          如果使用 Kubelet 配置文件，编辑该文件，将 authorization: mode 设置为 Webhook。如果使用可执行参数，编辑每个工作节点上的 kubelet 服务文件，并在 KUBELET_AUTHZ_ARGS 变量中设置以下参数。--authorization-mode=Webhook根据您的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: true

      - id: 4.2.3
        text: "确保将 --client-ca-file 参数设置为适当的数值。"
        audit: |
          grep ^authentication:\n\s{2}anonymous:\n\s{4}enabled:\sfalse\n(\s{2}webhook:\n\s{4}cacheTTL:\s\d+s\n\s{4}enabled:.*\n)?
          \s{2}x509:\n\s{4}clientCAFile:\s"\/var\/vcap\/jobs\/kubelet\/config\/kubelet-client-ca\.pem" /var/vcap/jobs/kubelet/config/kubeletconfig.yml
        tests:
          test_items:
            - flag: "clientCAFile"
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑该文件，并将 authentication: x509: clientCAFile 设置为客户端 CA 文件的路径。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件，并在 KUBELET_AUTHZ_ARGS 变量中设置以下参数：--client-ca-file=<path/to/client-ca-file>根据您的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: true

      - id: 4.2.4
        text: "确保将 --read-only-port 参数设置为 0。"
        audit: |
          grep "readOnlyPort: 0" /var/vcap/jobs/kubelet/config/kubeletconfig.yml
        tests:
          test_items:
            - flag: "readOnlyPort: 0"
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑文件将 readOnlyPort 设置为 0。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件，在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数：--read-only-port=0。根据您的系统，重启 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: true

      - id: 4.2.5
        text: "确保 --streaming-connection-idle-timeout 参数未设置为 0。"
        audit: |
          grep -- "streamingConnectionIdleTimeout: 0"  /var/vcap/jobs/kubelet/config/kubeletconfig.yml
        tests:
          test_items:
            - flag: "streamingConnectionIdleTimeout: 0"
              set: false
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑该文件，将 streamingConnectionIdleTimeout 设置为非 0 值。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件，并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置如下参数。--streaming-connection-idle-timeout=5m根据你的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: true

      - id: 4.2.6
        text: "确保将 --protect-kernel-defaults 参数设置为 true。"
        audit: |
          grep -- "protectKernelDefaults: true" /var/vcap/jobs/kubelet/config/kubeletconfig.yml
        tests:
          test_items:
            - flag: "protectKernelDefaults: true"
        remediation: |-
          如果使用 Kubelet 配置文件，编辑该文件，将 protectKernelDefaults: true 设置为 true。如果使用命令行参数，编辑每个工作节点上的 kubelet 服务文件，并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数。--protect-kernel-defaults=true根据你的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: true

      - id: 4.2.7
        text: "确保将 --make-iptables-util-chains 参数设置为 true。"
        audit: |
          grep -- "makeIPTablesUtilChains: true" /var/vcap/jobs/kubelet/config/kubeletconfig.yml
        tests:
          test_items:
            - flag: "makeIPTablesUtilChains: true"
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑文件将 makeIPTablesUtilChains: 设置为 true。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件，并从 KUBELET_SYSTEM_PODS_ARGS 变量中删除 --make-iptables-util-chains 参数。根据您的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: true

      - id: 4.2.8
        text: "确保未设置 --hostname-override 参数。"
        audit: |
          ps -ef | grep [k]ubelet | grep -- --[c]onfig=/var/vcap/jobs/kubelet/config/kubeletconfig.yml | grep -v -- --hostname-override
        type: manual
        remediation: |-
          编辑每个工作节点上的 kubelet 服务文件，并从 KUBELET_SYSTEM_PODS_ARGS 变量中删除 --hostname-override 参数。根据您的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service特例在 GCE 上，主机名需要设置为实例名称，以便 gce 云提供程序可以管理该实例。在其他情况下，它设置为 VM 的 IP 地址。
        scored: false

      - id: 4.2.9
        text: "确保将 --event-qps 参数设置为 0 或者能够确保适当事件捕获的级别。"
        audit: grep -- "--event-qps" /var/vcap/jobs/kubelet/config/kubeletconfig.yml
        type: manual
        tests:
          test_items:
            - flag: "--event-qps"
              compare:
                op: eq
                value: 0
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑文件将 eventRecordQPS 设置为适当的级别。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件，并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数。根据您的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: false

      - id: 4.2.10
        text: "确保将 --tls-cert-file 和 --tls-private-key-file 参数设置为适当的数值。"
        audit: |
          grep  ^tlsCertFile:\s\"\/var\/vcap\/jobs\/kubelet\/config\/kubelet\.pem\"\ntlsPrivateKeyFile:\s\"\/var\/vcap\/jobs\/kubelet\/config\/kubelet-key\.pem\"$
          /var/vcap/jobs/kubelet/config/kubeletconfig.yml
        tests:
          bin_op: and
          test_items:
            - flag: "tlsCertFile"
            - flag: "tlsPrivateKeyFile"
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑文件将 tlsCertFile 设置为标识此 Kubelet 的证书文件的位置，将 tlsPrivateKeyFile 设置为相应私钥文件的位置。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件，并在 KUBELET_CERTIFICATE_ARGS 变量中设置以下参数。--tls-cert-file=<path/to/tls-certificate-file>--tls-private-key-file=<path/to/tls-key-file>根据你的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: true

      - id: 4.2.11
        text: "确保 --rotate-certificates 参数没有设置为 false。"
        audit: ps -ef | grep kubele[t] | grep -- "--rotate-certificates=false"
        type: manual
        tests:
          test_items:
            - flag: "--rotate-certificates=false"
              set: false
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑文件，添加一行 rotateCertificates: true，或者完全移除该行以使用默认值。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件，从 KUBELET_CERTIFICATE_ARGS 变量中移除 --rotate-certificates=false 参数。根据你的系统，重启 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service注：证书轮换由 Credhub 处理。
        scored: false

      - id: 4.2.12
        text: "验证 RotateKubeletServerCertificate 参数是否设置为 true。"
        audit: ps -ef | grep kubele[t] | grep -- "--feature-gates=\(\w\+\|,\)*RotateKubeletServerCertificate=true\(\w\+\|,\)*"
        type: manual
        tests:
          test_items:
            - flag: "RotateKubeletServerCertificate=true"
        remediation: |-
          编辑每个 worker 节点上的 kubelet 服务文件，并在 KUBELET_CERTIFICATE_ARGS 变量中设置以下参数：--feature-gates=RotateKubeletServerCertificate=true根据你的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service异常证书轮换由 Credhub 处理
        scored: false

      - id: 4.2.13
        text: "确保 Kubelet 仅使用强加密密码。"
        audit: ps -ef | grep kubele[t] | grep -- "--tls-cipher- 
          suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
        type: manual
        tests:
          test_items:
            - flag: --tls-cipher-suites
              compare:
                op: regex
                value: 
                  (TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305|TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305|TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_RSA_WITH_AES_256_GCM_SHA384|TLS_RSA_WITH_AES_128_GCM_SHA256)
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑文件并将 tlsCipherSuites 设置为以下数值之一，或该数值的子集：TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256如果使用可执行参数，请编辑每个工作节点上的 kubelet 服务文件，并设置 --tls-cipher-suites 参数如下，或其子集：--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256根据您的系统，重启 kubelet 服务，例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: false
