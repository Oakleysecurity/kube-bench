controls:
version: "cis-1.9"
id: 1
text: "控制平面安全配置"
type: "master"
groups:
  - id: 1.1
    text: "控制平面节点配置文件"
    checks:
      - id: 1.1.1
        text: "确保 API 服务器的 Pod 规范文件权限设置为 600 或更严格（自动化）。"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c permissions=%a
          $apiserverconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据你系统上文件的位置）。例如，chmod 600 $apiserverconf.
        scored: true

      - id: 1.1.2
        text: "确保 API 服务器 Pod 规范文件的所有权设置为 root:root（自动）。"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c %U:%G $apiserverconf;
          fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统上文件的位置）。例如，chown root:root $apiserverconf
        scored: true

      - id: 1.1.3
        text: "确保控制器管理器 Pod 规范文件的权限设置为 600 或更严格（自动化）。"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c permissions=%a
          $controllermanagerconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如，chmod 600 $controllermanagerconf
        scored: true

      - id: 1.1.4
        text: "确保控制器管理器 Pod 规范文件的所有权设置为 root:root（自动化）。"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c %U:%G
          $controllermanagerconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统中文件的位置）。例如，chown root:root $controllermanagerconf
        scored: true

      - id: 1.1.5
        text: "确保调度器 Pod 的规范文件权限设置为 600 或更严格（自动）。"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c permissions=%a
          $schedulerconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统中文件的位置）。例如，chmod 600 $schedulerconf.
        scored: true

      - id: 1.1.6
        text: "确保调度器 Pod 规范文件的所有权设置为 root:root（自动化）。"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c %U:%G $schedulerconf;
          fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据文件在您系统上的位置）。例如，执行 chown root:root $schedulerconf。
        scored: true

      - id: 1.1.7
        text: "确保 etcd Pod 规范文件的权限设置为 600 或更严格（自动化）。"
        audit: "/bin/sh -c 'if test -e $etcdconf; then find $etcdconf -name '*etcd*'
          | xargs stat -c permissions=%a; fi'"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统中文件的位置）。例如，chmod 600 $etcdconf
        scored: true

      - id: 1.1.8
        text: "确保 etcd Pod 规范文件的所有者设置为 root:root（自动化操作）。"
        audit: "/bin/sh -c 'if test -e $etcdconf; then find $etcdconf -name '*etcd*'
          | xargs stat -c %U:%G; fi'"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（基于你系统中文件的位置）。例如，chown root:root $etcdconf
        scored: true

      - id: 1.1.9
        text: "确保容器网络接口文件的权限设置为 600 或更严格（手动）。"
        audit: |
          ps -ef | grep $kubeletbin | grep -- --cni-conf-dir | sed 's%.*cni-conf-dir[= ]\([^ ]*\).*%\1%' | xargs -I{} find {} -mindepth 1 | xargs --no-run-if-empty stat -c permissions=%a
          find /var/lib/cni/networks -type f 2> /dev/null | xargs --no-run-if-empty stat -c permissions=%a
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据文件在您系统上的位置）。例如，chmod 600 <path/to/cni/files>
        scored: false

      - id: 1.1.10
        text: "确保容器网络接口文件的所有权设置为 root:root（手动）。"
        audit: |
          ps -ef | grep $kubeletbin | grep -- --cni-conf-dir | sed 's%.*cni-conf-dir[= ]\([^ ]*\).*%\1%' | xargs -I{} find {} -mindepth 1 | xargs --no-run-if-empty stat -c %U:%G
          find /var/lib/cni/networks -type f 2> /dev/null | xargs --no-run-if-empty stat -c %U:%G
        use_multiple_values: true
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统中文件的位置）。例如，chown root:root <path/to/cni/files>
        scored: false

      - id: 1.1.11
        text: "确保 etcd 数据目录的权限设置为 700 或更严格（自动化）。"
        audit: |
          DATA_DIR=''
          for d in $(ps -ef | grep $etcdbin | grep -- --data-dir | sed 's%.*data-dir[= ]\([^ ]*\).*%\1%'); do
            if test -d "$d"; then DATA_DIR="$d"; fi
          done
          if ! test -d "$DATA_DIR"; then DATA_DIR=$etcddatadir; fi
          stat -c permissions=%a "$DATA_DIR"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "700"
        remediation: |-
          在 etcd 服务器节点上，使用命令 'ps -ef | grep etcd' 获取 etcd 数据目录作为参数 --data-dir。根据上面找到的 etcd 数据目录运行以下命令。例如，chmod 700 /var/lib/etcd
        scored: true

      - id: 1.1.12
        text: "确保 etcd 数据目录的所有权设置为 etcd:etcd（自动化）."
        audit: |
          DATA_DIR=''
          for d in $(ps -ef | grep $etcdbin | grep -- --data-dir | sed 's%.*data-dir[= ]\([^ ]*\).*%\1%'); do
            if test -d "$d"; then DATA_DIR="$d"; fi
          done
          if ! test -d "$DATA_DIR"; then DATA_DIR=$etcddatadir; fi
          stat -c %U:%G "$DATA_DIR"
        tests:
          test_items:
            - flag: "etcd:etcd"
        remediation: |-
          在 etcd 服务器节点上，从命令 'ps -ef | grep etcd' 获取 etcd 数据目录，作为参数 --data-dir 传递。运行以下命令（根据上面找到的 etcd 数据目录）。例如，chown etcd:etcd /var/lib/etcd
        scored: true

      - id: 1.1.13
        text: "确保将默认的管理员凭据文件权限设置为 600（自动设置）。"
        audit: |
          for adminconf in /etc/kubernetes/admin.conf /etc/kubernetes/super-admin.conf; do if test -e $adminconf; then stat -c "permissions=%a %n" $adminconf; fi; done
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如，chmod 600 /etc/kubernetes/admin.conf在 Kubernetes 1.29+ 上，如果存在 super-admin.conf 文件，也应该修改它。例如，chmod 600 /etc/kubernetes/super-admin.conf
        scored: true

      - id: 1.1.14
        text: "确保默认管理员凭据文件的所有权设置为 root:root（自动）。"
        audit: |
          for adminconf in /etc/kubernetes/admin.conf /etc/kubernetes/super-admin.conf; do if test -e $adminconf; then stat -c "ownership=%U:%G %n" $adminconf; fi; done
        use_multiple_values: true
        tests:
          test_items:
            - flag: "ownership"
              compare:
                op: eq
                value: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（基于系统上文件的位置）。例如，chown root:root /etc/kubernetes/admin.conf在 Kubernetes 1.29+ 版本中，如果存在 super-admin.conf 文件，也应该进行修改。例如，chown root:root /etc/kubernetes/super-admin.conf
        scored: true

      - id: 1.1.15
        text: "确保 scheduler.conf 文件权限设置为 600 或更严格（自动）。"
        audit: "/bin/sh -c 'if test -e $schedulerkubeconfig; then stat -c permissions=%a
          $schedulerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据文件在您系统上的位置）。例如，chmod 600 $schedulerkubeconfig
        scored: true

      - id: 1.1.16
        text: "确保 scheduler.conf 文件的所有权设置为 root:root（自动化）。"
        audit: "/bin/sh -c 'if test -e $schedulerkubeconfig; then stat -c %U:%G $schedulerkubeconfig;
          fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据文件在您系统上的位置）。例如，chown root:root $schedulerkubeconfig
        scored: true

      - id: 1.1.17
        text: "确保 controller-manager.conf 文件的权限设置为 600 或更严格（自动操作）。"
        audit: "/bin/sh -c 'if test -e $controllermanagerkubeconfig; then stat -c
          permissions=%a $controllermanagerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据文件在你系统上的位置）。例如，chmod 600 $controllermanagerkubeconfig
        scored: true

      - id: 1.1.18
        text: "确保 controller-manager.conf 文件的所有权设置为 root:root（自动化）。"
        audit: "/bin/sh -c 'if test -e $controllermanagerkubeconfig; then stat -c
          %U:%G $controllermanagerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统中文件的位置）。例如，chown root:root $controllermanagerkubeconfig
        scored: true

      - id: 1.1.19
        text: "确保 Kubernetes PKI 目录和文件的所有权设置为 root:root（自动化）。"
        audit: "find /etc/kubernetes/pki/ | xargs stat -c %U:%G"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如，chown -R root:root /etc/kubernetes/pki/
        scored: true

      - id: 1.1.20
        text: "确保 Kubernetes PKI 证书文件权限设置为 600 或更严格（手动）."
        audit: "find /etc/kubernetes/pki/ -name '*.crt' | xargs stat -c permissions=%a"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如，chmod -R 600 /etc/kubernetes/pki/*.crt
        scored: false

      - id: 1.1.21
        text: "确保 Kubernetes PKI 密钥文件的权限设置为 600（手动）。"
        audit: "find /etc/kubernetes/pki/ -name '*.key' | xargs stat -c permissions=%a"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如，chmod -R 600 /etc/kubernetes/pki/*.key
        scored: false

  - id: 1.2
    text: "API 服务器"
    checks:
      - id: 1.2.1
        text: "确保将 --anonymous-auth 参数设置为 false（手动）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--anonymous-auth"
              compare:
                op: eq
                value: false
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并设置以下参数。--anonymous-auth=false
        scored: false

      - id: 1.2.2
        text: "确保未设置 --token-auth-file 参数（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--token-auth-file"
              set: false
        remediation: |-
          按照文档指引，配置替代的身份验证机制。然后，在控制平面节点上编辑 API 服务器 pod 规范文件 $apiserverconf，并移除 --token-auth-file=<filename> 参数。
        scored: true

      - id: 1.2.3
        text: "确保设置 --DenyServiceExternalIPs（手动设置）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "DenyServiceExternalIPs"
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并将 `DenyServiceExternalIPs` 插件添加到启用的准入插件中，如下所示 --enable-admission-plugin=DenyServiceExternalIPs。
        scored: false

      - id: 1.2.4
        text: "确保 --kubelet-client-certificate 和 --kubelet-client-key 参数设置正确（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--kubelet-client-certificate"
            - flag: "--kubelet-client-key"
        remediation: |-
          按照 Kubernetes 文档的指引，在 apiserver 和 kubelet 之间建立 TLS 连接。接着，在控制平面节点上编辑 API server pod 的规范文件 $apiserverconf，并设置如下的 kubelet 客户端证书和密钥参数。--kubelet-client-certificate=<path/to/client-certificate-file>--kubelet-client-key=<path/to/client-key-file>
        scored: true

      - id: 1.2.5
        text: "确保将 --kubelet-certificate-authority 参数设置为适当的值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--kubelet-certificate-authority"
        remediation: |-
          按照 Kubernetes 文档的指引，在 apiserver 和 kubelet 之间建立 TLS 连接。然后，在控制平面节点上编辑 API 服务器 Pod 的规范文件 $apiserverconf，并将 --kubelet-certificate-authority 参数设置为证书颁发机构的证书文件路径。--kubelet-certificate-authority=<ca-string>
        scored: true

      - id: 1.2.6
        text: "确保 --authorization-mode 参数未设置为 AlwaysAllow（自动）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: nothave
                value: "AlwaysAllow"
        remediation: |-
          在控制平面节点上编辑 API 服务器的 Pod 规范文件 $apiserverconf，并将 --authorization-mode 参数设置为除 AlwaysAllow 之外的其他值。一个示例可以如下所示。--authorization-mode=RBAC
        scored: true

      - id: 1.2.7
        text: "确保 --authorization-mode 参数包含 Node (Automated)。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "Node"
        remediation: |-
          编辑控制平面节点上的 API 服务器 Pod 规范文件 $apiserverconf，并将 --authorization-mode 参数设置为包含 Node 的值。--authorization-mode=Node,RBAC
        scored: true

      - id: 1.2.8
        text: "确保 --authorization-mode 参数包括 RBAC（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "RBAC"
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并将 --authorization-mode 参数设置为包含 RBAC 的值，例如 `--authorization-mode=Node,RBAC`。
        scored: true

      - id: 1.2.9
        text: "确保 admission control 插件 EventRateLimit 已设置为 Manual。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "EventRateLimit"
        remediation: |-
          按照 Kubernetes 文档的指导，在配置文件中设置所需的限制。然后，编辑 API 服务器 Pod 的规范文件 $apiserverconf，并设置以下参数。--enable-admission-plugins=...,EventRateLimit,...--admission-control-config-file=<path/to/configuration/file>
        scored: false

      - id: 1.2.10
        text: "确保准入控制插件 AlwaysAdmit 未设置（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: nothave
                value: AlwaysAdmit
            - flag: "--enable-admission-plugins"
              set: false
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并移除 --enable-admission-plugins 参数，或将其设置为不包括 AlwaysAdmit 的值。
        scored: true

      - id: 1.2.11
        text: "确保 admission control 插件 AlwaysPullImages 已设置为（手动）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "AlwaysPullImages"
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并设置 --enable-admission-plugins 参数包含 AlwaysPullImages。--enable-admission-plugins=...,AlwaysPullImages,...
        scored: false

      - id: 1.2.12
        text: "确保 admission 控制插件 ServiceAccount 被设置为（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "ServiceAccount"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |-
          按照文档的说明，在您的环境中创建 ServiceAccount 对象。然后，在控制平面节点上编辑 API 服务器 pod 规范文件 $apiserverconf，并确保将 --disable-admission-plugins 参数设置为不包含 ServiceAccount 的值。
        scored: true

      - id: 1.2.13
        text: "确保 admission control 插件 NamespaceLifecycle 已设置为 (自动方式)。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "NamespaceLifecycle"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并设置 --disable-admission-plugins 参数，确保其中不包括 NamespaceLifecycle。
        scored: true

      - id: 1.2.14
        text: "确保 admission control 插件 NodeRestriction 被设置为 （自动）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "NodeRestriction"
        remediation: |-
          按照 Kubernetes 文档的指引，在 kubelet 上配置 NodeRestriction 插件。然后，在控制平面节点上编辑 API 服务器的 pod 规范文件 $apiserverconf，并将 --enable-admission-plugins 参数设置为包含 NodeRestriction 的值。--enable-admission-plugins=...,NodeRestriction,...
        scored: true

      - id: 1.2.15
        text: "确保 --profiling 参数设置为 false（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并设置以下参数。--profiling=false
        scored: true

      - id: 1.2.16
        text: "确保设置了 --audit-log-path 参数（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-path"
        remediation: |-
          编辑控制平面节点上的 API 服务器 Pod 规范文件 $apiserverconf，并将 --audit-log-path 参数设置为合适的路径和文件，用于记录审计日志，例如 --audit-log-path=/var/log/apiserver/audit.log。
        scored: true

      - id: 1.2.17
        text: "确保将 --audit-log-maxage 参数设置为 30 或适当的值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxage"
              compare:
                op: gte
                value: 30
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并将 --audit-log-maxage 参数设置为 30 或适当的天数，例如，--audit-log-maxage=30。
        scored: true

      - id: 1.2.18
        text: "确保 --audit-log-maxbackup 参数设置为 10 或适当的值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxbackup"
              compare:
                op: gte
                value: 10
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 的规范文件 $apiserverconf，并将 --audit-log-maxbackup 参数设置为 10 或适当的值。例如，--audit-log-maxbackup=10。
        scored: true

      - id: 1.2.19
        text: "确保 --audit-log-maxsize 参数设置为 100 或适当的数值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxsize"
              compare:
                op: gte
                value: 100
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并将 --audit-log-maxsize 参数设置为适当的大小（以 MB 为单位）。例如，要将其设置为 100 MB，可以使用 --audit-log-maxsize=100。
        scored: true

      - id: 1.2.20
        text: "确保将 --request-timeout 参数设置为适当的数值（手动）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        type: manual
        remediation: |-
          编辑 API 服务器 Pod 规范文件 $apiserverconf，并根据需要设置以下参数。例如，--request-timeout=300s。
        scored: false

      - id: 1.2.21
        text: "确保将 --service-account-lookup 参数设置为 true（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--service-account-lookup"
              set: false
            - flag: "--service-account-lookup"
              compare:
                op: eq
                value: true
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并设置以下参数。--service-account-lookup=true或者，您可以从该文件中删除 --service-account-lookup 参数，以便使用默认设置。
        scored: true

      - id: 1.2.22
        text: "确保将 --service-account-key-file 参数设置为适当的数值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--service-account-key-file"
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并将 --service-account-key-file 参数设置为服务账户的公钥文件。例如，--service-account-key-file=<filename>。
        scored: true

      - id: 1.2.23
        text: "确保将 --etcd-certfile 和 --etcd-keyfile 参数设置为适当的值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--etcd-certfile"
            - flag: "--etcd-keyfile"
        remediation: |-
          按照 Kubernetes 文档，建立 apiserver 和 etcd 之间的 TLS 连接。然后，在控制平面节点上编辑 API server pod 规范文件 $apiserverconf，并设置 etcd 证书和密钥文件参数。--etcd-certfile=<path/to/client-certificate-file>--etcd-keyfile=<path/to/client-key-file>
        scored: true

      - id: 1.2.24
        text: "确保将 --tls-cert-file 和 --tls-private-key-file 参数设置为适当的值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--tls-cert-file"
            - flag: "--tls-private-key-file"
        remediation: |-
          按照 Kubernetes 文档的指引，在 apiserver 上设置 TLS 连接。然后，在控制平面节点上编辑 API 服务器 pod 的规范文件 $apiserverconf，并设置 TLS 证书文件和私钥文件参数。--tls-cert-file=<路径/到/证书文件>--tls-private-key-file=<路径/到/密钥文件>
        scored: true

      - id: 1.2.25
        text: "确保 --client-ca-file 参数被适当设置（自动）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--client-ca-file"
        remediation: |-
          按照 Kubernetes 文档设置在 apiserver 上建立 TLS 连接。然后，在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并设置客户端证书颁发机构文件。--client-ca-file=<path/to/client-ca-file>。
        scored: true

      - id: 1.2.26
        text: "确保将 --etcd-cafile 参数设置为适当的值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--etcd-cafile"
        remediation: |-
          按照 Kubernetes 文档的指引，在 apiserver 和 etcd 之间建立 TLS 连接。然后，在控制平面节点上编辑 API server 的 pod 规范文件 $apiserverconf，并设置 etcd 证书颁发机构文件参数。--etcd-cafile=<path/to/ca-file>。
        scored: true

      - id: 1.2.27
        text: "确保 --encryption-provider-config 参数设置正确（手动）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--encryption-provider-config"
        remediation: |-
          按照 Kubernetes 文档的指导配置一个 EncryptionConfig 文件。然后，在控制平面节点上编辑 API 服务器 pod 规范文件 $apiserverconf，并将 --encryption-provider-config 参数设置为该文件的路径。例如，--encryption-provider-config=</path/to/EncryptionConfig/File>。
        scored: false

      - id: 1.2.28
        text: "确保加密提供者已经正确配置（手动）。"
        audit: |
          ENCRYPTION_PROVIDER_CONFIG=$(ps -ef | grep $apiserverbin | grep -- --encryption-provider-config | sed 's%.*encryption-provider-config[= ]\([^ ]*\).*%\1%')
          if test -e $ENCRYPTION_PROVIDER_CONFIG; then grep -A1 'providers:' $ENCRYPTION_PROVIDER_CONFIG | tail -n1 | grep -o "[A-Za-z]*" | sed 's/^/provider=/'; fi
        tests:
          test_items:
            - flag: "provider"
              compare:
                op: valid_elements
                value: "aescbc,kms,secretbox"
        remediation: |-
          按照 Kubernetes 文档的指导配置 EncryptionConfig 文件。在这个文件中，选择 aescbc、kms 或 secretbox 作为加密提供者。
        scored: false

      - id: 1.2.29
        text: "确保 API 服务器只使用强加密密码（手动）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--tls-cipher-suites"
              compare:
                op: valid_elements
                value: "TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384"
        remediation: |-
          编辑控制平面节点上的 API 服务器容器规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml，并设置以下参数。--tls-cipher-suites=TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384
        scored: false

  - id: 1.3
    text: "控制器管理器"
    checks:
      - id: 1.3.1
        text: "确保将 --terminated-pod-gc-threshold 参数设置为适当的数值（手动设置）。"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--terminated-pod-gc-threshold"
        remediation: |-
          在控制平面节点上编辑 Controller Manager 的 Pod 规范文件 $controllermanagerconf，并将 --terminated-pod-gc-threshold 设置为一个适当的阈值，例如，--terminated-pod-gc-threshold=10。
        scored: false

      - id: 1.3.2
        text: "确保将 --profiling 参数设置为 false（自动化）。"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |-
          编辑控制平面节点上的 Controller Manager Pod 规范文件 $controllermanagerconf，并设置以下参数。--profiling=false
        scored: true

      - id: 1.3.3
        text: "确保将 --use-service-account-credentials 参数设置为 true（自动化）。"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--use-service-account-credentials"
              compare:
                op: noteq
                value: false
        remediation: |-
          在控制平面节点上编辑 Controller Manager 的 Pod 规范文件 $controllermanagerconf，设置以下参数。--use-service-account-credentials=true
        scored: true

      - id: 1.3.4
        text: "确保 --service-account-private-key-file 参数被正确设置（自动化）。"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--service-account-private-key-file"
        remediation: |-
          在控制平面节点上编辑 Controller Manager pod 的规范文件 $controllermanagerconf，并将 --service-account-private-key-file 参数设置为服务账户的私钥文件。--service-account-private-key-file=<文件名>
        scored: true

      - id: 1.3.5
        text: "确保 --root-ca-file 参数设置正确（自动化）。"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--root-ca-file"
        remediation: |-
          在控制平面节点上编辑 Controller Manager 的 Pod 规范文件 $controllermanagerconf，并将 --root-ca-file 参数设置为证书捆绑文件。--root-ca-file=<path/to/file>
        scored: true

      - id: 1.3.6
        text: "确保 RotateKubeletServerCertificate 参数设置为 true（自动）。"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--feature-gates"
              compare:
                op: nothave
                value: "RotateKubeletServerCertificate=false"
              set: true
            - flag: "--feature-gates"
              set: false
        remediation: |-
          在控制平面节点上编辑 Controller Manager 的 Pod 规范文件 $controllermanagerconf，并将 --feature-gates 参数设置为包含 RotateKubeletServerCertificate=true。--feature-gates=RotateKubeletServerCertificate=true
        scored: true

      - id: 1.3.7
        text: "确保将 --bind-address 参数设置为 127.0.0.1（自动化）。"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
            - flag: "--bind-address"
              set: false
        remediation: |-
          在控制平面节点上编辑 Controller Manager 的 Pod 规范文件 $controllermanagerconf，并确保 --bind-address 参数的数值正确。
        scored: true

  - id: 1.4
    text: "调度器"
    checks:
      - id: 1.4.1
        text: "确保 --profiling 参数设置为 false（自动化）。"
        audit: "/bin/ps -ef | grep $schedulerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |-
          编辑控制平面节点上的 Scheduler Pod 规范文件 $schedulerconf 文件，并设置以下参数。--profiling=false
        scored: true

      - id: 1.4.2
        text: "确保将 --bind-address 参数设置为 127.0.0.1（自动化）。"
        audit: "/bin/ps -ef | grep $schedulerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
            - flag: "--bind-address"
              set: false
        remediation: |-
          编辑控制平面节点上的调度器 Pod 规范文件 $schedulerconf，并确保 --bind-address 参数的正确数值。
        scored: true
