controls:
version: "cis-1.9"
id: 4
text: "工作节点安全配置"
type: "node"
groups:
  - id: 4.1
    text: "工作节点配置文件"
    checks:
      - id: 4.1.1
        text: "确保 kubelet 服务文件的权限设置为 600 或更严格（自动化）。"
        audit: '/bin/sh -c ''if test -e $kubeletsvc; then stat -c permissions=%a $kubeletsvc;
          fi'' '
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在每个 worker 节点上运行以下命令（根据文件在您系统中的位置）。例如，chmod 600 $kubeletsvc.
        scored: true

      - id: 4.1.2
        text: "确保 kubelet 服务文件的所有权设置为 root:root（自动化）。"
        audit: '/bin/sh -c "if test -e $kubeletsvc; then stat -c %U:%G $kubeletsvc;
          else echo \"File not found\"; fi"'
        tests:
          bin_op: or
          test_items:
            - flag: root:root
            - flag: "File not found"
        remediation: |-
          在每个工作节点上运行以下命令（根据你系统上文件的位置）。例如，chown root:root $kubeletsvc
        scored: true

      - id: 4.1.3
        text: "如果存在代理 kubeconfig 文件，请确保权限设置为 600 或更为严格（手动）。"
        audit: '/bin/sh -c ''if test -e $proxykubeconfig; then stat -c permissions=%a
          $proxykubeconfig; fi'' '
        tests:
          bin_op: or
          test_items:
            - flag: "permissions"
              set: true
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在每个工作节点上运行以下命令（根据文件在您系统中的位置）。例如，chmod 600 $proxykubeconfig
        scored: false

      - id: 4.1.4
        text: "如果代理 kubeconfig 文件存在，请确保将所有权设置为 root:root（手动操作）。"
        audit: '/bin/sh -c ''if test -e $proxykubeconfig; then stat -c %U:%G $proxykubeconfig;
          fi'' '
        tests:
          bin_op: or
          test_items:
            - flag: root:root
        remediation: |-
          在每个工作节点上运行以下命令（基于您系统上文件的位置）。例如，chown root:root $proxykubeconfig
        scored: false

      - id: 4.1.5
        text: "确保 --kubeconfig kubelet.conf 文件的权限设置为 600 或更严格（自动化）。"
        audit: '/bin/sh -c ''if test -e $kubeletkubeconfig; then stat -c permissions=%a
          $kubeletkubeconfig; fi'' '
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在每个工作节点上运行以下命令（根据系统上文件的位置）。例如，chmod 600 $kubeletkubeconfig
        scored: true

      - id: 4.1.6
        text: "确保 --kubeconfig kubelet.conf 文件的所有权设置为 root:root（自动设置）。"
        audit: '/bin/sh -c ''if test -e $kubeletkubeconfig; then stat -c %U:%G $kubeletkubeconfig;
          fi'' '
        tests:
          test_items:
            - flag: root:root
        remediation: |-
          在每个工作节点上运行以下命令（基于您系统上文件的位置）。例如,chown root:root $kubeletkubeconfig
        scored: true

      - id: 4.1.7
        text: "确保证书颁发机构文件的权限设置为 600 或更严格（手动）。"
        audit: |
          CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}' | uniq)
          if test -z $CAFILE; then CAFILE=$kubeletcafile; fi
          if test -e $CAFILE; then stat -c permissions=%a $CAFILE; fi
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          运行以下命令来修改 --client-ca-file 的文件权限 chmod 600 <filename>。
        scored: false

      - id: 4.1.8
        text: "确保客户端证书颸文件的所有者设置为 root:root（手动）"
        audit: |
          CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}' | uniq)
          if test -z $CAFILE; then CAFILE=$kubeletcafile; fi
          if test -e $CAFILE; then stat -c %U:%G $CAFILE; fi
        tests:
          test_items:
            - flag: root:root
              compare:
                op: eq
                value: root:root
        remediation: |-
          运行以下命令来修改 --client-ca-file 的所有权。chown root:root <filename>
        scored: false

      - id: 4.1.9
        text: "如果正在使用 kubelet config.yaml 配置文件，请验证权限设置为 600 或更为严格（自动化）。"
        audit: '/bin/sh -c ''if test -e $kubeletconf; then stat -c permissions=%a
          $kubeletconf; fi'' '
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          运行以下命令（使用审核步骤中确定的配置文件位置）chmod 600 $kubeletconf
        scored: true

      - id: 4.1.10
        text: "如果正在使用 kubelet config.yaml 配置文件，请验证文件所有权设置为 root:root（自动化）。"
        audit: '/bin/sh -c ''if test -e $kubeletconf; then stat -c %U:%G $kubeletconf;
          fi'' '
        tests:
          test_items:
            - flag: root:root
        remediation: |-
          运行以下命令（使用审计步骤中标识的配置文件位置）：chown root:root $kubeletconf
        scored: true

  - id: 4.2
    text: "Kubelet 是 Kubernetes 中负责在每个节点上运行容器的组件。"
    checks:
      - id: 4.2.1
        text: "确保 --anonymous-auth 参数被设置为 false（自动化）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: "--anonymous-auth"
              path: '{.authentication.anonymous.enabled}'
              compare:
                op: eq
                value: false
        remediation: |-
          如果使用 Kubelet 配置文件，编辑该文件，将 `authentication: anonymous: enabled` 设置为 `false`。如果使用可执行参数，编辑每个工作节点上的 Kubelet 服务文件 $kubeletsvc，并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数：--anonymous-auth=false根据您的系统，重启 Kubelet 服务。例如：systemctl daemon-reload  systemctl restart kubelet.service
        scored: true

      - id: 4.2.2
        text: "确保 --authorization-mode 参数未设置为 AlwaysAllow（自动化）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --authorization-mode
              path: '{.authorization.mode}'
              compare:
                op: nothave
                value: AlwaysAllow
        remediation: |-
          如果使用 Kubelet 配置文件，编辑该文件，将`authorization.mode`设置为 Webhook。如果使用可执行参数，编辑每个工作节点上的 kubelet 服务文件 $kubeletsvc，并在 KUBELET_AUTHZ_ARGS 变量中设置以下参数。--authorization-mode=Webhook根据你的系统，重启 kubelet 服务。例如，systemctl daemon-reload systemctl restart kubelet.service
        scored: true

      - id: 4.2.3
        text: "确保 --client-ca-file 参数被设置为适当的值（自动化）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --client-ca-file
              path: '{.authentication.x509.clientCAFile}'
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑文件，将 `authentication.x509.clientCAFile` 设置为客户端 CA 文件的位置。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件 `$kubeletsvc`，在 KUBELET_AUTHZ_ARGS 变量中设置以下参数。--client-ca-file=<path/to/client-ca-file>根据你的系统，重新启动 kubelet 服务。例如，systemctl daemon-reloadsystemctl restart kubelet.service
        scored: true

      - id: 4.2.4
        text: "验证 --read-only-port 参数是否设置为 0（手动）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          bin_op: or
          test_items:
            - flag: "--read-only-port"
              path: '{.readOnlyPort}'
              compare:
                op: eq
                value: 0
            - flag: "--read-only-port"
              path: '{.readOnlyPort}'
              set: false
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑该文件，将 readOnlyPort 设置为 0。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件 $kubeletsvc，并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数。--read-only-port=0根据你的系统情况，重启 kubelet 服务，例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: false

      - id: 4.2.5
        text: "确保 --streaming-connection-idle-timeout 参数未设置为 0（手动）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --streaming-connection-idle-timeout
              path: '{.streamingConnectionIdleTimeout}'
              compare:
                op: noteq
                value: 0
            - flag: --streaming-connection-idle-timeout
              path: '{.streamingConnectionIdleTimeout}'
              set: false
          bin_op: or
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑文件将 `streamingConnectionIdleTimeout` 设置为非 0 值。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件 $kubeletsvc，并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数：--streaming-connection-idle-timeout=5m根据你的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: false

      - id: 4.2.6
        text: "确保将 --make-iptables-util-chains 参数设置为 true（自动化）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --make-iptables-util-chains
              path: '{.makeIPTablesUtilChains}'
              compare:
                op: eq
                value: true
            - flag: --make-iptables-util-chains
              path: '{.makeIPTablesUtilChains}'
              set: false
          bin_op: or
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑文件将 `makeIPTablesUtilChains` 设置为 `true`。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件 $kubeletsvc，并从 KUBELET_SYSTEM_PODS_ARGS 变量中移除 --make-iptables-util-chains 参数。根据你的系统，重新启动 kubelet 服务。例如：```systemctl daemon-reloadsystemctl restart kubelet.service```
        scored: true

      - id: 4.2.7
        text: "确保未设置 --hostname-override 参数（手动）。"
        # This is one of those properties that can only be set as a command line argument.
        # To check if the property is set as expected, we need to parse the kubelet command
        # instead reading the Kubelet Configuration file.
        audit: "/bin/ps -fC $kubeletbin"
        tests:
          test_items:
            - flag: --hostname-override
              set: false
        remediation: |-
          在每个工作节点上编辑 kubelet 服务文件 $kubeletsvc，从 KUBELET_SYSTEM_PODS_ARGS 变量中移除 --hostname-override 参数。根据你的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: false

      - id: 4.2.8
        text: "确保将 eventRecordQPS 参数设置为一个可以确保适当事件捕获的级别（手动设置）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --event-qps
              path: '{.eventRecordQPS}'
              compare:
                op: gte
                value: 0
            - flag: --event-qps
              path: '{.eventRecordQPS}'
              set: false
          bin_op: or
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑文件将 `eventRecordQPS` 设置为适当的级别。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件 $kubeletsvc，并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数。根据你的系统，重新启动 kubelet 服务。例如，运行以下命令：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: false

      - id: 4.2.9
        text: "确保设置 --tls-cert-file 和 --tls-private-key-file 参数为适当的数值（手动）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --tls-cert-file
              path: '{.tlsCertFile}'
            - flag: --tls-private-key-file
              path: '{.tlsPrivateKeyFile}'
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑该文件，将 `tlsCertFile` 设置为用于识别此 Kubelet 的证书文件的位置，将 `tlsPrivateKeyFile` 设置为相应私钥文件的位置。如果使用命令行参数，请编辑每个 worker 节点上的 kubelet 服务文件 $kubeletsvc，设置以下参数在 KUBELET_CERTIFICATE_ARGS 变量中。--tls-cert-file=<tls证书文件路径>--tls-private-key-file=<tls私钥文件路径>根据您的系统，重新启动 kubelet 服务。例如，systemctl daemon-reloadsystemctl restart kubelet.service
        scored: false

      - id: 4.2.10
        text: "确保 --rotate-certificates 参数未设置为 false（自动化）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --rotate-certificates
              path: '{.rotateCertificates}'
              compare:
                op: eq
                value: true
            - flag: --rotate-certificates
              path: '{.rotateCertificates}'
              set: false
          bin_op: or
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑文件，将行`rotateCertificates`设置为 `true` 或者将其移除以使用默认值。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件 $kubeletsvc，从 KUBELET_CERTIFICATE_ARGS 变量中移除 --rotate-certificates=false 参数。根据你的系统，重新启动 kubelet 服务。例如：systemctl daemon-reload，systemctl restart kubelet.service。
        scored: true

      - id: 4.2.11
        text: "验证 RotateKubeletServerCertificate 参数是否设置为 true（手动）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          bin_op: or
          test_items:
            - flag: RotateKubeletServerCertificate
              path: '{.featureGates.RotateKubeletServerCertificate}'
              compare:
                op: nothave
                value: false
            - flag: RotateKubeletServerCertificate
              path: '{.featureGates.RotateKubeletServerCertificate}'
              set: false
        remediation: |-
          编辑每个工作节点上的 kubelet 服务文件 $kubeletsvc，并在 KUBELET_CERTIFICATE_ARGS 变量中设置以下参数。--feature-gates=RotateKubeletServerCertificate=true根据你的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: false

      - id: 4.2.12
        text: "确保 Kubelet 仅使用强加密密码（手动）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --tls-cipher-suites
              path: '{range .tlsCipherSuites[:]}{}{'',''}{end}'
              compare:
                op: valid_elements
                value: 
                  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑文件，将 `tlsCipherSuites` 设置为以下数值之一或其子集：TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256。如果使用可执行参数，请编辑每个工作节点上的 kubelet 服务文件 $kubeletsvc，并设置 --tls-cipher-suites 参数如下，或其子集：--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256。根据您的系统，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: false

      - id: 4.2.13
        text: "确保为 Pod 的 PID 设置了限制（手动设置）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --pod-max-pids
              path: '{.podPidsLimit}'
        remediation: |-
          确定这个参数的适当级别，并进行设置，可以通过 --pod-max-pids 命令行参数或 PodPidsLimit 配置文件设置。
        scored: false

  - id: 4.3
    text: "kube-proxy"
    checks:
      - id: 4.3.1
        text: "确保 kube-proxy 指标服务绑定到 localhost（自动化）。"
        audit: "/bin/ps -fC $proxybin"
        audit_config: "/bin/sh -c 'if test -e $proxykubeconfig; then cat $proxykubeconfig;
          fi'"
        tests:
          bin_op: or
          test_items:
            - flag: "--metrics-bind-address"
              path: '{.metricsBindAddress}'
              compare:
                op: has
                value: "127.0.0.1"
            - flag: "--metrics-bind-address"
              path: '{.metricsBindAddress}'
              set: false
        remediation: |-
          修改或移除将指标服务绑定到非本地主机地址的任何数值。默认值为 127.0.0.1:10249。
        scored: true
