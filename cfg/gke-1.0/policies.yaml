controls:
version: "gke-1.0"
id: 5
text: "Kubernetes 策略"
type: "policies"
groups:
  - id: 5.1
    text: "基于角色的访问控制（RBAC）和服务账户"
    checks:
      - id: 5.1.1
        text: "确保只在必要的情况下使用 cluster-admin 角色（未评分）。"
        type: "manual"
        remediation: |-
          识别所有绑定到 cluster-admin 角色的 clusterrolebindings。检查它们是否被使用，是否需要该角色，或者是否可以使用权限较低的角色。在可能的情况下，首先将用户绑定到权限较低的角色，然后删除绑定到 cluster-admin 角色的 clusterrolebinding：kubectl delete clusterrolebinding [name]
        scored: false

      - id: 5.1.2
        text: "最小化对密码的访问（未评分）。"
        type: "manual"
        remediation: |-
          在可能的情况下，从集群中的 secret 对象中移除 get、list 和 watch 访问权限。
        scored: false

      - id: 5.1.3
        text: "在角色（Roles）和集群角色（ClusterRoles）中尽量减少通配符的使用（未评分）。"
        type: "manual"
        remediation: |-
          在可能的情况下，将 clusterroles 和 roles 中对通配符的使用替换为具体的对象或操作。
        scored: false

      - id: 5.1.4
        text: "限制创建 Pod 的访问权限（未评分）。"
        type: "manual"
        remediation: |-
          在可能的情况下，移除集群中对 Pod 对象的创建访问权限。
        scored: false

      - id: 5.1.5
        text: "确保默认服务账户未被激活使用。（评分）"
        type: "manual"
        remediation: |-
          在 Kubernetes 工作负载需要特定访问 Kubernetes API 服务器时，请创建显式服务账户。修改每个默认服务账户的配置，包括该值 automountServiceAccountToken: false。
        scored: true

      - id: 5.1.6
        text: "确保只在必要的情况下挂载服务账户令牌（未评分）。"
        type: "manual"
        remediation: |-
          修改不需要挂载服务账户令牌的 Pod 和服务账户的定义，禁用该功能。
        scored: false

  - id: 5.2
    text: "Pod 安全策略"
    checks:
      - id: 5.2.1
        text: "最小化特权容器的准入（未评分）。"
        type: "manual"
        remediation: |-
          根据 Kubernetes 文档中的描述创建一个 Pod 安全策略（PSP），确保 .spec.privileged 字段被省略或设置为 false。
        scored: false

      - id: 5.2.2
        text: "最小化容器希望共享主机进程 ID 命名空间的准入（评分）。"
        type: "manual"
        remediation: |-
          根据 Kubernetes 文档中描述的方式创建一个 Pod 安全策略（PSP），确保 .spec.hostPID 字段被省略或设置为 false。
        scored: true

      - id: 5.2.3
        text: "最小化容器希望共享主机 IPC 命名空间的准入（评分）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP，确保 .spec.hostIPC 字段被省略或设置为 false。
        scored: true

      - id: 5.2.4
        text: "最大限度减少希望共享主机网络命名空间的容器的准入（评分）。"
        type: "manual"
        remediation: |-
          按照Kubernetes文档中的描述创建一个PSP，并确保.spec.hostNetwork字段被省略或设置为false。
        scored: true

      - id: 5.2.5
        text: "最小化允许具有 allowPrivilegeEscalation 的容器的准入（评分）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP（PodSecurityPolicy），确保 .spec.allowPrivilegeEscalation 字段被省略或设置为 false。
        scored: true

      - id: 5.2.6
        text: "最小化容许根容器的准入（得分）."
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP，确保 .spec.runAsUser.rule 设置为 MustRunAsNonRoot 或 MustRunAs，并且 UID 范围不包括 0。
        scored: true

      - id: 5.2.7
        text: "减少具有 NET_RAW 能力的容器的准入（得分）。"
        type: "manual"
        remediation: |-
          根据 Kubernetes 文档中的描述创建一个 PSP，确保 .spec.requiredDropCapabilities 被设置为包含 NET_RAW 或 ALL。
        scored: true

      - id: 5.2.8
        text: "最小化允许具有增加能力的容器进入（得分）"
        type: "manual"
        remediation: |-
          确保集群中的 PSPs 中不包含 allowedCapabilities，除非设置为一个空数组。
        scored: true

      - id: 5.2.9
        text: "最小化分配了特权的容器的准入（评分）"
        type: "manual"
        remediation: |-
          审查集群中运行的应用程序中的 capabilites 的使用情况。在一个命名空间中包含不需要任何 Linux capabities 运行的应用程序时，考虑添加一个 PSP，禁止容器入场的时候不丢弃所有 capabilites。
        scored: true

  - id: 5.3
    text: "网络策略和 CNI"
    checks:
      - id: 5.3.1
        text: "确保正在使用的 CNI 支持网络策略（未评分）。"
        type: "manual"
        remediation: |-
          要在 GKE 中使用带有网络策略的 CNI 插件，请在 GKE 中启用网络策略，CNI 插件将被更新。请参考建议 6.6.7。
        scored: false

      - id: 5.3.2
        text: "确保所有命名空间都定义了网络策略（得分）。"
        type: "manual"
        remediation: |-
          按照文档指南创建所需的 NetworkPolicy 对象。
        scored: true

  - id: 5.4
    text: "机密管理"
    checks:
      - id: 5.4.1
        text: "更倾向于将 secrets 作为文件而不是作为环境变量来使用（未评分）。"
        type: "manual"
        remediation: |-
          如果可能的话，重新编写应用程序代码，从挂载的秘密文件中读取秘密，而不是从环境变量中读取。
        scored: false

      - id: 5.4.2
        text: "考虑使用外部秘钥存储（不计分）。"
        type: "manual"
        remediation: |-
          请查阅您的云服务提供商或第三方秘密管理解决方案提供的秘密管理选项。
        scored: false

  - id: 5.5
    text: "可扩展的准入控制"
    checks:
      - id: 5.5.1
        text: "使用 ImagePolicyWebhook 准入控制器配置镜像来源验证（不计分）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档设置镜像真实性。另请查看 Recommendation 6.10.5，特别是针对 GKE。
        scored: false

  - id: 5.6
    text: "通用策略"
    checks:
      - id: 5.6.1
        text: "使用命名空间在资源之间创建管理边界（未评分）。"
        type: "manual"
        remediation: |-
          按照文档的指导，根据部署所需的对象创建命名空间。
        scored: false

      - id: 5.6.2
        text: "确保在您的 Pod 定义中将 seccomp 概要设置为 docker/default（未评分）。"
        type: "manual"
        remediation: |-
          Seccomp 目前是一个 alpha 功能。默认情况下，所有 alpha 功能都是禁用的。因此，您需要通过传递 "--feature-gates=AllAlpha=true" 参数来在 apiserver 中启用 alpha 功能。编辑主节点上的 /etc/kubernetes/apiserver 文件，并将 KUBE_API_ARGS 参数设置为 "--feature-gates=AllAlpha=true"。KUBE_API_ARGS="--feature-gates=AllAlpha=true"根据您的系统，重启 kube-apiserver 服务。例如：systemctl restart kube-apiserver.service使用注解来在您的 Pod 定义中启用 docker/default seccomp 配置文件。例如：apiVersion: v1kind: Podmetadata:  name: trustworthy-pod  annotations:    seccomp.security.alpha.kubernetes.io/pod: docker/defaultspec:  containers:    - name: trustworthy-container      image: sotrustworthy:latest
        scored: false

      - id: 5.6.3
        text: "将安全上下文应用于您的 Pod 和容器（不计分）。"
        type: "manual"
        remediation: |-
          遵循 Kubernetes 文档，并为您的 Pod 应用安全上下文。对于安全上下文的建议列表，您可以参考 CIS Docker 容器安全基准。
        scored: false

      - id: 5.6.4
        text: "不应使用默认的命名空间（得分）。"
        type: "manual"
        remediation: |-
          确保创建命名空间以允许对 Kubernetes 资源进行适当隔离，并确保所有新的资源都在特定的命名空间中创建。
        scored: true
