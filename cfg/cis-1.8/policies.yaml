controls:
version: "cis-1.8"
id: 5
text: "Kubernetes 策略"
type: "policies"
groups:
  - id: 5.1
    text: "RBAC（Role-Based Access Control）和服务账户"
    checks:
      - id: 5.1.1
        text: "确保只在必要的情况下使用 cluster-admin 角色（手动）。"
        type: "manual"
        remediation: |-
          识别所有绑定到 cluster-admin 角色的 clusterrolebinding。检查它们是否被使用以及是否需要这个角色，或者它们是否可以使用权限更少的角色。在可能的情况下，首先将用户绑定到一个权限更低的角色，然后删除绑定到 cluster-admin 角色的 clusterrolebinding：kubectl delete clusterrolebinding [name]
        scored: false

      - id: 5.1.2
        text: "最小化对机密信息的访问（手动）"
        type: "manual"
        remediation: |-
          在可能的情况下，移除集群中对 Secret 对象的 get、list 和 watch 访问权限。
        scored: false

      - id: 5.1.3
        text: "在角色（Roles）和集群角色（ClusterRoles）中尽量减少通配符的使用（手动）。"
        type: "manual"
        remediation: |-
          在可能的情况下，用特定的对象或操作替换 clusterroles 和 roles 中的通配符。
        scored: false

      - id: 5.1.4
        text: "限制创建 Pod 的访问权限（手动）。"
        type: "manual"
        remediation: |-
          尽可能在集群中移除对 Pod 对象的创建访问权限。
        scored: false

      - id: 5.1.5
        text: "确保默认服务账户未被激活使用。（手动）"
        type: "manual"
        remediation: |-
          在 Kubernetes 的工作负载需要特定访问 Kubernetes API 服务器时，请创建明确的服务账户。修改每个默认服务账户的配置以包含以下数值 automountServiceAccountToken: false。
        scored: false

      - id: 5.1.6
        text: "确保只在必要的情况下挂载服务账户令牌（手动）。"
        type: "manual"
        remediation: |-
          修改不需要挂载服务账号令牌的 Pod 和服务账号的定义，以禁用它。
        scored: false

      - id: 5.1.7
        text: "避免使用 system:masters 组（手动）。"
        type: "manual"
        remediation: |-
          从集群中所有用户中移除 system:masters 组。
        scored: false

      - id: 5.1.8
        text: "在 Kubernetes 集群中限制使用 Bind、Impersonate 和 Escalate 权限（手动方式）。"
        type: "manual"
        remediation: |-
          在可能的情况下，从主体中删除模拟、绑定和升级权限。
        scored: false

      - id: 5.1.9
        text: "限制创建持久卷的访问权限（手动方式）。"
        type: "manual"
        remediation: |-
          在可能的情况下，在集群中删除对 PersistentVolume 对象的创建访问权限。
        scored: false

      - id: 5.1.10
        text: "将对节点的代理子资源的访问最小化（手动方式）。"
        type: "manual"
        remediation: |-
          在可能的情况下，移除对节点对象的代理子资源的访问权限。
        scored: false

      - id: 5.1.11
        text: "将对 certificatesigningrequests 对象的 approval 子资源的访问权限最小化（手动操作）。"
        type: "manual"
        remediation: |-
          在可能的情况下，删除对 certificatesigningrequest 对象的 approval 子资源的访问。
        scored: false

      - id: 5.1.12
        text: "最小化访问 Webhook 配置对象（手动操作）。"
        type: "manual"
        remediation: |-
          在可能的情况下，删除对 validatingwebhookconfigurations 或 mutatingwebhookconfigurations 对象的访问权限。
        scored: false

      - id: 5.1.13
        text: "减少对服务账号令牌创建的访问权限（手动方式）。"
        type: "manual"
        remediation: |-
          在可能的情况下，删除对 serviceaccount 对象的 token 子资源的访问权限。
        scored: false

  - id: 5.2
    text: "Pod 安全标准"
    checks:
      - id: 5.2.1
        text: "确保集群至少有一个激活的策略控制机制 (Manual)。"
        type: "manual"
        remediation: |-
          确保在每个包含用户工作负载的命名空间中，要么部署 Pod 安全入场，要么部署外部策略控制系统。
        scored: false

      - id: 5.2.2
        text: "最小化特权容器的准入（手动）"
        type: "manual"
        remediation: |-
          在集群中具有用户工作负载的每个命名空间中添加策略，以限制特权容器的准入。
        scored: false

      - id: 5.2.3
        text: "最小化想要共享主机进程 ID 命名空间的容器的准入（自动化）。"
        type: "manual"
        remediation: |-
          在具有用户工作负载的集群中的每个命名空间中添加策略，以限制对 `hostPID` 容器的准入。
        scored: false

      - id: 5.2.4
        text: "减少容器希望共享主机 IPC 命名空间的准入（自动化）。"
        type: "manual"
        remediation: |-
          向集群中每个包含用户工作负载的命名空间添加策略，限制 `hostIPC` 容器的准入。
        scored: false

      - id: 5.2.5
        text: "最小化容器希望共享主机网络命名空间的准入（自动化）。"
        type: "manual"
        remediation: |-
          向集群中每个包含用户工作负载的命名空间添加策略，以限制 `hostNetwork` 容器的准入。
        scored: false

      - id: 5.2.6
        text: "减少允许特权升级的容器准入（自动化）。"
        type: "manual"
        remediation: |-
          在集群中每个包含用户工作负载的命名空间中添加策略，以限制具有 `.spec.allowPrivilegeEscalation` 设置为 `true` 的容器的准入。
        scored: false

      - id: 5.2.7
        text: "最小化 root 容器的准入（自动化）。"
        type: "manual"
        remediation: |-
          为集群中的每个命名空间创建一个策略，确保设置了 `MustRunAsNonRoot` 或者 `MustRunAs` 并且 UID 范围不包括 0。
        scored: false

      - id: 5.2.8
        text: "最小化具有 NET_RAW 权限的容器的准入（自动化）。"
        type: "manual"
        remediation: |-
          在集群中每个有用户工作负载的命名空间中添加策略，限制具有 `NET_RAW` 权限的容器的准入。
        scored: false

      - id: 5.2.9
        text: "减少具有额外权限的容器的审核（自动化）。"
        type: "manual"
        remediation: |-
          确保集群的策略中不包含 `allowedCapabilities`，除非将其设置为空数组。
        scored: false

      - id: 5.2.10
        text: "减少分配了权限的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          审查在您的集群上运行的应用程序中使用 capabilites 的情况。如果一个命名空间包含不需要任何 Linux capabilites 才能运行的应用程序，请考虑添加一个 PSP，禁止不放弃所有 capabilites 的容器进入。
        scored: false

      - id: 5.2.11
        text: "最小化 Windows HostProcess 容器的准入（手动）。"
        type: "manual"
        remediation: |-
          向集群中具有用户工作负载的每个命名空间添加策略，限制具有 `.securityContext.windowsOptions.hostProcess` 设置为 `true` 的容器的准入。
        scored: false

      - id: 5.2.12
        text: "尽量减少 HostPath 卷的准入（手动）。"
        type: "manual"
        remediation: |-
          向集群中具有用户工作负载的每个命名空间添加策略，以限制具有 `hostPath` 卷的容器的准入。
        scored: false

      - id: 5.2.13
        text: "尽量减少允许使用 HostPorts 的容器入场（手动操作）。"
        type: "manual"
        remediation: |-
          向集群中每个具有用户工作负载的命名空间添加策略，以限制使用 `hostPort` 段的容器的准入。
        scored: false

  - id: 5.3
    text: "网络策略和 CNI"
    checks:
      - id: 5.3.1
        text: "确保正在使用的 CNI 支持 NetworkPolicies（手动）。"
        type: "manual"
        remediation: |-
          如果使用的 CNI 插件不支持网络策略，则应考虑使用不同的插件，或找到另一种限制 Kubernetes 集群流量的替代机制。
        scored: false

      - id: 5.3.2
        text: "确保所有命名空间都定义了 NetworkPolicies（手动）。"
        type: "manual"
        remediation: |-
          根据文档说明创建所需的 NetworkPolicy 对象。
        scored: false

  - id: 5.4
    text: "密码管理"
    checks:
      - id: 5.4.1
        text: "更喜欢将 Secrets 作为文件使用，而不是作为环境变量使用（手动）。"
        type: "manual"
        remediation: |-
          如果可能的话，重写应用代码，从挂载的机密文件中读取 Secrets，而不是从环境变量中读取。
        scored: false

      - id: 5.4.2
        text: "考虑外部的秘钥存储（手动）。"
        type: "manual"
        remediation: |-
          请参考您的云服务提供商或第三方机密管理解决方案提供的机密管理选项。
        scored: false

  - id: 5.5
    text: "可扩展的入场控制"
    checks:
      - id: 5.5.1
        text: "使用 ImagePolicyWebhook 出入控制器（手动方式）配置镜像来源。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档的指导，设置镜像来源验证。
        scored: false

  - id: 5.7
    text: "通用策略"
    checks:
      - id: 5.7.1
        text: "使用命名空间 (手动) 来创建资源之间的管理边界。"
        type: "manual"
        remediation: |-
          按照文档的指导，根据部署所需的对象创建命名空间。
        scored: false

      - id: 5.7.2
        text: "确保在您的 Pod 定义中将 seccomp 选项设置为 docker/default（手动）。"
        type: "manual"
        remediation: |-
          使用`securityContext`在您的 pod 定义中启用 Docker 默认的 seccomp 配置文件。示例如下：```yamlsecurityContext:  seccompProfile:    type: RuntimeDefault```
        scored: false

      - id: 5.7.3
        text: "将 SecurityContext 应用到您的 Pods 和 Containers 中（手动）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档的指引，在你的 Pod 中应用 SecurityContexts。对于建议的 SecurityContexts 列表，你可以参考 CIS Docker 容器安全基准。
        scored: false

      - id: 5.7.4
        text: "不应使用默认命名空间（手动）。"
        type: "manual"
        remediation: |-
          确保创建命名空间以允许对 Kubernetes 资源进行适当的隔离，并确保所有新资源都在特定的命名空间中创建。
        scored: false
