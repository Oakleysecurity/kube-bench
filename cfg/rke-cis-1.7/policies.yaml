controls:
version: "rke-cis-1.7"
id: 5
text: "Kubernetes 策略"
type: "policies"
groups:
  - id: 5.1
    text: "RBAC（Role-Based Access Control）和服务账户。"
    checks:
      - id: 5.1.1
        text: "确保只在必要时使用 cluster-admin 角色（手动）。"
        type: "manual"
        remediation: |-
          识别所有绑定到 cluster-admin 角色的 clusterrolebindings。检查它们是否被使用以及是否需要这个角色，或者它们是否可以使用权限更少的角色。在可能的情况下，首先将用户绑定到一个权限较低的角色，然后删除绑定到 cluster-admin 角色的 clusterrolebinding：kubectl delete clusterrolebinding [name]
        scored: false

      - id: 5.1.2
        text: "最小化对机密信息的访问（手动操作）。"
        type: "manual"
        remediation: |-
          在可能的情况下，删除集群中对 Secret 对象的获取、列表和监视访问权限。
        scored: false

      - id: 5.1.3
        text: "在角色（Roles）和集群角色（ClusterRoles）中尽量减少通配符的使用（手动）。"
        type: "manual"
        remediation: |-
          在可能的情况下，用特定的对象或操作替换 clusterroles 和 roles 中对通配符的使用。
        scored: false

      - id: 5.1.4
        text: "限制创建 Pod 的访问权限（手动方式）。"
        type: "manual"
        remediation: |-
          在可能的情况下，删除集群中对 Pod 对象的创建访问权限。
        scored: false

      - id: 5.1.5
        text: "确保默认服务账户未被积极使用。（手动操作）"
        type: "manual"
        remediation: |-
          在 Kubernetes 工作负载需要特定访问 Kubernetes API 服务器时，创建显式服务账号。修改每个默认服务账号的配置，包括此值 automountServiceAccountToken: false。
        scored: false

      - id: 5.1.6
        text: "确保只在必要的情况下挂载服务账户令牌（手动操作）。"
        type: "manual"
        remediation: |-
          修改不需要挂载服务账户令牌的 pod 和服务账户的定义，禁用该功能。
        scored: false

      - id: 5.1.7
        text: "避免使用 system:masters 组（手动）。"
        type: "manual"
        remediation: |-
          从集群中的所有用户中删除 system:masters 组。
        scored: false

      - id: 5.1.8
        text: "在 Kubernetes 集群中限制对 Bind、Impersonate 和 Escalate 权限的使用（手动操作）。"
        type: "manual"
        remediation: |-
          在可能的情况下，从 subjects 中删除模拟、绑定和提升权限的权限。
        scored: false

      - id: 5.1.9
        text: "最小化创建持久卷的访问权限（手动）。"
        type: "manual"
        remediation: |-
          在可能的情况下，在集群中删除对 PersistentVolume 对象的创建访问权限。
        scored: false

      - id: 5.1.10
        text: "限制对节点的代理子资源的访问（手动）"
        type: "manual"
        remediation: |-
          在可能的情况下，删除对节点对象的代理子资源的访问权限。
        scored: false

      - id: 5.1.11
        text: "最小化对 certificatesigningrequests 对象的 approval 子资源的访问权限（手动方式）。"
        type: "manual"
        remediation: |-
          在可能的情况下，删除 certificatesigningrequest 对象的 approval 子资源的访问权限。
        scored: false

      - id: 5.1.12
        text: "将对 Webhook 配置对象的访问权限最小化（手动）。"
        type: "manual"
        remediation: |-
          在可能的情况下，移除对 validatingwebhookconfigurations 或 mutatingwebhookconfigurations 对象的访问权限。
        scored: false

      - id: 5.1.13
        text: "最小化对服务账号令牌创建的访问权限（手动）。"
        type: "manual"
        remediation: |-
          在可能的情况下，删除对 serviceaccount 对象的 token 子资源的访问权限。
        scored: false

  - id: 5.2
    text: "Pod 安全标准"
    checks:
      - id: 5.2.1
        text: "确保集群至少有一个激活的策略控制机制（手动）。"
        type: "manual"
        remediation: |-
          确保每个包含用户工作负载的命名空间中都有 Pod 安全准入或外部策略控制系统。
        scored: false

      - id: 5.2.2
        text: "限制特权容器的准入（手动方式）"
        type: "manual"
        remediation: |-
          向集群中每个包含用户工作负载的命名空间添加策略，以限制特权容器的准入。
        scored: false

      - id: 5.2.3
        text: "尽量减少容器希望共享主机进程ID命名空间的准入（自动化）。"
        type: "skip"
        remediation: |-
          在集群中为每个包含用户工作负载的命名空间添加策略，限制 `hostPID` 容器的准入。宽松 - 启用 Pod 安全策略可能会导致应用程序意外失败。
        scored: false

      - id: 5.2.4
        text: "最小化容器希望共享主机 IPC 命名空间的准入（自动化）。"
        type: "skip"
        remediation: |-
          在集群中每个包含用户工作负载的命名空间中添加策略，以限制 `hostIPC` 容器的准入。宽松 - 启用 Pod 安全策略可能会导致应用程序意外失败。
        scored: false

      - id: 5.2.5
        text: "最小化希望共享主机网络命名空间的容器的准入（自动化）。"
        type: "skip"
        remediation: |-
          在集群中的每个具有用户工作负载的命名空间中添加策略，以限制 `hostNetwork` 容器的准入。宽松 - 启用 Pod 安全策略可能会导致应用程序出现意外故障。
        scored: false

      - id: 5.2.6
        text: "最小化容器允许特权升级的准入（手动方式）。"
        type: "manual"
        remediation: |-
          在集群中每个具有用户工作负载的命名空间中添加策略，以限制具有 `.spec.allowPrivilegeEscalation` 设置为 `true` 的容器的准入。
        scored: false

      - id: 5.2.7
        text: "减少根容器的准入（手动）。"
        type: "manual"
        remediation: |-
          为集群中的每个命名空间创建一个策略，确保要么设置 `MustRunAsNonRoot`，要么设置 `MustRunAs` 并且 UID 范围不包括 0。
        scored: false

      - id: 5.2.8
        text: "减少具有 NET_RAW 能力的容器的准入（手动方式）。"
        type: "manual"
        remediation: |-
          在集群中每个包含用户工作负载的命名空间中添加策略，以限制具有 `NET_RAW` 能力的容器入场。
        scored: false

      - id: 5.2.9
        text: "减少具有额外特权能力的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          确保集群策略中不包含 `allowedCapabilities`，除非将其设置为空数组。
        scored: false

      - id: 5.2.10
        text: "减少分配能力的容器准入（手动）"
        type: "manual"
        remediation: |-
          审查在集群上运行的应用程序中的 capabilites 使用情况。对于一个命名空间中包含不需要任何 Linux capabities 的应用程序的情况，考虑添加一个 PSP，禁止容器进入，这些容器没有放弃所有 capabilites。
        scored: false

      - id: 5.2.11
        text: "最小化 Windows HostProcess 容器的准入（手动操作）。"
        type: "manual"
        remediation: |-
          向集群中每个具有用户工作负载的命名空间添加策略，以限制那些具有 `.securityContext.windowsOptions.hostProcess` 设置为 `true` 的容器的准入。
        scored: false

      - id: 5.2.12
        text: "最小化 HostPath 卷的准入（手动）"
        type: "manual"
        remediation: |-
          在集群中具有用户工作负载的每个命名空间中添加策略，限制具有 `hostPath` 卷的容器的准入。
        scored: false

      - id: 5.2.13
        text: "减少允许使用 HostPorts 的容器准入（手动）。"
        type: "manual"
        remediation: |-
          在集群中每个包含用户工作负载的命名空间中添加策略，限制使用 `hostPort` 部分的容器的准入。
        scored: false

  - id: 5.3
    text: "网络策略和 CNI"
    checks:
      - id: 5.3.1
        text: "确保所使用的 CNI 支持 NetworkPolicies（手动）。"
        type: "manual"
        remediation: |-
          如果正在使用的 CNI 插件不支持网络策略，应考虑使用不同的插件或寻找另一种机制来限制 Kubernetes 集群中的流量。
        scored: false

      - id: 5.3.2
        text: "确保所有的命名空间都定义了网络策略（手动）。"
        type: "skip"
        remediation: |-
          按照文档的指导创建 NetworkPolicy 对象，根据需要设置。Permissive - 启用网络策略可以防止某些应用程序相互通信。
        scored: false

  - id: 5.4
    text: "密钥管理"
    checks:
      - id: 5.4.1
        text: "建议优先使用 Secrets 作为文件而不是作为环境变量（手动方式）。"
        type: "manual"
        remediation: |-
          如果可能的话，重新编写应用程序代码，从挂载的秘钥文件中读取 Secrets，而不是从环境变量读取。
        scored: false

      - id: 5.4.2
        text: "考虑外部密码存储（手动方式）"
        type: "manual"
        remediation: |-
          请参考您的云服务提供商或第三方机密管理解决方案提供的机密管理选项。
        scored: false

  - id: 5.5
    text: "可扩展准入控制"
    checks:
      - id: 5.5.1
        text: "使用 ImagePolicyWebhook 准入控制器（手动方式）配置镜像来源。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档的指引设置镜像溯源。
        scored: false

  - id: 5.7
    text: "通用策略"
    checks:
      - id: 5.7.1
        text: "使用命名空间（手动）来在资源之间创建管理边界。"
        type: "manual"
        remediation: |-
          按照文档的指导，根据部署需要为对象创建命名空间。
        scored: false

      - id: 5.7.2
        text: "确保在您的 Pod 定义中将 seccomp 配置设置为 docker/default（手动）。"
        type: "manual"
        remediation: |-
          使用 `securityContext` 来在你的 Pod 定义中启用 Docker 默认的 seccomp 配置文件。一个示例如下：  securityContext:    seccompProfile:      type: RuntimeDefault
        scored: false

      - id: 5.7.3
        text: "为您的 Pod 和容器应用 SecurityContext（手动设置）。"
        type: "manual"
        remediation: |-
          请按照 Kubernetes 文档的指导为您的 Pods 应用 SecurityContexts。对于建议的 SecurityContexts 列表，您可以参考 CIS 容器安全基准。
        scored: false

      - id: 5.7.4
        text: "不应使用默认命名空间（手动）。"
        type: "skip"
        remediation: |-
          确保创建命名空间以允许适当地隔离 Kubernetes 资源，并且所有新资源都在特定的命名空间中创建。宽松模式 - Kubernetes 提供了一个默认命名空间。
        scored: false
