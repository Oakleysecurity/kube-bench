controls:
version: "rke-cis-1.7"
id: 1
text: "控制平面安全配置"
type: "master"
groups:
  - id: 1.1
    text: "控制平面节点配置文件"
    checks:
      - id: 1.1.1
        text: "确保 API 服务器 pod 规范文件的权限设置为 600 或更严格（自动化）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c permissions=%a
          $apiserverconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统中文件的位置）。例如，chmod 600 $apiserverconf不适用 - 由 RKE 部署的集群不需要或维护 kube-apiserver 的配置文件。所有配置都作为参数在容器运行时传递进去。
        scored: true

      - id: 1.1.2
        text: "确保 API 服务器 Pod 规范文件所有者设置为 root:root（自动）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c %U:%G $apiserverconf;
          fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如，chown root:root $apiserverconf不适用 - 由 RKE 部署的集群不需要或维护 kube-apiserver 的配置文件。所有配置都作为容器运行时的参数传递。
        scored: true

      - id: 1.1.3
        text: "确保控制器管理器的 Pod 规范文件权限设置为 600 或更严格（自动）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c permissions=%a
          $controllermanagerconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统中文件的位置）。例如，chmod 600 $controllermanagerconf不适用 - 由 RKE 提供的集群无需或维护 kube-apiserver 的配置文件。所有配置作为参数在容器运行时传入。
        scored: true

      - id: 1.1.4
        text: "确保控制器管理器 Pod 规范文件的所有权设置为 root:root（自动）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c %U:%G
          $controllermanagerconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统中文件的位置）。例如，chown root:root $controllermanagerconf不适用 - 由 RKE 部署的集群不需要或维护 kube-apiserver 的配置文件。所有配置都作为参数传递给容器运行时。
        scored: true

      - id: 1.1.5
        text: "确保调度器 Pod 规范文件的权限设置为 600 或更严格（自动化）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c permissions=%a
          $schedulerconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（基于您系统中文件的位置）。例如，chmod 600 $schedulerconf不适用 - 由 RKE 部署的集群不需要或维护 kube-apiserver 的配置文件。所有配置都作为参数在容器运行时传递。
        scored: true

      - id: 1.1.6
        text: "确保调度器 pod 规范文件的所有权设置为 root:root（自动）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c %U:%G $schedulerconf;
          fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据文件在您系统上的位置）。例如，chown root:root $schedulerconf不适用 - 由 RKE 提供的集群不需要或维护 kube-apiserver 的配置文件。所有配置都作为容器运行时的参数传入。
        scored: true

      - id: 1.1.7
        text: "确保 etcd Pod 规范文件的权限设置为 600 或更严格（自动化）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $etcdconf; then find $etcdconf -name '*etcd*'
          | xargs stat -c permissions=%a; fi'"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如，chmod 600 $etcdconf不适用 - 由 RKE 部署的集群不需要或维护 kube-apiserver 的配置文件。所有配置都作为容器运行时的参数传递。
        scored: true

      - id: 1.1.8
        text: "确保 etcd Pod 规范文件的所有权设置为 root:root（自动化）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $etcdconf; then find $etcdconf -name '*etcd*'
          | xargs stat -c %U:%G; fi'"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如，chown root:root $etcdconf不适用 - 由 RKE 部署的集群不需要也不保留 kube-apiserver 的配置文件。所有配置都作为参数在容器运行时传递。
        scored: true

      - id: 1.1.9
        text: "确保容器网络接口文件的权限设置为600或更严格（手动）。"
        audit: |
          ps -ef | grep $kubeletbin | grep -- --cni-conf-dir | sed 's%.*cni-conf-dir[= ]\([^ ]*\).*%\1%' | xargs -I{} find {} -mindepth 1 | xargs --no-run-if-empty stat -c permissions=%a
          find /var/lib/cni/networks -type f 2> /dev/null | xargs --no-run-if-empty stat -c permissions=%a
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行如下命令（根据您系统上文件的位置）。例如，chmod 600 <path/to/cni/files>
        scored: false

      - id: 1.1.10
        text: "确保容器网络接口文件的所有权设置为 root:root（手动）。"
        audit: |
          ps -ef | grep $kubeletbin | grep -- --cni-conf-dir | sed 's%.*cni-conf-dir[= ]\([^ ]*\).*%\1%' | xargs -I{} find {} -mindepth 1 | xargs --no-run-if-empty stat -c %U:%G
          find /var/lib/cni/networks -type f 2> /dev/null | xargs --no-run-if-empty stat -c %U:%G
        use_multiple_values: true
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统上文件的位置）。例如，chown root:root <path/to/cni/files>
        scored: false

      - id: 1.1.11
        text: "确保将 etcd 数据目录的权限设置为 700 或更严格（自动）。"
        audit: stat -c %a /node/var/lib/etcd
        tests:
          test_items:
            - flag: "700"
              compare:
                op: eq
                value: "700"
              set: true
        remediation: |-
          在 etcd 服务器节点上，通过命令 'ps -ef | grep etcd' 获取 etcd 数据目录，作为参数 --data-dir 传递。根据上面找到的 etcd 数据目录运行以下命令。例如，chmod 700 /var/lib/etcd
        scored: true

      - id: 1.1.12
        text: "确保 etcd 数据目录的所有权设置为 etcd:etcd（自动）。"
        type: "skip"
        audit: "stat -c %U:%G /node/var/lib/etcd"
        tests:
          test_items:
            - flag: "etcd:etcd"
              set: true
        remediation: |-
          在 etcd 服务器节点上，从命令 'ps -ef | grep etcd' 获取 etcd 数据目录，作为参数 --data-dir 传递。运行以下命令（基于上面找到的 etcd 数据目录）。例如，chown etcd:etcd /var/lib/etcdPermissive - etcd 数据目录的所有权需要系统服务账户。有关如何配置此所有权的更多详细信息，请参考 Rancher 的加固指南。
        scored: true

      - id: 1.1.13
        text: "确保将 admin.conf 文件权限设置为600或更严格（自动化）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c permissions=%a
          /etc/kubernetes/admin.conf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统中文件的位置）。例如，chmod 600 /etc/kubernetes/admin.conf不适用 - 由 RKE 部署的集群不会在节点上存储 Kubernetes 默认的 kubeconfig 凭据文件。
        scored: true

      - id: 1.1.14
        text: "确保 admin.conf 文件的所有者设置为 root:root（自动化）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c %U:%G
          /etc/kubernetes/admin.conf; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统中的文件位置）。例如，chown root:root /etc/kubernetes/admin.conf不适用 - 由 RKE 部署的集群不会在节点上存储 Kubernetes 默认的 kubeconfig 凭据文件。
        scored: true

      - id: 1.1.15
        text: "确保 scheduler.conf 文件的权限设置为 600 或更严格（自动化操作）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $schedulerkubeconfig; then stat -c permissions=%a
          $schedulerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统中文件的位置）。例如，chmod 600 $schedulerkubeconfig不适用 - 由 RKE 部署的集群不需要或维护调度程序的配置文件。所有配置在容器运行时作为参数传递。
        scored: true

      - id: 1.1.16
        text: "确保 scheduler.conf 文件的所有权设置为 root:root（自动化）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $schedulerkubeconfig; then stat -c %U:%G $schedulerkubeconfig;
          fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如：chown root:root $schedulerkubeconfig不适用 - 由 RKE 部署的集群不需要或维护调度程序的配置文件。所有配置都作为容器运行时的参数传递。
        scored: true

      - id: 1.1.17
        text: "确保 controller-manager.conf 文件的权限设置为 600 或更严格（自动化）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $controllermanagerkubeconfig; then stat -c
          permissions=%a $controllermanagerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（基于您系统上文件的位置）。例如，chmod 600 $controllermanagerkubeconfig不适用 - 由 RKE 部署的集群不需要或维护 controller-manager 的配置文件。所有配置都作为参数在容器运行时传递。
        scored: true

      - id: 1.1.18
        text: "确保 controller-manager.conf 文件的所有权设置为 root:root（自动化）。"
        type: "skip"
        audit: "/bin/sh -c 'if test -e $controllermanagerkubeconfig; then stat -c
          %U:%G $controllermanagerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统中文件的位置）。例如，chown root:root $controllermanagerkubeconfig不适用 - 由 RKE 部署的集群不需要或保留 controller-manager 的配置文件。所有配置都作为容器运行时的参数传递。
        scored: true

      - id: 1.1.19
        text: "确保 Kubernetes PKI 目录和文件所有权设置为 root:root（自动化）。"
        audit: "check_files_owner_in_dir.sh /node/etc/kubernetes/ssl"
        tests:
          test_items:
            - flag: "true"
              compare:
                op: eq
                value: "true"
              set: true
        remediation: |-
          在控制平面节点上运行以下命令（根据系统上文件的位置）。例如，chown -R root:root /etc/kubernetes/pki/
        scored: true

      - id: 1.1.20
        text: "确保 Kubernetes PKI 证书文件的权限设置为 600 或更严格（手动）。"
        audit: "find /node/etc/kubernetes/ssl/  -name '*.pem' ! -name '*key.pem' |
          xargs stat -c permissions=%a"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如，find /node/etc/kubernetes/ssl/ -name '*.pem' ! -name '*key.pem' -exec chmod -R 600 {} +
        scored: false

      - id: 1.1.21
        text: "确保 Kubernetes PKI 密钥文件的权限设置为 600（手动设置）。"
        audit: "find /node/etc/kubernetes/ssl/ -name '*key.pem' | xargs stat -c permissions=%a"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如，find /node/etc/kubernetes/ssl/ -name '*key.pem' -exec chmod -R 600 {} +
        scored: false

  - id: 1.2
    text: "API 服务器"
    checks:
      - id: 1.2.1
        text: "确保 --anonymous-auth 参数设置为 false（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--anonymous-auth"
              compare:
                op: eq
                value: false
              set: true
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并设置以下参数。--anonymous-auth=false
        scored: true

      - id: 1.2.2
        text: "确保未设置 --token-auth-file 参数（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--token-auth-file"
              set: false
        remediation: |-
          按照文档的说明配置替代的身份验证机制。然后，在控制平面节点上编辑 API Server Pod 的规范文件 $apiserverconf，并移除参数 --token-auth-file=<filename>。
        scored: true

      - id: 1.2.3
        text: "确保未设置 --DenyServiceExternalIPs（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: nothave
                value: "DenyServiceExternalIPs"
              set: true
            - flag: "--enable-admission-plugins"
              set: false
        remediation: |-
          编辑控制平面节点上的 API 服务器 Pod 规范文件 $apiserverconf，并将 `DenyServiceExternalIPs` 从启用的准入插件中移除。
        scored: true

      - id: 1.2.4
        text: "确保将 --kubelet-client-certificate 和 --kubelet-client-key 参数设置为适当的数值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--kubelet-client-certificate"
            - flag: "--kubelet-client-key"
        remediation: |-
          按照 Kubernetes 文档的指导，在 apiserver 和 kubelet 之间建立 TLS 连接。然后，在控制平面节点上编辑 API server 的 pod specification 文件 $apiserverconf，并设置如下 kubelet 客户端证书和密钥参数。--kubelet-client-certificate=<path/to/client-certificate-file>--kubelet-client-key=<path/to/client-key-file>
        scored: true

      - id: 1.2.5
        text: "确保 --kubelet-certificate-authority 参数被设置为适当的值（自动化）。"
        type: "skip"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--kubelet-certificate-authority"
              set: true
        remediation: |-
          按照 Kubernetes 文档的说明，在 apiserver 和 kubelets 之间建立 TLS 连接。然后，在控制平面节点上编辑 API 服务器 pod 的规范文件 $apiserverconf，并将 --kubelet-certificate-authority 参数设置为证书颁发机构的证书文件路径。--kubelet-certificate-authority=<ca-string>。在生成服务证书时，当与某些云提供商需要的主机名覆盖一起使用时，功能可能会中断。
        scored: true

      - id: 1.2.6
        text: "确保 --authorization-mode 参数未设置为 AlwaysAllow（自动）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: nothave
                value: "AlwaysAllow"
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并将 --authorization-mode 参数设置为除 AlwaysAllow 之外的其他值。一个示例可以如下所示。--authorization-mode=RBAC
        scored: true

      - id: 1.2.7
        text: "确保 --authorization-mode 参数包含 Node (Automated)。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "Node"
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并将 --authorization-mode 参数设置为一个包含 Node 的值。--authorization-mode=Node,RBAC
        scored: true

      - id: 1.2.8
        text: "确保 --authorization-mode 参数包含 RBAC（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "RBAC"
        remediation: |-
          编辑控制平面节点上的 API 服务器 Pod 规范文件 $apiserverconf，并将 --authorization-mode 参数设置为包含 RBAC 的值，例如 `--authorization-mode=Node,RBAC`。
        scored: true

      - id: 1.2.9
        text: "确保 admission 控制插件 EventRateLimit 已设置为 (手动)。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "EventRateLimit"
        remediation: |-
          按照 Kubernetes 文档的指引，在配置文件中设置所需的限制。然后，编辑 API 服务器 pod 规范文件 $apiserverconf，并设置以下参数。--enable-admission-plugins=...,EventRateLimit,...--admission-control-config-file=<path/to/configuration/file>
        scored: false

      - id: 1.2.10
        text: "确保准入控制插件 AlwaysAdmit 未设置（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: nothave
                value: AlwaysAdmit
            - flag: "--enable-admission-plugins"
              set: false
        remediation: |-
          编辑控制平面节点上的 API 服务器 Pod 规范文件 $apiserverconf，并删除 --enable-admission-plugins 参数，或将其设置为不包含 AlwaysAdmit 值的数值。
        scored: true

      - id: 1.2.11
        text: "确保 admission control 插件 AlwaysPullImages 被设置为（手动）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "AlwaysPullImages"
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并设置 --enable-admission-plugins 参数，包括 AlwaysPullImages。--enable-admission-plugins=...,AlwaysPullImages,...
        scored: false

      - id: 1.2.12
        text: "确保如果未使用 PodSecurityPolicy（手动配置），则设置准入控制插件 SecurityContextDeny。"
        type: "skip"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "SecurityContextDeny"
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "PodSecurityPolicy"
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并将 --enable-admission-plugins 参数设置为包括 SecurityContextDeny，除非已经存在 PodSecurityPolicy。--enable-admission-plugins=...,SecurityContextDeny,...宽松模式 - 启用 Pod 安全策略可能会导致应用程序意外失败。
        scored: false

      - id: 1.2.13
        text: "确保 admission control 插件 ServiceAccount 被设置为（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "ServiceAccount"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |-
          按照文档，根据您的环境创建 ServiceAccount 对象。然后，在控制平面节点上编辑 API 服务器 pod 规范文件 $apiserverconf，确保 --disable-admission-plugins 参数设置为一个不包含 ServiceAccount 的值。
        scored: true

      - id: 1.2.14
        text: "确保 admission 控制插件 NamespaceLifecycle 已设置为 (自动化)。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "NamespaceLifecycle"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并将 --disable-admission-plugins 参数设置为确保不包括 NamespaceLifecycle。
        scored: true

      - id: 1.2.15
        text: "确保 admission control 插件 NodeRestriction 已设置 (自动)。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "NodeRestriction"
        remediation: |-
          按照 Kubernetes 文档的指引，在 kubelets 上配置 NodeRestriction 插件。然后，在控制平面节点上编辑 API 服务器 pod 规范文件 $apiserverconf，将 --enable-admission-plugins 参数设置为包含 NodeRestriction 的值。--enable-admission-plugins=...,NodeRestriction,...
        scored: true

      - id: 1.2.16
        text: "确保 --secure-port 参数未设置为 0 - 请注意，这一建议已经过时，并且将在共识过程中被删除（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--secure-port"
              compare:
                op: gt
                value: 0
            - flag: "--secure-port"
              set: false
        remediation: |-
          编辑控制平面节点上的 API 服务器 Pod 规范文件 $apiserverconf，然后删除 --secure-port 参数，或将其设置为不同的（非零）所需端口。
        scored: true

      - id: 1.2.17
        text: "确保将 --profiling 参数设置为 false（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并设置以下参数。--profiling=false
        scored: true

      - id: 1.2.18
        text: "确保设置了 --audit-log-path 参数（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-path"
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并将 --audit-log-path 参数设置为合适的路径和文件，用于存储审计日志，例如，--audit-log-path=/var/log/apiserver/audit.log。
        scored: true

      - id: 1.2.19
        text: "确保 --audit-log-maxage 参数设置为 30，或根据实际情况进行适当调整（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxage"
              compare:
                op: gte
                value: 30
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 的规范文件 $apiserverconf，并将 --audit-log-maxage 参数设置为 30 或其他合适的天数，例如，--audit-log-maxage=30。
        scored: true

      - id: 1.2.20
        text: "确保将 --audit-log-maxbackup 参数设置为 10 或适当值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxbackup"
              compare:
                op: gte
                value: 10
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 规范文件 $apiserverconf，并将 --audit-log-maxbackup 参数设置为 10 或适当的数值。例如，--audit-log-maxbackup=10。
        scored: true

      - id: 1.2.21
        text: "确保将 --audit-log-maxsize 参数设置为 100 或适当的数值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxsize"
              compare:
                op: gte
                value: 100
        remediation: |-
          在控制平面节点上编辑 API server pod 规范文件 $apiserverconf，并将 --audit-log-maxsize 参数设置为适当的大小（以 MB 为单位）。例如，将其设置为 100 MB，--audit-log-maxsize=100。
        scored: true

      - id: 1.2.22
        text: "确保将 --request-timeout 参数设置为适当的数值（手动）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        type: manual
        remediation: |-
          编辑 API 服务器 Pod 规范文件 $apiserverconf，根据需要设置以下参数。例如，--request-timeout=300s。
        scored: false

      - id: 1.2.23
        text: "确保 --service-account-lookup 参数设置为 true（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--service-account-lookup"
              set: false
            - flag: "--service-account-lookup"
              compare:
                op: eq
                value: true
        remediation: |-
          在控制平面节点上编辑 API 服务器 Pod 的规范文件 $apiserverconf，并设置如下参数。--service-account-lookup=true或者，您可以从该文件中删除 --service-account-lookup 参数，这样默认设置就会生效。
        scored: true

      - id: 1.2.24
        text: "确保将 --service-account-key-file 参数设置为适当的数值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--service-account-key-file"
        remediation: |-
          编辑控制平面节点上的 API 服务器 Pod 规范文件 $apiserverconf，并将 --service-account-key-file 参数设置为服务账户的公钥文件。例如，--service-account-key-file=<filename>。
        scored: true

      - id: 1.2.25
        text: "确保将 --etcd-certfile 和 --etcd-keyfile 参数设置为适当的值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--etcd-certfile"
            - flag: "--etcd-keyfile"
        remediation: |-
          按照 Kubernetes 文档的指引，在 apiserver 和 etcd 之间建立 TLS 连接。然后，在控制平面节点上编辑 API 服务器 pod 的规范文件 $apiserverconf，并设置 etcd 证书和密钥文件参数。--etcd-certfile=<path/to/client-certificate-file>--etcd-keyfile=<path/to/client-key-file>
        scored: true

      - id: 1.2.26
        text: "确保将 --tls-cert-file 和 --tls-private-key-file 参数设置为适当的数值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--tls-cert-file"
            - flag: "--tls-private-key-file"
        remediation: |-
          遵循 Kubernetes 文档，在 apiserver 上设置 TLS 连接。然后，在控制平面节点上编辑 API 服务器容器规范文件 $apiserverconf，并设置 TLS 证书和私钥文件参数。--tls-cert-file=<path/to/tls-certificate-file>--tls-private-key-file=<path/to/tls-key-file>
        scored: true

      - id: 1.2.27
        text: "确保将 --client-ca-file 参数设置为适当的值（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--client-ca-file"
        remediation: |-
          按照 Kubernetes 文档的指导，在 apiserver 上设置 TLS 连接。然后，在控制平面节点上编辑 API Server Pod 规范文件 $apiserverconf，并设置客户端证书颁发机构文件。--client-ca-file=<path/to/client-ca-file>。
        scored: true

      - id: 1.2.28
        text: "确保 --etcd-cafile 参数设置正确（自动化）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--etcd-cafile"
        remediation: |-
          按照 Kubernetes 文档的指导，在 apiserver 和 etcd 之间建立 TLS 连接。然后，在控制平面节点上编辑 API 服务器的 Pod 规范文件 $apiserverconf，并设置 etcd 证书颁发机构文件参数。--etcd-cafile=<path/to/ca-file>
        scored: true

      - id: 1.2.29
        text: "确保 --encryption-provider-config 参数设置正确（手动）。"
        type: "skip"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--encryption-provider-config"
        remediation: |-
          按照 Kubernetes 文档的指导配置一个 EncryptionConfig 文件。然后，在控制平面节点上编辑 API 服务器 pod 的规范文件 $apiserverconf，并将 --encryption-provider-config 参数设置为该文件的路径。例如，--encryption-provider-config=</path/to/EncryptionConfig/File>允许修改 - 启用加密会改变数据的恢复方式，因为数据被加密了。
        scored: false

      - id: 1.2.30
        text: "确保加密提供程序已正确配置（手动）。"
        type: "skip"
        audit: |
          ENCRYPTION_PROVIDER_CONFIG=$(ps -ef | grep $apiserverbin | grep -- --encryption-provider-config | sed 's%.*encryption-provider-config[= ]\([^ ]*\).*%\1%')
          if test -e $ENCRYPTION_PROVIDER_CONFIG; then grep -A1 'providers:' $ENCRYPTION_PROVIDER_CONFIG | tail -n1 | grep -o "[A-Za-z]*" | sed 's/^/provider=/'; fi
        tests:
          test_items:
            - flag: "provider"
              compare:
                op: valid_elements
                value: "aescbc,kms,secretbox"
        remediation: |-
          按照 Kubernetes 文档的指引，配置一个 EncryptionConfig 文件。在该文件中，选择 aescbc、kms 或 secretbox 作为加密提供者。启用加密会改变数据可被恢复的方式，因为数据是加密的。
        scored: false

      - id: 1.2.31
        text: "确保 API Server 仅使用强加密密码（手动方式）。"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--tls-cipher-suites"
              compare:
                op: valid_elements
                value: "TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384"
        remediation: |-
          编辑控制平面节点上的 API 服务器 pod 规范文件 /etc/kubernetes/manifests/kube-apiserver.yaml，并设置以下参数。--tls-cipher-suites=TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384
        scored: false

  - id: 1.3
    text: "控制器管理器"
    checks:
      - id: 1.3.1
        text: "确保 --terminated-pod-gc-threshold 参数设置为适当的值（自动化）。"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--terminated-pod-gc-threshold"
        remediation: |-
          在控制平面节点上编辑 Controller Manager 的 Pod 规范文件 $controllermanagerconf，并将 --terminated-pod-gc-threshold 设置为适当的阈值，例如 --terminated-pod-gc-threshold=10。
        scored: true

      - id: 1.3.2
        text: "确保 --profiling 参数被设置为 false（自动化）。"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |-
          编辑控制平面节点上的 Controller Manager Pod 规范文件 $controllermanagerconf，并设置以下参数。--profiling=false
        scored: true

      - id: 1.3.3
        text: "确保将 --use-service-account-credentials 参数设置为 true（自动化）。"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--use-service-account-credentials"
              compare:
                op: noteq
                value: false
        remediation: |-
          在控制平面节点上编辑 Controller Manager 的 Pod 规范文件 $controllermanagerconf，设置以下参数。--use-service-account-credentials=true
        scored: true

      - id: 1.3.4
        text: "确保将 --service-account-private-key-file 参数设置为适当的值（自动化）。"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--service-account-private-key-file"
        remediation: |-
          编辑控制平面节点上的 Controller Manager pod 规范文件 $controllermanagerconf，并将 --service-account-private-key-file 参数设置为服务账户的私钥文件。--service-account-private-key-file=<filename>
        scored: true

      - id: 1.3.5
        text: "确保 --root-ca-file 参数设置正确（自动化）。"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--root-ca-file"
        remediation: |-
          在控制平面节点上编辑 Controller Manager 的 Pod 规范文件 $controllermanagerconf，并将 --root-ca-file 参数设置为证书捆绑文件。--root-ca-file=<path/to/file>
        scored: true

      - id: 1.3.6
        text: "确保 RotateKubeletServerCertificate 参数设置为 true（自动）。"
        type: "skip"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--feature-gates"
              compare:
                op: nothave
                value: "RotateKubeletServerCertificate=false"
              set: true
            - flag: "--feature-gates"
              set: false
        remediation: |-
          在控制平面节点上编辑 Controller Manager 的 Pod 规范文件 $controllermanagerconf，并设置 --feature-gates 参数以包含 RotateKubeletServerCertificate=true。--feature-gates=RotateKubeletServerCertificate=true由 RKE 部署的集群通过 RKE 直接处理证书轮转。
        scored: true

      - id: 1.3.7
        text: "确保将 --bind-address 参数设置为 127.0.0.1（自动化）。"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
            - flag: "--bind-address"
              set: false
        remediation: |-
          编辑控制平面节点上的 Controller Manager Pod 规范文件 $controllermanagerconf，并确保 --bind-address 参数的数值正确。
        scored: true

  - id: 1.4
    text: "调度器"
    checks:
      - id: 1.4.1
        text: "确保将 --profiling 参数设置为 false（自动化）。"
        audit: "/bin/ps -ef | grep $schedulerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |-
          编辑控制平面节点上的调度器 Pod 规范文件 $schedulerconf 文件，并设置以下参数。--profiling=false
        scored: true

      - id: 1.4.2
        text: "确保将 --bind-address 参数设置为 127.0.0.1（自动化）。"
        audit: "/bin/ps -ef | grep $schedulerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
            - flag: "--bind-address"
              set: false
        remediation: |-
          编辑控制平面节点上的调度器Pod规范文件 $schedulerconf，并确保 --bind-address 参数的数值正确。
        scored: true
