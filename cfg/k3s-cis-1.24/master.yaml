controls:
version: "k3s-cis-1.24"
id: 1
text: "控制平面安全配置"
type: "master"
groups:
  - id: 1.1
    text: "控制平面节点配置文件"
    checks:
      - id: 1.1.1
        text: "确保 API 服务器 Pod 规范文件的权限设置为 644 或更严格（自动）。"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c permissions=%a
          $apiserverconf; fi'"
        type: "skip"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |-
          不适用。默认情况下，K3s 将 API 服务器嵌入到 k3s 进程中。不存在 API 服务器的 Pod 规范文件。
        scored: true

      - id: 1.1.2
        text: "确保 API 服务器 Pod 规范文件所有权设置为 root:root（自动化）。"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c %U:%G $apiserverconf;
          fi'"
        type: "skip"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          不适用。默认情况下，K3s 在 k3s 进程内嵌入了 api 服务器。不存在 API 服务器 Pod 规范文件。
        scored: true

      - id: 1.1.3
        text: "确保控制器管理器 Pod 规范文件的权限设置为 600 或更严格（自动化）。"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c permissions=%a
          $controllermanagerconf; fi'"
        type: "skip"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          N/A。默认情况下，K3s 在 k3s 进程内嵌入了控制器管理器。不存在控制器管理器 Pod 规范文件。
        scored: true

      - id: 1.1.4
        text: "确保控制器管理器 pod 规范文件的所有权设置为 root:root（自动化）。"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c %U:%G
          $controllermanagerconf; fi'"
        type: "skip"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          不适用。默认情况下，K3s 在 k3s 进程中内嵌了控制器管理器。不存在控制器管理器 Pod 规范文件。
        scored: true

      - id: 1.1.5
        text: "确保调度器 Pod 的规范文件权限设置为 600 或更严格（自动化）。"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c permissions=%a
          $schedulerconf; fi'"
        type: "skip"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          不适用。默认情况下，K3s 将调度器嵌入到 k3s 进程中。没有调度器 Pod 的规范文件。
        scored: true

      - id: 1.1.6
        text: "确保调度器 Pod 的规范文件所有权设置为 root:root（自动化）。"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c %U:%G $schedulerconf;
          fi'"
        type: "skip"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          N/A。默认情况下，K3s 将调度器嵌入到 k3s 进程中。没有调度器 Pod 规范文件。
        scored: true

      - id: 1.1.7
        text: "确保将 etcd Pod 规范文件的权限设置为 600 或更严格（自动化）。"
        audit: "/bin/sh -c 'if test -e $etcdconf; then stat -c permissions=%a $etcdconf;
          fi'"
        type: "skip"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          不适用。默认情况下，K3s 在 k3s 进程中嵌入了 etcd。不存在 etcd pod 的规范文件。
        scored: true

      - id: 1.1.8
        text: "确保 etcd Pod 的规范文件所有权设置为 root:root（自动化）。"
        audit: "/bin/sh -c 'if test -e $etcdconf; then stat -c %U:%G $etcdconf; fi'"
        type: "skip"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          不适用。默认情况下，K3s 在 k3s 进程中嵌入了 etcd。没有 etcd pod 规范文件。
        scored: true

      - id: 1.1.9
        text: "确保容器网络接口文件的权限设置为 600 或更为严格（自动操作）。"
        audit: find /var/lib/cni/networks -type f ! -name lock 2> /dev/null | xargs
          --no-run-if-empty stat -c permissions=%a
        type: "skip"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          不适用。默认的 K3s CNI，flannel，在 /var/lib/cni/networks 目录下不会创建任何文件。
        scored: false

      - id: 1.1.10
        text: "确保容器网络接口文件的所有权设置为 root:root（自动化）。"
        audit: find /var/lib/cni/networks -type f 2> /dev/null | xargs --no-run-if-empty
          stat -c %U:%G\
        type: "skip"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          不适用。默认的 K3s CNI（容器网络接口），flannel，在 /var/lib/cni/networks 中不创建任何文件。
        scored: true

      - id: 1.1.11
        text: "确保 etcd 数据目录的权限设置为 700 或更严格（自动化）。"
        audit: |
          if [ "$(journalctl -m -u k3s | grep -m1 'Managed etcd cluster' | wc -l)" -gt 0 ]; then
            stat -c permissions=%a /var/lib/rancher/k3s/server/db/etcd
          else
            echo "permissions=700"
          fi
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "700"
        remediation: |-
          在 etcd 服务器节点上，从命令 'ps -ef | grep etcd' 获取作为参数 --data-dir 传递的 etcd 数据目录。根据上面找到的 etcd 数据目录，运行以下命令。例如，chmod 700 /var/lib/etcd
        scored: true

      - id: 1.1.12
        text: "确保 etcd 数据目录的所有权设置为 etcd:etcd（自动化）。"
        audit: ps -ef | grep $etcdbin | grep -- --data-dir | sed 's%.*data-dir[= ]\([^
          ]*\).*%\1%' | xargs stat -c %U:%G
        type: "skip"
        tests:
          test_items:
            - flag: "etcd:etcd"
        remediation: |-
          无需应用。对于 K3s，etcd 嵌入在 k3s 进程中。没有单独的 etcd 进程。因此，etcd 数据目录的所有权由 k3s 进程管理，应该是 root:root。
        scored: true

      - id: 1.1.13
        text: "确保 admin.conf 文件权限设置为600或更严格（自动化）。"
        audit: "/bin/sh -c 'if test -e /var/lib/rancher/k3s/server/cred/admin.kubeconfig;
          then stat -c permissions=%a /var/lib/rancher/k3s/server/cred/admin.kubeconfig;
          fi'"
        type: "skip"
        tests:
          test_items:
            - flag: "600"
              compare:
                op: eq
                value: "600"
              set: true
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如，chmod 600 /var/lib/rancher/k3s/server/cred/admin.kubeconfig
        scored: true

      - id: 1.1.14
        text: "确保 admin.conf 文件的所有权设置为 root:root（自动化）。"
        audit: "/bin/sh -c 'if test -e /var/lib/rancher/k3s/server/cred/admin.kubeconfig;
          then stat -c %U:%G /var/lib/rancher/k3s/server/cred/admin.kubeconfig; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如，chown root:root /var/lib/rancher/k3s/server/cred/admin.kubeconfig
        scored: true

      - id: 1.1.15
        text: "确保 scheduler.conf 文件权限设置为 600 或更为严格（自动化）。"
        audit: "/bin/sh -c 'if test -e $schedulerkubeconfig; then stat -c permissions=%a
          $schedulerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据您系统上文件的位置）。例如，chmod 600 $schedulerkubeconfig
        scored: true

      - id: 1.1.16
        text: "确保 scheduler.conf 文件的所有权设置为 root:root（自动化）。"
        audit: "/bin/sh -c 'if test -e $schedulerkubeconfig; then stat -c %U:%G $schedulerkubeconfig;
          fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据文件在您系统上的位置）。例如，chown root:root $schedulerkubeconfig
        scored: true

      - id: 1.1.17
        text: "确保 controller-manager.conf 文件权限设置为 600 或更严格（自动化）."
        audit: "/bin/sh -c 'if test -e $controllermanagerkubeconfig; then stat -c
          permissions=%a $controllermanagerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统上文件的位置）。例如，chmod 600 $controllermanagerkubeconfig
        scored: true

      - id: 1.1.18
        text: "确保 controller-manager.conf 文件的所有权设置为 root:root（自动化）。"
        audit: "stat -c %U:%G /var/lib/rancher/k3s/server/tls"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |-
          在控制平面节点上运行以下命令（根据文件在您系统上的位置）。例如，chown root:root $controllermanagerkubeconfig
        scored: true

      - id: 1.1.19
        text: "确保 Kubernetes PKI 目录和文件所有权设置为 root:root（自动化）"
        audit: "find /var/lib/rancher/k3s/server/tls | xargs stat -c %U:%G"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在控制平面节点上运行以下命令（根据系统上文件的位置）。例如，chown -R root:root /etc/kubernetes/pki/
        scored: true

      - id: 1.1.20
        text: "确保 Kubernetes PKI 证书文件的权限设置为 600 或更严格（手动）。"
        audit: "/bin/sh -c 'stat -c permissions=%a /var/lib/rancher/k3s/server/tls/*.crt'"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在主节点上运行以下命令（根据文件在您系统上的位置）。例如：chmod -R 600 /var/lib/rancher/k3s/server/tls/*.crt
        scored: false

      - id: 1.1.21
        text: "确保 Kubernetes PKI 密钥文件的权限设置为 600（自动）。"
        audit: "/bin/sh -c 'stat -c permissions=%a /var/lib/rancher/k3s/server/tls/*.key'"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在主节点上运行以下命令（根据您系统上文件的位置）。例如，chmod -R 600 /var/lib/rancher/k3s/server/tls/*.key
        scored: true

  - id: 1.2
    text: "API 服务器"
    checks:
      - id: 1.2.1
        text: "确保 --anonymous-auth 参数设置为 false（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'anonymous-auth'"
        tests:
          test_items:
            - flag: "--anonymous-auth"
              compare:
                op: eq
                value: false
        remediation: |-
          默认情况下，K3s 将 --anonymous-auth 参数设置为 false。如果设置为 true，编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下内容的部分。kube-apiserver-arg:  - "anonymous-auth=true"
        scored: true

      - id: 1.2.2
        text: "确保未设置 --token-auth-file 参数（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1"
        tests:
          test_items:
            - flag: "--token-auth-file"
              set: false
        remediation: |-
          按照文档的指导配置替代的身份验证机制。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下内容的内容。kube-apiserver-arg:  - "token-auth-file=<path>"
        scored: true

      - id: 1.2.3
        text: "确保未设置 --DenyServiceExternalIPs 参数（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: nothave
                value: "DenyServiceExternalIPs"
            - flag: "--enable-admission-plugins"
              set: false
        remediation: |-
          默认情况下，K3s 不设置 DenyServiceExternalIPs。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，删除类似以下行的任何内容。kube-apiserver-arg:  - "enable-admission-plugins=DenyServiceExternalIPs"
        scored: true

      - id: 1.2.4
        text: "确保 --kubelet-https 参数设置为 true（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1"
        type: "skip"
        tests:
          bin_op: or
          test_items:
            - flag: "--kubelet-https"
              compare:
                op: eq
                value: true
            - flag: "--kubelet-https"
              set: false
        remediation: |-
          编辑控制平面节点上的 API 服务器 Pod 规范文件 $apiserverconf，并删除 --kubelet-https 参数。
        scored: true

      - id: 1.2.5
        text: "确保将 --kubelet-client-certificate 和 --kubelet-client-key 参数设置为适当的值（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'kubelet-certificate-authority'"
        tests:
          bin_op: and
          test_items:
            - flag: "--kubelet-client-certificate"
            - flag: "--kubelet-client-key"
        remediation: |-
          默认情况下，K3s 自动提供 kubelet 客户端证书和密钥。它们会在 /var/lib/rancher/k3s/server/tls/client-kube-apiserver.crt 和 /var/lib/rancher/k3s/server/tls/client-kube-apiserver.key 生成并存放。如果出于某种原因需要提供自己的证书和密钥，可以在 K3s 配置文件 /etc/rancher/k3s/config.yaml 中设置以下参数：kube-apiserver-arg:- "kubelet-client-certificate=<path/to/client-cert-file>"- "kubelet-client-key=<path/to/client-key-file>"
        scored: true

      - id: 1.2.6
        text: "确保 --kubelet-certificate-authority 参数已设置为适当的值（自动）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'kubelet-certificate-authority'"
        tests:
          test_items:
            - flag: "--kubelet-certificate-authority"
        remediation: |-
          按照 Kubernetes 文档的说明，在 apiserver 和 kubelet 之间设置 TLS 连接。然后，在控制平面节点上编辑 API server 的 Pod 规范文件 $apiserverconf，将 --kubelet-certificate-authority 参数设置为证书颁发机构的证书文件路径。--kubelet-certificate-authority=<ca-string>
        scored: true

      - id: 1.2.7
        text: "确保 --authorization-mode 参数未设置为 AlwaysAllow（自动）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'authorization-mode'"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: nothave
                value: "AlwaysAllow"
        remediation: |-
          默认情况下，K3s 不会将 --authorization-mode 设置为 AlwaysAllow。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，删除类似以下内容的行。kube-apiserver-arg:  - "authorization-mode=AlwaysAllow"
        scored: true

      - id: 1.2.8
        text: "确保 --authorization-mode 参数包含 Node (Automated)。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'authorization-mode'"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "Node"
        remediation: |-
          默认情况下，K3s 将 --authorization-mode 设置为 Node 和 RBAC。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，确保您没有覆盖 authorization-mode。
        scored: true

      - id: 1.2.9
        text: "确保 --authorization-mode 参数包含 RBAC（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'authorization-mode'"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "RBAC"
        remediation: |-
          默认情况下，K3s 将 --authorization-mode 设置为 Node 和 RBAC。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，确保您没有覆盖 authorization-mode。
        scored: true

      - id: 1.2.10
        text: "确保 admission 控制插件 EventRateLimit 被设置为 (手动)。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'enable-admission-plugins'"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "EventRateLimit"
        remediation: |-
          按照 Kubernetes 文档的指导，在配置文件中设置所需的限制。然后，编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并设置以下参数。kube-apiserver-arg:  - "enable-admission-plugins=...,EventRateLimit,..."  - "admission-control-config-file=<path/to/configuration/file>"
        scored: false

      - id: 1.2.11
        text: "确保准入控制插件 AlwaysAdmit 未设置（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'enable-admission-plugins'"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: nothave
                value: AlwaysAdmit
            - flag: "--enable-admission-plugins"
              set: false
        remediation: |-
          默认情况下，K3s 不会将 --enable-admission-plugins 设置为 AlwaysAdmit。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，删除任何类似以下内容的行。kube-apiserver-arg:  - "enable-admission-plugins=AlwaysAdmit"
        scored: true

      - id: 1.2.12
        text: "确保准入控制插件 AlwaysPullImages 被设置为（手动）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'enable-admission-plugins'"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "AlwaysPullImages"
        remediation: |-
          宽松模式，根据 CIS 指南，“此设置可能会影响离线或隔离的集群，这些集群已预加载镜像且无法访问注册表以拉取正在使用的镜像。此设置不适用于使用此配置的集群。”编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并设置以下参数。kube-apiserver-arg:  - "enable-admission-plugins=...,AlwaysPullImages,..."
        scored: false

      - id: 1.2.13
        text: "确保如果未使用 PodSecurityPolicy，则设置 admission control 插件 SecurityContextDeny（手动方式）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'enable-admission-plugins'"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "SecurityContextDeny"
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "PodSecurityPolicy"
        remediation: |-
          在控制平面节点上编辑 API 服务器的 Pod 规范文件 $apiserverconf，并将 --enable-admission-plugins 参数设置为包含 SecurityContextDeny，除非已经启用了 PodSecurityPolicy。--enable-admission-plugins=...,SecurityContextDeny,...
        scored: false

      - id: 1.2.14
        text: "确保 admission 控制插件 ServiceAccount 已设置为 (Automated)。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'ServiceAccount'"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "ServiceAccount"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |-
          默认情况下，K3s 不会将 --disable-admission-plugins 设置为任何值。按照文档创建适合您环境的 ServiceAccount 对象。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下内容的行。kube-apiserver-arg:  - "disable-admission-plugins=ServiceAccount"
        scored: true

      - id: 1.2.15
        text: "确保 admission control 插件 NamespaceLifecycle 被设置为（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "NamespaceLifecycle"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |-
          默认情况下，K3s 不会将 --disable-admission-plugins 设置为任何值。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下的行：kube-apiserver-arg:  - "disable-admission-plugins=...,NamespaceLifecycle,..."
        scored: true

      - id: 1.2.16
        text: "确保 admission 控制插件 NodeRestriction 被设置为（自动）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'enable-admission-plugins'"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "NodeRestriction"
        remediation: |-
          默认情况下，K3s 将 --enable-admission-plugins 设置为 NodeRestriction。如果使用 K3s 配置文件 /etc/rancher/k3s/config.yaml，请检查是否覆盖了准入插件。如果是的话，在列表中包括 NodeRestriction。kube-apiserver-arg:  - "enable-admission-plugins=...,NodeRestriction,..."
        scored: true

      - id: 1.2.17
        text: "确保 --secure-port 参数未设置为 0（自动）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'secure-port'"
        tests:
          bin_op: or
          test_items:
            - flag: "--secure-port"
              compare:
                op: gt
                value: 0
            - flag: "--secure-port"
              set: false
        remediation: |-
          默认情况下，K3s 将安全端口设置为 6444。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下内容的任何行。kube-apiserver-arg:- "secure-port=<PORT>"
        scored: true

      - id: 1.2.18
        text: "确保 --profiling 参数被设置为 false（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'profiling'"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |-
          默认情况下，K3s 将 --profiling 参数设置为 false。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下内容的行。kube-apiserver-arg:- "profiling=true"
        scored: true

      - id: 1.2.19
        text: "确保设置了 --audit-log-path 参数（手动）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'audit-log-path'"
        tests:
          test_items:
            - flag: "--audit-log-path"
        remediation: |-
          编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并将 audit-log-path 参数设置为适当的路径和文件，以便将审计日志写入其中，例如：kube-apiserver-arg:  - "audit-log-path=/var/lib/rancher/k3s/server/logs/audit.log"
        scored: false

      - id: 1.2.20
        text: "确保将 --audit-log-maxage 参数设置为 30 或适当的值（手动方式）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'audit-log-maxage'"
        tests:
          test_items:
            - flag: "--audit-log-maxage"
              compare:
                op: gte
                value: 30
        remediation: |-
          在控制平面节点上编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并将 audit-log-maxage 参数设置为 30 或适当的天数，例如：kube-apiserver-arg:  - "audit-log-maxage=30"
        scored: false

      - id: 1.2.21
        text: "确保将 --audit-log-maxbackup 参数设置为 10 或适当的值（手动）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'audit-log-maxbackup'"
        tests:
          test_items:
            - flag: "--audit-log-maxbackup"
              compare:
                op: gte
                value: 10
        remediation: |-
          在控制平面节点上编辑 K3s 配置文件 `/etc/rancher/k3s/config.yaml`，将 audit-log-maxbackup 参数设置为 10 或适当的值。例如，设置为：```yamlkube-apiserver-arg:  - "audit-log-maxbackup=10"```
        scored: false

      - id: 1.2.22
        text: "确保将 --audit-log-maxsize 参数设置为 100 或适当的数值（手动）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'audit-log-maxsize'"
        tests:
          test_items:
            - flag: "--audit-log-maxsize"
              compare:
                op: gte
                value: 100
        remediation: |-
          编辑控制平面节点上的 K3s 配置文件 /etc/rancher/k3s/config.yaml，并将 audit-log-maxsize 参数设置为适当的大小（单位为 MB）。例如，kube-apiserver-arg:  - "audit-log-maxsize=100"
        scored: false

      - id: 1.2.23
        text: "确保将 --request-timeout 参数设置为适当的数值（手动设置）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'request-timeout'"
        tests:
          bin_op: or
          test_items:
            - flag: "--request-timeout"
              set: false
            - flag: "--request-timeout"
        remediation: |-
          根据 CIS 指南建议，“建议根据实际情况设置这个限制，并仅在需要时更改默认的 60 秒限制”。编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，如有需要，请设置以下参数。例如，kube-apiserver-arg:  - "request-timeout=300s"
        scored: false

      - id: 1.2.24
        text: "确保将 --service-account-lookup 参数设置为 true（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1"
        tests:
          bin_op: or
          test_items:
            - flag: "--service-account-lookup"
              set: false
            - flag: "--service-account-lookup"
              compare:
                op: eq
                value: true
        remediation: |-
          默认情况下，K3s 不设置 --service-account-lookup 参数。编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并设置 service-account-lookup。例如：kube-apiserver-arg:  - "service-account-lookup=true"或者，你也可以删除该文件中的 service-account-lookup 参数，从而使用默认值。
        scored: true

      - id: 1.2.25
        text: "确保 --service-account-key-file 参数被设置为适当的数值（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'service-account-key-file'"
        tests:
          test_items:
            - flag: "--service-account-key-file"
        remediation: |-
          K3s 会自动生成并设置服务账户密钥文件。该文件位于 /var/lib/rancher/k3s/server/tls/service.key。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下内容的行。kube-apiserver-arg:  - "service-account-key-file=<path>"
        scored: true

      - id: 1.2.26
        text: "确保将 --etcd-certfile 和 --etcd-keyfile 参数设置为适当的值（自动化）。"
        audit: |
          if [ "$(journalctl -m -u k3s | grep -m1 'Managed etcd cluster' | wc -l)" -gt 0 ]; then
            journalctl -m -u k3s | grep -m1 'Running kube-apiserver' | tail -n1
          else
            echo "--etcd-certfile AND --etcd-keyfile"
          fi
        tests:
          bin_op: and
          test_items:
            - flag: "--etcd-certfile"
              set: true
            - flag: "--etcd-keyfile"
              set: true
        remediation: |-
          K3s会自动生成并设置etcd证书和密钥文件。它们位于/var/lib/rancher/k3s/server/tls/etcd/client.crt和/var/lib/rancher/k3s/server/tls/etcd/client.key。如果此检查失败，请编辑K3s配置文件/etc/rancher/k3s/config.yaml，并移除类似如下的行。kube-apiserver-arg:  - "etcd-certfile=<path>"  - "etcd-keyfile=<path>"
        scored: true

      - id: 1.2.27
        text: "确保将 --tls-cert-file 和 --tls-private-key-file 参数设置为适当的值（自动化）。"
        audit: "journalctl -m -u k3s | grep -A1 'Running kube-apiserver' | tail -n2"
        tests:
          bin_op: and
          test_items:
            - flag: "--tls-cert-file"
              set: true
            - flag: "--tls-private-key-file"
              set: true
        remediation: |-
          默认情况下，K3s 会自动生成并提供用于 apiserver 的 TLS 证书和私钥。它们会生成并位于 /var/lib/rancher/k3s/server/tls/serving-kube-apiserver.crt 和 /var/lib/rancher/k3s/server/tls/serving-kube-apiserver.key。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下内容的行。kube-apiserver-arg:  - "tls-cert-file=<path>"  - "tls-private-key-file=<path>"
        scored: true

      - id: 1.2.28
        text: "确保将 --client-ca-file 参数设置为适当的值（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'client-ca-file'"
        tests:
          test_items:
            - flag: "--client-ca-file"
        remediation: |-
          默认情况下，K3s 自动提供客户端证书颁发机构文件。该文件生成并位于 /var/lib/rancher/k3s/server/tls/client-ca.crt。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下的任何行。kube-apiserver-arg:  - "client-ca-file=<path>"
        scored: true

      - id: 1.2.29
        text: "确保将 --etcd-cafile 参数设置为适当的值（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'etcd-cafile'"
        tests:
          test_items:
            - flag: "--etcd-cafile"
        remediation: |-
          默认情况下，K3s 自动提供 etcd 证书授权文件。它是在 /var/lib/rancher/k3s/server/tls/client-ca.crt 生成并存放的。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下内容的任何行。kube-apiserver-arg:- "etcd-cafile=<path>"
        scored: true

      - id: 1.2.30
        text: "确保将 --encryption-provider-config 参数设置为适当的值（手动）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'encryption-provider-config'"
        tests:
          test_items:
            - flag: "--encryption-provider-config"
        remediation: |-
          K3s 可以配置使用加密提供者来加密静态密钥。在控制平面节点上编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并设置以下参数。secrets-encryption: true然后可以使用 k3s secrets-encrypt 命令行工具管理密钥加密。如果需要，您可以在 /var/lib/rancher/k3s/server/cred/encryption-config.json 找到生成的加密配置。
        scored: false

      - id: 1.2.31
        text: "确保加密提供程序已正确配置（手动）。"
        audit: |
          ENCRYPTION_PROVIDER_CONFIG=$(journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 | grep -- --encryption-provider-config | sed 's%.*encryption-provider-config[= ]\([^ ]*\).*%\1%')
          if test -e $ENCRYPTION_PROVIDER_CONFIG; then grep -o 'providers\"\:\[.*\]' $ENCRYPTION_PROVIDER_CONFIG | grep -o "[A-Za-z]*" | head -2 | tail -1  | sed 's/^/provider=/'; fi
        tests:
          test_items:
            - flag: "provider"
              compare:
                op: valid_elements
                value: "aescbc,kms,secretbox"
        remediation: |-
          K3s 可以配置使用加密提供程序来加密静态存储的秘钥。K3s 将使用 aescbc 提供程序。在控制平面节点上编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并设置以下参数。secrets-encryption: true然后可以使用 k3s secrets-encrypt 命令行工具来管理秘钥加密。如果需要，可以在 /var/lib/rancher/k3s/server/cred/encryption-config.json 找到生成的加密配置。
        scored: false

      - id: 1.2.32
        text: "确保 API 服务器只使用强加密密码（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-apiserver' | tail -n1 |
          grep 'tls-cipher-suites'"
        tests:
          test_items:
            - flag: "--tls-cipher-suites"
              compare:
                op: valid_elements
                value: "TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384"
        remediation: |-
          默认情况下，K3s kube-apiserver 符合此测试。更改这些值可能会导致回归，因此在应用于生产部署之前，请确保所有 apiserver 客户端都支持新的 TLS 配置。如果需要自定义 TLS 配置，请考虑创建符合您要求的自定义版本的此规则。如果此检查失败，请删除围绕 `tls-cipher-suites` 的任何自定义配置，或通过添加以下内容来更新 /etc/rancher/k3s/config.yaml 文件，使其与默认配置匹配：kube-apiserver-arg:  - "tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"
        scored: true

  - id: 1.3
    text: "控制器管理器"
    checks:
      - id: 1.3.1
        text: "确保 --terminated-pod-gc-threshold 参数设置为适当的值（手动）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-controller-manager' | tail
          -n1 | grep 'terminated-pod-gc-threshold'"
        tests:
          test_items:
            - flag: "--terminated-pod-gc-threshold"
        remediation: |-
          在控制平面节点上编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并设置 --terminated-pod-gc-threshold 为一个合适的阈值，kube-controller-manager-arg: - "terminated-pod-gc-threshold=10"。
        scored: false

      - id: 1.3.2
        text: "确保 --profiling 参数被设置为 false（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-controller-manager' | tail
          -n1 | grep 'profiling'"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |-
          默认情况下，K3s 将 --profiling 参数设置为 false。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下内容的任何行。kube-controller-manager-arg:  - "profiling=true"
        scored: true

      - id: 1.3.3
        text: "确保将 --use-service-account-credentials 参数设置为 true（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-controller-manager' | tail
          -n1 | grep 'use-service-account-credentials'"
        tests:
          test_items:
            - flag: "--use-service-account-credentials"
              compare:
                op: noteq
                value: false
        remediation: |-
          默认情况下，K3s 将 --use-service-account-credentials 参数设置为 true。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下内容的任何行。kube-controller-manager-arg:- "use-service-account-credentials=false"
        scored: true

      - id: 1.3.4
        text: "确保 --service-account-private-key-file 参数设置正确（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-controller-manager' | tail
          -n1 | grep 'service-account-private-key-file'"
        tests:
          test_items:
            - flag: "--service-account-private-key-file"
        remediation: |-
          默认情况下，K3s 自动提供服务账号私钥文件。该文件生成在 /var/lib/rancher/k3s/server/tls/service.current.key。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下的行。kube-controller-manager-arg:- "service-account-private-key-file=<path>"
        scored: true

      - id: 1.3.5
        text: "确保将 --root-ca-file 参数设置为适当的值（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-controller-manager' | tail
          -n1 | grep 'root-ca-file'"
        tests:
          test_items:
            - flag: "--root-ca-file"
        remediation: |-
          默认情况下，K3s会自动提供根 CA 文件。该文件生成并位于 /var/lib/rancher/k3s/server/tls/server-ca.crt。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下内容的任何行。kube-controller-manager-arg:  - "root-ca-file=<path>"
        scored: true

      - id: 1.3.6
        text: "确保 RotateKubeletServerCertificate 参数设置为 true（自动）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-controller-manager' | tail
          -n1"
        tests:
          bin_op: or
          test_items:
            - flag: "--feature-gates"
              compare:
                op: nothave
                value: "RotateKubeletServerCertificate=false"
              set: true
            - flag: "--feature-gates"
              set: false
        remediation: |-
          默认情况下，K3s 不设置 RotateKubeletServerCertificate 功能门。如果您已启用此功能门，应将其移除。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，删除类似以下内容的任何行。kube-controller-manager-arg:- "feature-gate=RotateKubeletServerCertificate"
        scored: true

      - id: 1.3.7
        text: "确保 --bind-address 参数设置为 127.0.0.1 (自动)。"
        audit: "journalctl -m -u k3s | grep 'Running kube-controller-manager' | tail
          -n1 | grep 'bind-address'"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
              set: true
            - flag: "--bind-address"
              set: false
        remediation: |-
          默认情况下，K3s 将 --bind-address 参数设置为 127.0.0.1。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下行的内容。kube-controller-manager-arg:  - "bind-address=<IP>"
        scored: true

  - id: 1.4
    text: "调度器"
    checks:
      - id: 1.4.1
        text: "确保将 --profiling 参数设置为 false（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-scheduler' | tail -n1"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
              set: true
        remediation: |-
          默认情况下，K3s 将 --profiling 参数设置为 false。如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下的任何行。kube-scheduler-arg:  - "profiling=true"
        scored: true

      - id: 1.4.2
        text: "确保将 --bind-address 参数设置为 127.0.0.1（自动化）。"
        audit: "journalctl -m -u k3s | grep 'Running kube-scheduler' | tail -n1 |
          grep 'bind-address'"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
              set: true
            - flag: "--bind-address"
              set: false
        remediation: |-
          默认情况下，K3s 将 --bind-address 参数设置为 127.0.0.1如果此检查失败，请编辑 K3s 配置文件 /etc/rancher/k3s/config.yaml，并删除类似以下内容的任何行。kube-scheduler-arg:  - "bind-address=<IP>"
        scored: true
