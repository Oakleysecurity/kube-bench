controls:
version: "k3s-cis-1.24"
id: 4
text: "工作节点安全配置"
type: "node"
groups:
  - id: 4.1
    text: "工作节点配置文件"
    checks:
      - id: 4.1.1
        text: "确保 kubelet 服务文件权限设置为 600 或更严格（自动化）。"
        audit: '/bin/sh -c ''if test -e $kubeletsvc; then stat -c permissions=%a $kubeletsvc;
          fi'' '
        type: "skip"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          不适用。kubelet 嵌入在 k3s 进程中。不存在 kubelet 服务文件，所有配置都作为运行时参数传递。
        scored: true

      - id: 4.1.2
        text: "确保 kubelet 服务文件的所有权设置为 root:root（自动化）。"
        audit: '/bin/sh -c ''if test -e $kubeletsvc; then stat -c %U:%G $kubeletsvc;
          fi'' '
        type: "skip"
        tests:
          test_items:
            - flag: root:root
        remediation: |-
          不适用。kubelet 嵌入在 k3s 进程中。没有 kubelet 服务文件，所有配置都是在运行时作为参数传递的。
        scored: true

      - id: 4.1.3
        text: "如果存在代理 kubeconfig 文件，请确保权限设置为 600 或更加严格（自动化）。"
        audit: '/bin/sh -c ''if test -e $proxykubeconfig; then stat -c permissions=%a
          $proxykubeconfig; fi'' '
        tests:
          bin_op: or
          test_items:
            - flag: "permissions"
              set: true
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在每个工作节点上运行以下命令（根据系统上文件的位置）。例如，chmod 600 $proxykubeconfig
        scored: true

      - id: 4.1.4
        text: "如果代理 kubeconfig 文件存在，请确保所有者设置为 root:root（自动化）。"
        audit: 'stat -c %U:%G $proxykubeconfig'
        tests:
          bin_op: or
          test_items:
            - flag: root:root
        remediation: |-
          在每个工作节点上运行以下命令（根据文件在您系统上的位置）。例如，chown root:root $proxykubeconfig。
        scored: true

      - id: 4.1.5
        text: "确保 --kubeconfig kubelet.conf 文件的权限设置为 600 或更为严格（自动化）。"
        audit: '/bin/sh -c ''if test -e $kubeletkubeconfig; then stat -c permissions=%a
          $kubeletkubeconfig; fi'' '
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在每个工作节点上运行以下命令（根据您系统上文件位置而定）。例如，chmod 600 $kubeletkubeconfig
        scored: true

      - id: 4.1.6
        text: "确保 --kubeconfig kubelet.conf 文件的所有权设置为 root:root（自动化）。"
        audit: 'stat -c %U:%G $kubeletkubeconfig'
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |-
          在每个工作节点上运行以下命令（根据系统上文件的位置）。例如，chown root:root $kubeletkubeconfig
        scored: true

      - id: 4.1.7
        text: "确保证书颁发机构文件的权限设置为 600 或更严格（自动化）。"
        audit: "stat -c permissions=%a $kubeletcafile"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
              set: true
        remediation: |-
          运行以下命令修改 --client-ca-file 文件的权限：chmod 600 $kubeletcafile
        scored: true

      - id: 4.1.8
        text: "确保客户端证书机构文件的所有权设置为 root:root（自动化）。"
        audit: "stat -c %U:%G $kubeletcafile"
        tests:
          test_items:
            - flag: root:root
              compare:
                op: eq
                value: root:root
        remediation: |-
          运行以下命令以修改 --client-ca-file 的所有权。chown root:root $kubeletcafile
        scored: true

      - id: 4.1.9
        text: "如果正在使用 kubelet config.yaml 配置文件，请验证权限设置为 600 或更为严格（自动化）。"
        audit: '/bin/sh -c ''if test -e $kubeletconf; then stat -c permissions=%a
          $kubeletconf; fi'' '
        type: "skip"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          不适用。Kubelet 嵌入在 k3s 进程中。不存在 kubelet 配置文件，所有配置都作为运行时参数传递。
        scored: true

      - id: 4.1.10
        text: "如果正在使用 kubelet config.yaml 配置文件，请验证文件所有权是否设置为 root:root（自动）。"
        audit: '/bin/sh -c ''if test -e $kubeletconf; then stat -c %U:%G $kubeletconf;
          fi'' '
        type: "skip"
        tests:
          test_items:
            - flag: root:root
        remediation: |-
          不适用。kubelet 嵌入在 k3s 进程中。没有 kubelet 配置文件，所有配置都是在运行时作为参数传入的。
        scored: true

  - id: 4.2
    text: "Kubelet 是 Kubernetes 中负责在每个节点上运行容器的组件。"
    checks:
      - id: 4.2.1
        text: "确保 --anonymous-auth 参数设置为 false（自动化）。"
        audit: '/bin/sh -c ''if test $(journalctl -m -u k3s | grep "Running kube-apiserver"
          | wc -l) -gt 0; then journalctl -m -u k3s | grep "Running kube-apiserver"
          | tail -n1 | grep "anonymous-auth" | grep -v grep; else echo "--anonymous-auth=false";
          fi'' '
        tests:
          test_items:
            - flag: "--anonymous-auth"
              path: '{.authentication.anonymous.enabled}'
              compare:
                op: eq
                value: false
              set: true
        remediation: |-
          默认情况下，K3s 将 --anonymous-auth 设置为 false。如果您已将其设置为不同的值，则应将其重新设置为 false。如果使用 K3s 配置文件 /etc/rancher/k3s/config.yaml，请移除类似以下内容的任何行。kubelet-arg:  - "anonymous-auth=true"如果使用命令行，请编辑 K3s 服务文件并移除以下参数。--kubelet-arg="anonymous-auth=true"根据您的系统，重新启动 k3s 服务。例如，systemctl daemon-reloadsystemctl restart k3s.service
        scored: true

      - id: 4.2.2
        text: "确保 --authorization-mode 参数未设置为 AlwaysAllow（自动）。"
        audit: '/bin/sh -c ''if test $(journalctl -m -u k3s | grep "Running kube-apiserver"
          | wc -l) -gt 0; then journalctl -m -u k3s | grep "Running kube-apiserver"
          | tail -n1 | grep "authorization-mode"; else echo "--authorization-mode=Webhook";
          fi'' '
        tests:
          test_items:
            - flag: --authorization-mode
              path: '{.authorization.mode}'
              compare:
                op: nothave
                value: AlwaysAllow
              set: true
        remediation: |-
          默认情况下，K3s 不会将 --authorization-mode 设置为 AlwaysAllow。如果使用 K3s 配置文件 /etc/rancher/k3s/config.yaml，请删除类似以下内容的任何行。kubelet-arg:  - "authorization-mode=AlwaysAllow"如果使用命令行方式，请编辑 K3s 服务文件并删除以下参数。--kubelet-arg="authorization-mode=AlwaysAllow"根据您的系统，重新启动 k3s 服务。例如，systemctl daemon-reloadsystemctl restart k3s.service
        scored: true

      - id: 4.2.3
        text: "确保 --client-ca-file 参数被设置为适当的数值（自动化）。"
        audit: '/bin/sh -c ''if test $(journalctl -m -u k3s | grep "Running kube-apiserver"
          | wc -l) -gt 0; then journalctl -m -u k3s | grep "Running kube-apiserver"
          | tail -n1 | grep "client-ca-file"; else echo "--client-ca-file=/var/lib/rancher/k3s/server/tls/request-header-ca.crt";
          fi'' '
        tests:
          test_items:
            - flag: --client-ca-file
              path: '{.authentication.x509.clientCAFile}'
              set: true
        remediation: |-
          默认情况下，K3s 会自动为 Kubelet 提供客户端 CA 证书。它被生成并位于 /var/lib/rancher/k3s/agent/client-ca.crt。
        scored: true

      - id: 4.2.4
        text: "验证 --read-only-port 参数是否设置为 0 (自动化)。"
        audit: "journalctl -m -u k3s -u k3s-agent | grep 'Running kubelet' | tail
          -n1"
        tests:
          bin_op: or
          test_items:
            - flag: "--read-only-port"
              path: '{.readOnlyPort}'
              compare:
                op: eq
                value: 0
            - flag: "--read-only-port"
              path: '{.readOnlyPort}'
              set: false
        remediation: |-
          默认情况下，K3s 将 --read-only-port 设置为 0。如果您将其设置为其他值，应将其设置回 0。如果使用 K3s 配置文件 /etc/rancher/k3s/config.yaml，请删除类似以下的任何行。kubelet-arg:  - "read-only-port=XXXX"如果使用命令行，请编辑 K3s 服务文件并删除以下参数。--kubelet-arg="read-only-port=XXXX"根据您的系统，重新启动 k3s 服务。例如，systemctl daemon-reloadsystemctl restart k3s.service
        scored: true

      - id: 4.2.5
        text: "确保 --streaming-connection-idle-timeout 参数未设置为 0（手动）。"
        audit: "journalctl -m -u k3s -u k3s-agent | grep 'Running kubelet' | tail
          -n1"
        tests:
          test_items:
            - flag: --streaming-connection-idle-timeout
              path: '{.streamingConnectionIdleTimeout}'
              compare:
                op: noteq
                value: 0
            - flag: --streaming-connection-idle-timeout
              path: '{.streamingConnectionIdleTimeout}'
              set: false
          bin_op: or
        remediation: |-
          如果使用 K3s 配置文件 /etc/rancher/k3s/config.yaml，请将以下参数设置为适当的值。kubelet-arg:  - "streaming-connection-idle-timeout=5m"如果使用命令行，请运行 K3s 带上 --kubelet-arg="streaming-connection-idle-timeout=5m"。根据您的系统，重新启动 k3s 服务。例如，systemctl restart k3s.service
        scored: false

      - id: 4.2.6
        text: "确保 --protect-kernel-defaults 参数设置为 true（自动）。"
        audit: "journalctl -m -u k3s -u k3s-agent | grep 'Running kubelet' | tail
          -n1"
        tests:
          test_items:
            - flag: --protect-kernel-defaults
              path: '{.protectKernelDefaults}'
              compare:
                op: eq
                value: true
              set: true
        remediation: |-
          如果使用 K3s 配置文件 /etc/rancher/k3s/config.yaml，请设置以下参数。protect-kernel-defaults: true如果使用命令行，请运行 K3s 时加上 --protect-kernel-defaults=true。根据你的系统，重新启动 k3s 服务。例如，systemctl restart k3s.service
        scored: true

      - id: 4.2.7
        text: "确保将 --make-iptables-util-chains 参数设置为 true（自动化）。"
        audit: "journalctl -m -u k3s -u k3s-agent | grep 'Running kubelet' | tail
          -n1"
        tests:
          test_items:
            - flag: --make-iptables-util-chains
              path: '{.makeIPTablesUtilChains}'
              compare:
                op: eq
                value: true
              set: true
            - flag: --make-iptables-util-chains
              path: '{.makeIPTablesUtilChains}'
              set: false
          bin_op: or
        remediation: |-
          如果在使用 K3s 的配置文件 /etc/rancher/k3s/config.yaml 中，设置以下参数。kubelet-arg:  - "make-iptables-util-chains=true"如果在命令行中操作，运行 K3s 时使用 --kubelet-arg="make-iptables-util-chains=true"。根据您的系统，重新启动 k3s 服务。例如，systemctl restart k3s.service
        scored: true

      - id: 4.2.8
        text: "确保未设置 --hostname-override 参数（自动化）。"
        type: "skip"
        audit: "journalctl -m -u k3s -u k3s-agent | grep 'Running kubelet' | tail
          -n1"
        tests:
          test_items:
            - flag: --hostname-override
              set: false
        remediation: |-
          不适用。默认情况下，K3s 确实设置 --hostname-override 参数。根据 CIS 指南，这是为了符合云提供商的要求，确保主机名与节点名称匹配。
        scored: true

      - id: 4.2.9
        text: "确保 eventRecordQPS 参数设置在一个确保适当事件捕获的水平上 (手动)。"
        audit: "journalctl -m -u k3s -u k3s-agent | grep 'Running kubelet' | tail
          -n1"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --event-qps
              path: '{.eventRecordQPS}'
              compare:
                op: eq
                value: 0
        remediation: |-
          默认情况下，K3s 将 event-qps 设置为 0。如果您希望更改此设置，如果使用 K3s 配置文件 /etc/rancher/k3s/config.yaml，则将以下参数设置为适当的值：kubelet-arg:  - "event-qps=<value>"如果使用命令行，请使用 --kubelet-arg="event-qps=<value>" 运行 K3s。根据您的系统，重新启动 k3s 服务。例如，systemctl restart k3s.service
        scored: false

      - id: 4.2.10
        text: "确保将 --tls-cert-file 和 --tls-private-key-file 参数设置为适当的数值（自动化）。"
        audit: "journalctl -m -u k3s -u k3s-agent | grep 'Running kubelet' | tail
          -n1"
        tests:
          test_items:
            - flag: --tls-cert-file
              path: '/var/lib/rancher/k3s/agent/serving-kubelet.crt'
            - flag: --tls-private-key-file
              path: '/var/lib/rancher/k3s/agent/serving-kubelet.key'
        remediation: |-
          默认情况下，K3s 自动为 Kubelet 提供 TLS 证书和私钥。它们生成并位于 /var/lib/rancher/k3s/agent/serving-kubelet.crt 和 /var/lib/rancher/k3s/agent/serving-kubelet.key。如果由于某种原因需要提供自己的证书和密钥，可以在 K3s 配置文件 /etc/rancher/k3s/config.yaml 中设置以下参数：kubelet-arg:  - "tls-cert-file=<path/to/tls-cert-file>"  - "tls-private-key-file=<path/to/tls-private-key-file>"
        scored: true

      - id: 4.2.11
        text: "确保 --rotate-certificates 参数未设置为 false（自动化）。"
        audit: "journalctl -m -u k3s -u k3s-agent | grep 'Running kubelet' | tail
          -n1"
        audit_config: "/bin/sh -c 'if test -e $kubeletconf; then /bin/cat $kubeletconf;
          fi' "
        tests:
          test_items:
            - flag: --rotate-certificates
              path: '{.rotateCertificates}'
              compare:
                op: eq
                value: true
            - flag: --rotate-certificates
              path: '{.rotateCertificates}'
              set: false
          bin_op: or
        remediation: |-
          默认情况下，K3s 不设置 --rotate-certificates 参数。如果您已经将此标志设置为 `false`，您应该将其设置为 `true`，或者完全移除该标志。如果使用 K3s 配置文件 /etc/rancher/k3s/config.yaml，请移除任何 rotate-certificates 参数。如果使用命令行，请移除 K3s 标志 --kubelet-arg="rotate-certificates"。根据您的系统，重新启动 k3s 服务。例如，systemctl restart k3s.service
        scored: true

      - id: 4.2.12
        text: "验证 RotateKubeletServerCertificate 参数是否设置为 true（自动）。"
        audit: "journalctl -m -u k3s -u k3s-agent | grep 'Running kubelet' | tail
          -n1"
        tests:
          bin_op: or
          test_items:
            - flag: RotateKubeletServerCertificate
              path: '{.featureGates.RotateKubeletServerCertificate}'
              compare:
                op: nothave
                value: false
            - flag: RotateKubeletServerCertificate
              path: '{.featureGates.RotateKubeletServerCertificate}'
              set: false
        remediation: |-
          默认情况下，K3s 不设置 RotateKubeletServerCertificate 功能门。如果您已启用此功能门，应将其删除。如果使用 K3s 配置文件 /etc/rancher/k3s/config.yaml，请移除任何 feature-gate=RotateKubeletServerCertificate 参数。如果使用命令行，请移除 K3s 标志 --kubelet-arg="feature-gate=RotateKubeletServerCertificate"。根据您的系统，重新启动 k3s 服务。例如，systemctl restart k3s.service
        scored: true

      - id: 4.2.13
        text: "确保 Kubelet 仅使用强加密算法（手动配置）。"
        audit: "journalctl -m -u k3s -u k3s-agent | grep 'Running kubelet' | tail
          -n1"
        audit_config: "/bin/cat $kubeletconf"
        tests:
          test_items:
            - flag: --tls-cipher-suites
              path: '{range .tlsCipherSuites[:]}{}{'',''}{end}'
              compare:
                op: valid_elements
                value: 
                  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
        remediation: |-
          如果使用 K3s 配置文件 /etc/rancher/k3s/config.yaml，请编辑该文件，设置 `tlsCipherSuites` 如下所示：kubelet-arg:  - "tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"或者选择其中的一部分数值。如果使用命令行，请添加 K3s 标志 --kubelet-arg="tls-cipher-suites=<与上述数值相同的数值>"根据您的系统，重新启动 k3s 服务。例如，systemctl restart k3s.service
        scored: false
