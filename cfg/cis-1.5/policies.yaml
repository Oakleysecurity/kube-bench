controls:
version: "cis-1.5"
id: 5
text: "Kubernetes 策略"
type: "policies"
groups:
  - id: 5.1
    text: "RBAC 和 Service Accounts"
    checks:
      - id: 5.1.1
        text: "确保 cluster-admin 角色仅在必要时使用（未评分）。"
        type: "manual"
        remediation: |-
          识别所有绑定到 cluster-admin 角色的 clusterrolebindings。检查它们是否被使用以及是否需要这个角色，或者是否可以使用权限更少的角色。在可能的情况下，首先将用户绑定到一个权限较低的角色，然后移除绑定到 cluster-admin 角色的 clusterrolebinding：kubectl delete clusterrolebinding [name]
        scored: false

      - id: 5.1.2
        text: "最小化对机密信息的访问（未评分）。"
        type: "manual"
        remediation: |-
          在可能的情况下，在集群中删除对 secret 对象的 get、list 和 watch 访问权限。
        scored: false

      - id: 5.1.3
        text: "减少在角色（Roles）和集群角色（ClusterRoles）中通配符的使用（未评分）。"
        type: "manual"
        remediation: |-
          在可能的情况下，用具体的对象或操作替换集群角色和角色中的通配符。
        scored: false

      - id: 5.1.4
        text: "最小化创建 pods 的访问权限（未评分）。"
        type: "manual"
        remediation: |-
          在可能的情况下，请移除集群中对 Pod 对象的创建访问权限。
        scored: false

      - id: 5.1.5
        text: "确保默认服务账号未被激活使用。（得分）"
        type: "manual"
        remediation: |-
          在 Kubernetes 工作负载需要特定访问 Kubernetes API 服务器时，创建明确的服务账户。修改每个默认服务账户的配置，包括该值 automountServiceAccountToken: false。
        scored: true

      - id: 5.1.6
        text: "确保仅在必要时挂载 Service Account Tokens（未评分）。"
        type: "manual"
        remediation: |-
          修改不需要挂载服务账户令牌的 Pod 和服务账户的定义，禁用该功能。
        scored: false

  - id: 5.2
    text: "Pod 安全策略"
    checks:
      - id: 5.2.1
        text: "减少特权容器的准入（未得分）"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP，确保 .spec.privileged 字段被省略或设置为 false。
        scored: false

      - id: 5.2.2
        text: "最小化容器希望共享主机进程 ID 命名空间的准入（评分）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 Pod 安全策略（PSP），确保 .spec.hostPID 字段被省略或设置为 false。
        scored: true

      - id: 5.2.3
        text: "最小化允许希望共享主机 IPC namespace 的容器的准入（得分）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 Pod 安全策略 (PSP)，确保 .spec.hostIPC 字段被省略或设置为 false。
        scored: true

      - id: 5.2.4
        text: "最小化希望共享主机网络命名空间的容器的准入（得分）"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP，并确保 .spec.hostNetwork 字段被省略或设置为 false。
        scored: true

      - id: 5.2.5
        text: "最小化允许拥有特权升级的容器的准入（得分）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP，确保 .spec.allowPrivilegeEscalation 字段被省略或设置为 false。
        scored: true

      - id: 5.2.6
        text: "最小化容器以 root 用户身份运行的准入（未评分）。"
        type: "manual"
        remediation: |-
          根据 Kubernetes 文档中的描述创建一个 PSP，确保 .spec.runAsUser.rule 被设置为 MustRunAsNonRoot 或 MustRunAs，并且 UID 的范围不包括 0。
        scored: false

      - id: 5.2.7
        text: "减少具有 NET_RAW 功能的容器的准入（未评分）。"
        type: "manual"
        remediation: |-
          根据 Kubernetes 文档中的描述创建一个 PSP，确保 .spec.requiredDropCapabilities 被设置为包含 NET_RAW 或 ALL。
        scored: false

      - id: 5.2.8
        text: "减少带有额外权限的容器的准入（未评分）。"
        type: "manual"
        remediation: |-
          确保集群中的 PSPs 中不包含 allowedCapabilities 参数，除非将其设置为空数组。
        scored: false

      - id: 5.2.9
        text: "减少分配了特权的容器的准入（未评分）。"
        type: "manual"
        remediation: |-
          审查集群中运行应用程序时的 capabilities 使用情况。如果一个命名空间包含不需要任何 Linux capabilities 来运行的应用程序，请考虑添加一个 PSP，该 PSP 禁止接收不放弃所有 capabilities 的容器。
        scored: false

  - id: 5.3
    text: "网络策略和CNI"
    checks:
      - id: 5.3.1
        text: "确保当前使用的 CNI 支持 Network Policies（未评分）。"
        type: "manual"
        remediation: |-
          如果正在使用的 CNI 插件不支持网络策略，应考虑使用其他插件或查找替代机制来限制 Kubernetes 集群中的流量。
        scored: false

      - id: 5.3.2
        text: "确保所有命名空间都定义了网络策略（得分）。"
        type: "manual"
        remediation: |-
          根据文档创建 NetworkPolicy 对象，根据需要进行操作。
        scored: true

  - id: 5.4
    text: "机密管理"
    checks:
      - id: 5.4.1
        text: "更倾向于将 secrets 作为文件而不是环境变量来使用（未评分）。"
        type: "manual"
        remediation: |-
          如果可能的话，重写应用程序代码，从挂载的密钥文件中读取密钥，而不是从环境变量中读取。
        scored: false

      - id: 5.4.2
        text: "考虑使用外部的秘钥存储（未评分）。"
        type: "manual"
        remediation: |-
          请参考您的云服务提供商或第三方机密管理解决方案提供的机密管理选项。
        scored: false

  - id: 5.5
    text: "可扩展的准入控制"
    checks:
      - id: 5.5.1
        text: "使用 ImagePolicyWebhook 出入控制器配置镜像溯源（不计分）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档的指导，设置镜像溯源。
        scored: false

  - id: 5.7
    text: "通用策略"
    checks:
      - id: 5.7.1
        text: "使用命名空间为资源创建管理边界（未评分）。"
        type: "manual"
        remediation: |-
          根据文档的指引，按照需要为部署中的对象创建命名空间。
        scored: false

      - id: 5.7.2
        text: "确保在您的 Pod 定义中将 seccomp 配置文件设置为 docker/default（未得分）。"
        type: "manual"
        remediation: |-
          Seccomp 目前是一个 alpha 特性。默认情况下，所有 alpha 特性都是禁用的。所以，您需要通过传递 "--feature-gates=AllAlpha=true" 参数来在 apiserver 中启用 alpha 特性。编辑主节点上的 /etc/kubernetes/apiserver 文件，并将 KUBE_API_ARGS 参数设置为 "--feature-gates=AllAlpha=true"KUBE_API_ARGS="--feature-gates=AllAlpha=true"根据您的系统，重新启动 kube-apiserver 服务。例如：systemctl restart kube-apiserver.service使用注释来在您的 pod 定义中启用 docker/default 的 seccomp 配置文件。示例如下：apiVersion: v1kind: Podmetadata:  name: trustworthy-pod  annotations:    seccomp.security.alpha.kubernetes.io/pod: docker/defaultspec:  containers:    - name: trustworthy-container      image: sotrustworthy:latest
        scored: false

      - id: 5.7.3
        text: "将安全上下文应用于您的 Pod 和容器（未评分）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档的指导，为你的 Pod 应用安全上下文。对于建议的安全上下文清单，你可以参考 CIS Docker 容器安全基准。
        scored: false

      - id: 5.7.4
        text: "不应该使用默认命名空间（得分）。"
        type: "manual"
        remediation: |-
          确保创建命名空间以允许对 Kubernetes 资源进行适当的隔离，并确保所有新资源都在特定的命名空间中创建。
        scored: true
