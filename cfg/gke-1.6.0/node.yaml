controls:
version: "gke-1.6.0"
id: 3
text: "工作节点安全配置"
type: "node"
groups:
  - id: 3.1
    text: "工作节点配置文件"
    checks:
      - id: 3.1.1
        text: "确保代理 kubeconfig 文件的权限设置为 644 或更严格（手动）。"
        audit: '/bin/sh -c ''if test -e $proxykubeconfig; then stat -c permissions=%a
          $proxykubeconfig; fi'' '
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |-
          在每个工作节点上运行以下命令（基于系统中文件的位置）。例如，chmod 644 $proxykubeconfig
        scored: true

      - id: 3.1.2
        text: "确保代理 kubeconfig 文件的所有权设置为 root:root（手动操作）。"
        audit: '/bin/sh -c ''if test -e $proxykubeconfig; then stat -c %U:%G $proxykubeconfig;
          fi'' '
        tests:
          test_items:
            - flag: root:root
        remediation: |-
          在每个工作节点上运行以下命令（根据系统中文件的位置）。例如：chown root:root $proxykubeconfig
        scored: true

      - id: 3.1.3
        text: "确保 kubelet 配置文件的权限设置为 600（手动设置）。"
        audit: '/bin/sh -c ''if test -e /home/kubernetes/kubelet-config.yaml; then
          stat -c permissions=%a /home/kubernetes/kubelet-config.yaml; fi'' '
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          运行以下命令（使用 kubelet 配置文件的位置）chmod 644 /home/kubernetes/kubelet-config.yaml
        scored: true

      - id: 3.1.4
        text: "确保 kubelet 配置文件的所有权设置为 root:root （手动）。"
        audit: '/bin/sh -c ''if test -e /home/kubernetes/kubelet-config.yaml; then
          stat -c %U:%G /home/kubernetes/kubelet-config.yaml; fi'' '
        tests:
          test_items:
            - flag: root:root
        remediation: |-
          运行以下命令（使用审计步骤中确定的配置文件位置）：chown root:root /home/kubernetes/kubelet-config.yaml
        scored: true

  - id: 3.2
    text: "Kubelet"
    checks:
      - id: 3.2.1
        text: "确保匿名认证未启用（自动化）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat /home/kubernetes/kubelet-config.yaml"
        tests:
          test_items:
            - flag: "--anonymous-auth"
              path: '{.authentication.anonymous.enabled}'
              compare:
                op: eq
                value: false
        remediation: |-
          修复方法1：如果通过 Kubelet 配置文件进行配置，首先需要找到该文件。要做到这一点，通过 SSH 连接到每个节点，并执行以下命令查找 kubelet 进程：  ps -ef | grep kubelet上述命令的输出提供了活动 kubelet 进程的详细信息，从中我们可以看到使用 --config 参数提供给 kubelet 服务的配置文件的位置。可以使用如下命令查看文件，例如：  sudo less /home/kubernetes/kubelet-config.yaml通过设置以下参数来禁用匿名认证：  "authentication": { "anonymous": { "enabled": false } }修复方法2：如果使用可执行参数进行配置，需要编辑每个工作节点上的 kubelet 服务文件，并确保以下参数包含在 KUBELET_ARGS 变量字符串中。对于使用 systemd 的系统，如 Amazon EKS 优化的 Amazon Linux 或 Bottlerocket AMI，该文件可以在/etc/systemd/system/kubelet.service.d/10-kubelet-args.conf 中找到。否则，您可能需要查阅您选择操作系统的文档，以确定配置了哪个服务管理器：  --anonymous-auth=false两种修复步骤：根据您的系统，重启 kubelet 服务并检查服务状态。以下示例适用于使用 systemd 的操作系统，如 Amazon EKS 优化的 Amazon Linux 或 Bottlerocket AMI，并调用 systemctl命令。如果 systemctl 不可用，则需要查阅您选择操作系统的文档，以确定配置了哪个服务管理器：  systemctl daemon-reload  systemctl restart kubelet.service  systemctl status kubelet -l
        scored: true

      - id: 3.2.2
        text: "确保 --authorization-mode 参数未设置为 AlwaysAllow（自动化）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat /home/kubernetes/kubelet-config.yaml"
        tests:
          test_items:
            - flag: --authorization-mode
              path: '{.authorization.mode}'
              compare:
                op: nothave
                value: AlwaysAllow
        remediation: |-
          修复方法 1：如果通过 Kubelet 配置文件进行配置，则首先需要找到该文件。要做到这一点，请为每个节点SSH，并执行以下命令来查找 kubelet 进程：  ps -ef | grep kubelet上述命令的输出提供了活动 kubelet 进程的详细信息，从中我们可以看到通过 --config 参数提供给 kubelet 服务的配置文件的位置。可以使用类似如下的命令查看文件：  sudo less /path/to/kubelet-config.json通过设置以下参数启用 Webhook 认证：  "authentication": { "webhook": { "enabled": true } }接下来，通过设置以下参数将授权模式设置为 Webhook：  "authorization": { "mode": "Webhook" }有关认证和授权字段的更详细信息可以在 Kubelet 配置文档中找到（https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/）。修复方法 2：如果使用可执行参数，则需编辑每个工作节点上的 kubelet 服务文件，并确保以下参数包含在 KUBELET_ARGS 变量字符串中。对于使用 systemd 的系统，例如 Amazon EKS 优化的 Amazon Linux 或 Bottlerocket AMIs，则此文件可以在 /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf 中找到。否则，您可能需要查阅您选择操作系统的文档，以确定所配置的服务管理器：    --authentication-token-webhook    --authorization-mode=Webhook对于两个修复步骤：根据您的系统，重新启动 kubelet 服务并检查服务状态。以下示例适用于使用 systemd 的操作系统，例如 Amazon EKS 优化的 Amazon Linux 或 Bottlerocket AMIs，并调用 systemctl 命令。如果 systemctl 不可用，则需要查阅您选择操作系统的文档，以确定所配置的服务管理器：  systemctl daemon-reload  systemctl restart kubelet.service  systemctl status kubelet -l
        scored: true

      - id: 3.2.3
        text: "确保配置了客户端 CA 文件（自动）"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat /home/kubernetes/kubelet-config.yaml"
        tests:
          test_items:
            - flag: --client-ca-file
              path: '{.authentication.x509.clientCAFile}'
              set: true
        remediation: |-
          修复方法 1：如果通过 Kubelet 配置文件进行配置，您首先需要定位该文件。为此，请 SSH 登录每个节点，并执行以下命令查找 kubelet 进程：  ps -ef | grep kubelet上述命令的输出提供了活动 kubelet 进程的详细信息，我们可以从中看到通过 --config 参数提供给 kubelet 服务的配置文件的位置。您可以使用如下命令查看文件，比如：  sudo less /path/to/kubelet-config.json通过适当设置以下参数配置客户端证书颁发机构文件：  "authentication": { "x509": {"clientCAFile": <path/to/client-ca-file> } }"修复方法 2：如果使用可执行参数，编辑每个工作节点上的 kubelet 服务文件，并确保以下参数是 KUBELET_ARGS 变量字符串的一部分。对于使用 systemd 的系统，比如 Amazon EKS 优化的 Amazon Linux 或 Bottlerocket AMI，那么该文件可以在 /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf 中找到。否则，您可能需要查阅您选择的操作系统的文档，以确定配置了哪个服务管理器：  --client-ca-file=<path/to/client-ca-file>对于两种修复步骤：根据您的系统，重启 kubelet 服务并检查服务状态。以下示例适用于使用 systemd 的操作系统，比如 Amazon EKS 优化的 Amazon Linux 或 Bottlerocket AMI，并调用 systemctl 命令。如果 systemctl 不可用，则您需要查阅您选择的操作系统的文档，以确定配置了哪个服务管理器：  systemctl daemon-reload  systemctl restart kubelet.service  systemctl status kubelet -l
        scored: true

      - id: 3.2.4
        text: "确保 --read-only-port 参数被禁用（自动化）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat /home/kubernetes/kubelet-config.yaml"
        tests:
          test_items:
            - flag: "--read-only-port"
              path: '{.readOnlyPort}'
              set: false
            - flag: "--read-only-port"
              path: '{.readOnlyPort}'
              compare:
                op: eq
                value: 0
          bin_op: or
        remediation: |-
          如果要修改 Kubelet 配置文件，请编辑 kubelet-config.json 文件 /etc/kubernetes/kubelet/kubelet-config.json，并将以下参数设置为 0："readOnlyPort": 0如果使用可执行参数，请编辑 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf，在每个 worker 节点上在 KUBELET_ARGS 变量字符串的末尾添加以下参数：--read-only-port=0对于每个修复措施：根据您的系统，重新启动 kubelet 服务并检查状态systemctl daemon-reloadsystemctl restart kubelet.servicesystemctl status kubelet -l
        scored: true

      - id: 3.2.5
        text: "确保 --streaming-connection-idle-timeout 参数未设置为 0（自动化）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat /home/kubernetes/kubelet-config.yaml"
        tests:
          test_items:
            - flag: --streaming-connection-idle-timeout
              path: '{.streamingConnectionIdleTimeout}'
              compare:
                op: noteq
                value: 0
            - flag: --streaming-connection-idle-timeout
              path: '{.streamingConnectionIdleTimeout}'
              set: false
          bin_op: or
        remediation: |-
          修复方法1：如果修改 Kubelet 配置文件，请编辑 kubelet-config.json 文件/etc/kubernetes/kubelet-config.yaml 并将以下参数设置为一个非零值，格式为 #h#m#s  "streamingConnectionIdleTimeout": "4h0m0s"您应该确保 kubelet 服务文件/etc/systemd/system/kubelet.service.d/10-kubelet-args.conf 没有指定 --streaming-connection-idle-timeout 参数，因为这样会覆盖 Kubelet 配置文件。修复方法2：如果使用可执行参数，请在每个工作节点上编辑 kubelet 服务文件/etc/systemd/system/kubelet.service.d/10-kubelet-args.conf 并将以下参数添加到 KUBELET_ARGS 变量字符串的末尾。  --streaming-connection-idle-timeout=4h0m0s修复方法3：如果使用 api configz 端点，请考虑搜索"streamingConnectionIdleTimeout"的状态，通过从运行 kubelet 的节点提取现有配置来查找。**在重新配置活动集群节点的 Kubelet 中查看详细的逐步配置映射操作步骤(https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet/)，然后重新运行审核过程中的 curl 语句以检查 kubelet 配置更改  kubectl proxy --port=8001 &  export HOSTNAME_PORT=localhost:8001（示例主机和端口号）  export NODE_NAME=gke-cluster-1-pool1-5e572947-r2hg（从"kubectl get nodes"获得的示例节点名称）  curl -sSL "http://${HOSTNAME_PORT}/api/v1/nodes/${NODE_NAME}/proxy/configz"对于这三种修复方法：根据您的系统，重新启动 kubelet 服务并检查状态  systemctl daemon-reload  systemctl restart kubelet.service  systemctl status kubelet -l
        scored: true

      - id: 3.2.6
        text: "确保将 --make-iptables-util-chains 参数设置为 true（自动化）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat /home/kubernetes/kubelet-config.yaml"
        tests:
          test_items:
            - flag: --make-iptables-util-chains
              path: '{.makeIPTablesUtilChains}'
              compare:
                op: eq
                value: true
            - flag: --make-iptables-utils-chains
              path: '{.makeIPTablesUtilChains}'
              set: false
          bin_op: or
        remediation: |-
          修复方法1：如果修改 Kubelet 配置文件，请编辑 kubelet-config.json 文件 /etc/kubernetes/kubelet/kubelet-config.json，并将以下参数设置为 true"makeIPTablesUtilChains": true确保 /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf 没有设置 --make-iptables-util-chains 参数，因为这样会覆盖您的 Kubelet 配置文件。修复方法2：如果使用可执行参数，请编辑 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf，并在每个 worker 节点末尾 KUBELET_ARGS 变量字符串中添加以下参数--make-iptables-util-chains:true修复方法3：如果使用 api configz 端点，请考虑通过从运行 kubelet 的节点提取实时配置来搜索 "makeIPTablesUtilChains.: true" 的状态。** 查看有关重新配置 Live Cluster 中节点的 Kubelet 的详细逐步配置程序 (https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet/)，然后重新运行审计过程中的 curl 语句以检查 kubelet 配置更改```kubectl proxy --port=8001 &export HOSTNAME_PORT=localhost:8001 (示例主机和端口号)export NODE_NAME=gke-cluster-1-pool1-5e572947-r2hg (从 "kubectl get nodes" 中获取示例节点名称)curl -sSL "http://${HOSTNAME_PORT}/api/v1/nodes/${NODE_NAME}/proxy/configz"```对于这三种修复方法：根据您的系统，重新启动 kubelet 服务并检查状态```systemctl daemon-reloadsystemctl restart kubelet.servicesystemctl status kubelet -l```
        scored: true

      - id: 3.2.7
        text: "确保将 --eventRecordQPS 参数设置为 0 或者能够确保适当事件捕获的级别（自动化）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat /etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
        tests:
          test_items:
            - flag: --event-qps
              path: '{.eventRecordQPS}'
              set: true
              compare:
                op: eq
                value: 0
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑该文件，将 eventRecordQPS 设置为适当的级别。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf，并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置以下参数。根据你的系统，重新启动 kubelet 服务。例如：  systemctl daemon-reload  systemctl restart kubelet.service
        scored: true

      - id: 3.2.8
        text: "确保 --rotate-certificates 参数不存在或者设置为 true（自动）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat /home/kubernetes/kubelet-config.yaml"
        tests:
          test_items:
            - flag: --rotate-certificates
              path: '{.rotateCertificates}'
              compare:
                op: eq
                value: true
            - flag: --rotate-certificates
              path: '{.rotateCertificates}'
              set: false
          bin_op: or
        remediation: |-
          修复方法一：如果修改 Kubelet 配置文件，请编辑 kubelet-config.yaml 文件 /etc/kubernetes/kubelet/kubelet-config.yaml，并将以下参数设置为 true"RotateCertificate":true另外，请确保 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf 中未将 --RotateCertificate 可执行参数设置为 false，因为这会覆盖 Kubelet 配置文件。修复方法二：如果使用可执行参数，请在每个 worker 节点上编辑 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf，并在 KUBELET_ARGS 变量字符串的末尾添加以下参数。--RotateCertificate=true
        scored: true

      - id: 3.2.9
        text: "确保 RotateKubeletServerCertificate 参数设置为 true（自动化）。"
        audit: "/bin/ps -fC $kubeletbin"
        audit_config: "/bin/cat /home/kubernetes/kubelet-config.yaml"
        tests:
          test_items:
            - flag: RotateKubeletServerCertificate
              path: '{.featureGates.RotateKubeletServerCertificate}'
              compare:
                op: eq
                value: true
        remediation: |-
          方法一：如果修改 Kubelet 配置文件，请编辑 kubelet-config.json 文件 /etc/kubernetes/kubelet-config.yaml，并将以下参数设置为 true  "featureGates": {  "RotateKubeletServerCertificate":true  },另外，请确保 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf 没有将 --rotate-kubelet-server-certificate 可执行参数设置为 false，否则将覆盖 Kubelet 配置文件。方法二：如果使用可执行参数，请编辑每个 worker 节点上的 kubelet 服务文件 /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf，将以下参数添加到 KUBELET_ARGS 变量字符串的末尾。  --rotate-kubelet-server-certificate=true方法三：如果使用 api configz 端点，请考虑搜索"RotateKubeletServerCertificate"的状态，方法是从运行 kubelet 的节点提取实时配置。详细的步骤请参考重配置活动集群中节点的 Kubelet (https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet/)，然后重新运行审计过程中的 curl 语句以检查 kubelet 配置更改  kubectl proxy --port=8001 &  export HOSTNAME_PORT=localhost:8001 (示例主机和端口号)  export NODE_NAME=gke-cluster-1-pool1-5e572947-r2hg (示例节点名称，来自 "kubectl get nodes")  curl -sSL "http://${HOSTNAME_PORT}/api/v1/nodes/${NODE_NAME}/proxy/configz"对于这三种修复方法：重新启动 kubelet 服务并检查状态。以下示例是在使用 systemctl 管理服务时的操作：  systemctl daemon-reload  systemctl restart kubelet.service  systemctl status kubelet -l
        scored: true
