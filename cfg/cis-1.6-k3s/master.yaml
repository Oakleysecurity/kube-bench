controls:
version: "cis-1.6-k3s"
id: 1
text: "主节点安全配置"
type: "master"
groups:
  - id: 1.1
    text: "主节点配置文件"
    checks:
      - id: 1.1.1
        text: "确保 API 服务器的 Pod 规范文件权限设置为 644 或更严格（不适用）。"
        scored: false

      - id: 1.1.2
        text: "确保 API 服务器 Pod 规范文件的所有权设置为 root:root（不适用）。"
        scored: false

      - id: 1.1.3
        text: "确保控制器管理器 Pod 规范文件的权限设置为 644 或更严格（不适用）。"
        scored: false

      - id: 1.1.4
        text: "确保控制器管理器 Pod 的规范文件所有权设置为 root:root（不适用）。"
        scored: false

      - id: 1.1.5
        text: "确保调度器 Pod 规范文件的权限设置为 644 或更严格（不适用）。"
        scored: false

      - id: 1.1.6
        text: "确保调度器 Pod 规范文件的所有权设置为 root:root（不适用）。"
        scored: false

      - id: 1.1.7
        text: "确保 etcd Pod 规范文件的权限设置为 644 或更加严格（不适用）。"
        scored: false

      - id: 1.1.8
        text: "确保 etcd Pod 规范文件的所有权设置为 root:root（不适用）。"
        scored: false

      - id: 1.1.9
        text: "确保容器网络接口文件的权限设置为 644 或更严格（不适用）。"
        scored: false

      - id: 1.1.10
        text: "确保容器网络接口文件的所有权设置为 root:root（不适用）。"
        scored: false

      - id: 1.1.11
        text: "确保将 etcd 数据目录权限设置为 700 或更严格（如果使用了 etcd）。"
        audit: stat -c permissions=%a /var/lib/rancher/k3s/server/db/etcd
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "700"
        remediation: |-
          在 etcd 服务器节点上，通过以下命令获取 etcd 数据目录，并将其作为参数 --data-dir 传递：journalctl -u k3s | grep 'Managed etcd' | grep -v grep根据上面找到的 etcd 数据目录运行以下命令。例如：chmod 700 /var/lib/rancher/k3s/server/db/etcd
        scored: true

      - id: 1.1.12
        text: "如果使用 etcd，请确保 etcd 数据目录的所有权设置为 etcd:etcd（不适用）。"
        scored: false

      - id: 1.1.13
        text: "确保 admin.kubeconfig 文件权限设置为 644 或更严格（自动化）。"
        audit: "/bin/sh -c 'if test -e /var/lib/rancher/k3s/server/cred/admin.kubeconfig;
          then stat -c permissions=%a /var/lib/rancher/k3s/server/cred/admin.kubeconfig;
          fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |-
          在 k3s 节点上运行以下命令（根据您系统上文件的位置）。例如，chmod 644 /var/lib/rancher/k3s/server/cred/admin.kubeconfig
        scored: true

      - id: 1.1.14
        text: "确保 admin.kubeconfig 文件的所有权设置为 root:root（自动）。"
        audit: "/bin/sh -c 'if test -e /var/lib/rancher/k3s/server/cred/admin.kubeconfig;
          then stat -c %U:%G /var/lib/rancher/k3s/server/cred/admin.kubeconfig; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在 k3s 节点上运行以下命令（根据系统中文件的位置）。例如，chown root:root /var/lib/rancher/k3s/server/cred/admin.kubeconfig
        scored: true

      - id: 1.1.15
        text: "确保 scheduler.kubeconfig 文件的权限设置为 644 或更严格（自动化）。"
        audit: "/bin/sh -c 'if test -e $schedulerkubeconfig; then stat -c permissions=%a
          $schedulerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |-
          在 k3s 节点上运行以下命令（根据您系统上的文件位置）。例如，chmod 644 $schedulerkubeconfig
        scored: true

      - id: 1.1.16
        text: "确保 scheduler.kubeconfig 文件的所有权设置为 root:root（自动化）。"
        audit: "/bin/sh -c 'if test -e $schedulerkubeconfig; then stat -c %U:%G $schedulerkubeconfig;
          fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在 k3s 节点上运行以下命令（根据系统中文件的位置）。例如，chown root:root $schedulerkubeconfig
        scored: true

      - id: 1.1.17
        text: "确保 cloud-controller.kubeconfig 文件的权限设置为 644 或更严格（自动化）。"
        audit: "/bin/sh -c 'if test -e $controllermanagerkubeconfig; then stat -c
          permissions=%a $controllermanagerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |-
          在主节点上运行以下命令（根据您系统上文件的位置）。例如，chmod 644 $controllermanagerkubeconfig.
        scored: true

      - id: 1.1.18
        text: "确保 $controllermanagerkubeconfig 文件的所有权设置为 root:root（自动化）。"
        audit: "/bin/sh -c 'if test -e $controllermanagerkubeconfig; then stat -c
          %U:%G $controllermanagerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在主节点上运行以下命令（根据您系统上文件的位置）。例如，chown root:root $controllermanagerkubeconfig
        scored: true

      - id: 1.1.19
        text: "确保 Kubernetes PKI 目录和文件的所有权设置为 root:root（自动化）。"
        audit: "stat -c %U:%G /var/lib/rancher/k3s/server/tls"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "root:root"
        remediation: |-
          在 k3s 节点上运行以下命令（根据系统上文件的位置）。例如，chown -R root:root /var/lib/rancher/k3s/server/tls
        scored: true

      - id: 1.1.20
        text: "确保 Kubernetes PKI 证书文件权限设置为 644 或更严格（自动化）。"
        audit: "find /var/lib/rancher/k3s/server/tls/ -name '*.crt' | xargs stat -c
          permissions=%a"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |-
          在主节点上运行以下命令（基于您系统上文件的位置）。例如，chmod -R 644 /var/lib/rancher/k3s/server/tls/*.crt
        scored: true

      - id: 1.1.21
        text: "确保 Kubernetes PKI 密钥文件的权限设置为 600（自动化）。"
        audit: "find /var/lib/rancher/k3s/server/tls/ -name '*.key' | xargs stat -c
          permissions=%a"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |-
          在主节点上运行以下命令（根据您系统上文件的位置）。例如，chmod -R 600 /etc/kubernetes/pki/*.key
        scored: true

  - id: 1.2
    text: "API 服务器"
    checks:
      - id: 1.2.1
        text: "确保 --anonymous-auth 参数被设置为 false（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "anonymous-auth"
        tests:
          test_items:
            - flag: "--anonymous-auth"
              compare:
                op: eq
                value: false
        remediation: |-
          默认情况下，K3s 的 kube-apiserver 配置为使用 --anonymous-auth=false 标志和数值。
        scored: false

      - id: 1.2.2
        text: "确保未设置 --basic-auth-file 参数（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "basic-auth-file" | cat
        tests:
          test_items:
            - flag: "--basic-auth-file"
              set: false
        remediation: |-
          默认情况下，K3s 不会启用基本身份验证。不需要手动进行修复。
        scored: true

      - id: 1.2.3
        text: "确保未设置 --token-auth-file 参数（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "token-auth-file" | cat
        tests:
          test_items:
            - flag: "--token-auth-file"
              set: false
        remediation: |-
          默认情况下，K3s 不会以基本认证方式运行，无需手动修复。
        scored: true

      - id: 1.2.4
        text: "确保 --kubelet-https 参数设置为 true（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "kubelet-https" | cat
        tests:
          bin_op: or
          test_items:
            - flag: "--kubelet-https"
              compare:
                op: eq
                value: true
            - flag: "--kubelet-https"
              set: false
        remediation: |-
          默认情况下，K3s kube-apiserver 不会使用 --kubelet-https 参数运行，因为它使用 TLS 运行，无需手动修复。
        scored: true

      - id: 1.2.5
        text: "确保将 --kubelet-client-certificate 和 --kubelet-client-key 参数设置为适当的值（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          -E 'kubelet-client-certificate|kubelet-client-key'
        tests:
          bin_op: and
          test_items:
            - flag: "--kubelet-client-certificate"
            - flag: "--kubelet-client-key"
        remediation: |-
          默认情况下，K3s kube-apiserver 使用这些参数来与 kubelet 进行安全通信。无需手动修复。
        scored: true

      - id: 1.2.6
        text: "确保 --kubelet-certificate-authority 参数设置正确（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "kubelet-certificate-authority"
        tests:
          test_items:
            - flag: "--kubelet-certificate-authority"
        remediation: |-
          默认情况下，K3s 的 kube-apiserver 会以这个参数运行，用于与 kubelet 进行安全通信。无需手动修复。
        scored: true

      - id: 1.2.7
        text: "确保 --authorization-mode 参数未设置为 AlwaysAllow（自动）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "authorization-mode"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: nothave
                value: "AlwaysAllow"
        remediation: |-
          默认情况下，K3s 将 Node,RBAC 设置为 --authorization-mode 参数的数值。不需要手动进行修复。
        scored: true

      - id: 1.2.8
        text: "确保 --authorization-mode 参数包含 Node (Automated)。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "authorization-mode"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "Node"
        remediation: |-
          默认情况下，K3s 将 Node,RBAC 设置为 --authorization-mode 参数的取值。无需手动修复。
        scored: true

      - id: 1.2.9
        text: "确保 --authorization-mode 参数包含 RBAC（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "authorization-mode"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "RBAC"
        remediation: |-
          默认情况下，K3s 将 Node、RBAC 设置为 --authorization-mode 参数的参数值。不需要手动进行修复。
        scored: true

      - id: 1.2.10
        text: "确保 admission 控制插件 EventRateLimit 已设置为 Manual。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "enable-admission-plugins"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "EventRateLimit"
        remediation: |-
          默认情况下，K3s 只将 NodeRestriction、PodSecurityPolicy 设置为 --enable-admission-plugins 参数的参数。要配置这些内容，请查阅 Kubernetes 文档，并在配置文件中设置所需的限制。然后参考 K3s 的文档，查看如何通过 kube-apiserver-arg 参数提供额外的 API 服务器配置。
        scored: false

      - id: 1.2.11
        text: "确保准入控制插件 AlwaysAdmit 没有设置（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "enable-admission-plugins"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: nothave
                value: AlwaysAdmit
            - flag: "--enable-admission-plugins"
              set: false
        remediation: |-
          默认情况下，K3s 只将 NodeRestriction、PodSecurityPolicy 设置为 --enable-admission-plugins 参数的参数。无需进行手动修复。
        scored: true

      - id: 1.2.12
        text: "确保 admission 控制插件 AlwaysPullImages 被设置为 (手动)。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "enable-admission-plugins"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "AlwaysPullImages"
        remediation: |-
          默认情况下，K3s 只将 NodeRestriction 和 PodSecurityPolicy 设置为 --enable-admission-plugins 参数的值。要进行配置，请参考 Kubernetes 文档，在配置文件中设置所需的限制。然后，请参考 K3s 文档，查看如何通过 kube-apiserver-arg 参数提供额外的 API 服务器配置。
        scored: false

      - id: 1.2.13
        text: "确保如果未使用 PodSecurityPolicy，则设置入场控制插件 SecurityContextDeny（手动）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "enable-admission-plugins"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "SecurityContextDeny"
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "PodSecurityPolicy"
        remediation: |-
          K3s 需要启用 SecurityContextDeny 准入插件，通过将其作为参数传递给 K3s 来实现。--kube-apiserver-arg='enable-admission-plugins=SecurityContextDeny'
        scored: false

      - id: 1.2.14
        text: "确保 admission control 插件 ServiceAccount 被设置为（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "ServiceAccount"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "ServiceAccount"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |-
          默认情况下，K3s 不使用这个参数。如果希望使用这个参数，请按照文档创建适合您环境的 ServiceAccount 对象。然后参考 K3s 的文档，查看如何通过 kube-apiserver-arg 参数提供额外的 api server 配置。
        scored: true

      - id: 1.2.15
        text: "确保 admission 控制插件 NamespaceLifecycle 被设置为 (自动)。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "disable-admission-plugins" | cat
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "NamespaceLifecycle"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |-
          默认情况下，K3s 不使用该参数。不需要手动修复。
        scored: true

      - id: 1.2.16
        text: "确保 admission control 插件 PodSecurityPolicy 已设置（自动）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "enable-admission-plugins"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "PodSecurityPolicy"
        remediation: |-
          K3s 需要通过将其作为参数传递给 K3s 来启用 PodSecurityPolicy 准入插件。--kube-apiserver-arg='enable-admission-plugins=PodSecurityPolicy'。
        scored: true

      - id: 1.2.17
        text: "确保 admission 控制插件 NodeRestriction 被设置为 true（自动）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "enable-admission-plugins"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "NodeRestriction"
        remediation: |-
          K3s 需要通过将其作为参数传递给 K3s 来启用 NodeRestriction 准入插件。--kube-apiserver-arg='enable-admission-plugins=NodeRestriction'。
        scored: true

      - id: 1.2.18
        text: "确保未设置 --insecure-bind-address 参数（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "enable-admission-plugins"
        tests:
          test_items:
            - flag: "--insecure-bind-address"
              set: false
        remediation: |-
          默认情况下，K3s 明确禁用了 --insecure-bind-address 参数的使用。不需要手动修复。
        scored: true

      - id: 1.2.19
        text: "确保将 --insecure-port 参数设置为 0（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "insecure-port"
        tests:
          test_items:
            - flag: "--insecure-port"
              compare:
                op: eq
                value: 0
        remediation: |-
          默认情况下，K3s 启动 kube-apiserver 进程时，将该参数设置为 0。无需手动修复。
        scored: true

      - id: 1.2.20
        text: "确保 --secure-port 参数未设置为 0（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "secure-port"
        tests:
          bin_op: or
          test_items:
            - flag: "--secure-port"
              compare:
                op: gt
                value: 0
            - flag: "--secure-port"
              set: false
        remediation: |-
          默认情况下，K3s 为 --secure-port 参数设置了 6444 的数值。无需手动修复。
        scored: true

      - id: 1.2.21
        text: "确保 --profiling 参数被设置为 false（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "profiling"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |-
          默认情况下，K3s 将 --profiling 标志参数设置为 false。无需手动修复。
        scored: true

      - id: 1.2.22
        text: "确保设置了 --audit-log-path 参数（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "audit-log-path"
        tests:
          test_items:
            - flag: "--audit-log-path"
        remediation: |-
          K3s 服务器需要使用以下参数运行，--kube-apiserver-arg='audit-log-path=/path/to/log/file'。
        scored: true

      - id: 1.2.23
        text: "确保 --audit-log-maxage 参数设置为 30 或适当的数值（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "audit-log-maxage"
        tests:
          test_items:
            - flag: "--audit-log-maxage"
              compare:
                op: gte
                value: 30
        remediation: |-
          K3s 服务器需要使用以下参数运行：--kube-apiserver-arg='audit-log-maxage=30'。
        scored: true

      - id: 1.2.24
        text: "确保将 --audit-log-maxbackup 参数设置为 10 或者适当的值（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "audit-log-maxbackup"
        tests:
          test_items:
            - flag: "--audit-log-maxbackup"
              compare:
                op: gte
                value: 10
        remediation: |-
          K3s 服务器需要使用以下参数运行：--kube-apiserver-arg='audit-log-maxbackup=10'。
        scored: true

      - id: 1.2.25
        text: "确保将 --audit-log-maxsize 参数设置为 100 或适当的数值（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "audit-log-maxsize"
        tests:
          test_items:
            - flag: "--audit-log-maxsize"
              compare:
                op: gte
                value: 100
        remediation: |-
          K3s 服务器需要使用以下参数来运行：--kube-apiserver-arg='audit-log-maxsize=100'。
        scored: true

      - id: 1.2.26
        text: "确保将 --request-timeout 参数设置为适当的数值（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "request-timeout" | cat
        tests:
          bin_op: or
          test_items:
            - flag: "--request-timeout"
              set: false
            - flag: "--request-timeout"
              compare:
                op: lte
                value: 60
        remediation: |-
          默认情况下，K3s 不设置 --request-timeout 参数。无需手动修复。
        scored: true

      - id: 1.2.27
        text: "确保 --service-account-lookup 参数设置为 true（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "service-account-lookup"
        tests:
          bin_op: or
          test_items:
            - flag: "--service-account-lookup"
              set: false
            - flag: "--service-account-lookup"
              compare:
                op: eq
                value: true
        remediation: |-
          K3s 服务器需要使用以下参数来运行：--kube-apiserver-arg='service-account-lookup=true'。
        scored: true

      - id: 1.2.28
        text: "确保将 --service-account-key-file 参数设置为适当的值（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "service-account-key-file"
        tests:
          test_items:
            - flag: "--service-account-key-file"
        remediation: |-
          默认情况下，K3s 明确设置 --service-account-key-file。无需手动修复。
        scored: true

      - id: 1.2.29
        text: "确保将 --etcd-certfile 和 --etcd-keyfile 参数设置为适当的数值（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          -E 'etcd-certfile|etcd-keyfile'
        tests:
          bin_op: and
          test_items:
            - flag: "--etcd-certfile"
            - flag: "--etcd-keyfile"
        remediation: |-
          默认情况下，K3s 明确设置 --etcd-certfile 和 --etcd-keyfile 参数。无需手动修复。
        scored: true

      - id: 1.2.30
        text: "确保将 --tls-cert-file 和 --tls-private-key-file 参数设置为适当的值（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          -E 'tls-cert-file|tls-private-key-file'
        tests:
          bin_op: and
          test_items:
            - flag: "--tls-cert-file"
            - flag: "--tls-private-key-file"
        remediation: |-
          默认情况下，K3s 明确设置 --tls-cert-file 和 --tls-private-key-file 参数。无需手动修复。
        scored: true

      - id: 1.2.31
        text: "确保 --client-ca-file 参数设置为适当的值（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "client-ca-file"
        tests:
          test_items:
            - flag: "--client-ca-file"
        remediation: |-
          默认情况下，K3s 明确设置 --client-ca-file 参数。不需要手动修复。
        scored: true

      - id: 1.2.32
        text: "确保 --etcd-cafile 参数设置正确（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          -E 'etcd-cafile'
        tests:
          test_items:
            - flag: "--etcd-cafile"
        remediation: |-
          默认情况下，K3s 明确设置了 --etcd-cafile 参数。不需要手动纠正。
        scored: true

      - id: 1.2.33
        text: "确保将 --encryption-provider-config 参数设置为适当值（手动）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          -E "encryption-provider-config"
        tests:
          test_items:
            - flag: "--encryption-provider-config"
        remediation: |-
          K3s 服务器需要运行以下命令：--kube-apiserver-arg='encryption-provider-config=/path/to/encryption_config'。可以通过使用 --secrets-encryption 参数来运行 k3s，这将配置加密提供程序。
        scored: false

      - id: 1.2.34
        text: "确保加密提供者已经适当配置（手动）。"
        type: manual
        remediation: |-
          K3s 服务器需要通过以下方式运行：--secrets-encryption=true，并验证存在其中一个允许的加密提供程序。在主节点上运行以下命令。grep aescbc /path/to/encryption-config.json确认 aescbc/kms/secretbox 被设置为所有所需资源的加密提供程序。
        scored: true

      - id: 1.2.35
        text: "确保 API 服务器仅使用强加密密码（手动）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "tls-cipher-suites"
        tests:
          test_items:
            - flag: "--tls-cipher-suites"
              compare:
                op: valid_elements
                value: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"
        remediation: |-
          默认情况下，K3s 明确不设置此标志。不需要手动修复。
        scored: false

  - id: 1.3
    text: "控制器管理器"
    checks:
      - id: 1.3.1
        text: "确保将 --terminated-pod-gc-threshold 参数设置为适当值（手动）。"
        audit: |
          journalctl -u k3s | grep "Running kube-controller-manager" | tail -n1 | grep "terminated-pod-gc-threshold"
        tests:
          test_items:
            - flag: "--terminated-pod-gc-threshold"
        remediation: |-
          K3s 服务器需要使用以下命令运行：--kube-controller-manager-arg='terminated-pod-gc-threshold=10。
        scored: false

      - id: 1.3.2
        text: "确保 --profiling 参数设置为 false（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-controller-manager" | tail -n1
          | grep "profiling"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |-
          默认情况下，K3s 将 --profiling 标志参数设置为 false。不需要手动修复。
        scored: true

      - id: 1.3.3
        text: "确保将 --use-service-account-credentials 参数设置为 true（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-controller-manager" | tail -n1
          | grep "use-service-account-credentials"
        tests:
          test_items:
            - flag: "--use-service-account-credentials"
              compare:
                op: noteq
                value: false
        remediation: |-
          K3s 服务器需要以以下方式运行：--kube-controller-manager-arg='use-service-account-credentials=true'。
        scored: true

      - id: 1.3.4
        text: "确保 --service-account-private-key-file 参数已设置为适当的数值（自动）。"
        audit: journalctl -u k3s | grep "Running kube-controller-manager" | tail -n1
          | grep "service-account-private-key-file"
        tests:
          test_items:
            - flag: "--service-account-private-key-file"
        remediation: |-
          默认情况下，K3s 使用 --service-account-private-key-file 参数设置为服务账户密钥文件。不需要手动修复。
        scored: true

      - id: 1.3.5
        text: "确保 `--root-ca-file` 参数被适当设置（自动化方式）。"
        audit: journalctl -u k3s | grep "Running kube-controller-manager" | tail -n1
          | grep "root-ca-file"
        tests:
          test_items:
            - flag: "--root-ca-file"
        remediation: |-
          默认情况下，K3s 使用根 CA 文件设置 --root-ca-file 参数。无需手动修复。
        scored: true

      - id: 1.3.6
        text: "确保 RotateKubeletServerCertificate 参数设置为 true（自动）。"
        audit: journalctl -u k3s | grep "Running kube-controller-manager" | tail -n1
          | grep "RotateKubeletServerCertificate" | cat
        tests:
          bin_op: or
          test_items:
            - flag: "--feature-gates"
              compare:
                op: nothave
                value: "RotateKubeletServerCertificate=false"
              set: true
            - flag: "--feature-gates"
              set: false
        remediation: |-
          默认情况下，K3s 实现了自己的证书生成和轮换逻辑。
        scored: true

      - id: 1.3.7
        text: "确保将 --bind-address 参数设置为 127.0.0.1（自动化操作）。"
        audit: journalctl -u k3s | grep "Running kube-controller-manager" | tail -n1
          | grep "bind-address"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
            - flag: "--bind-address"
              set: false
        remediation: |-
          默认情况下，K3s 将 --bind-address 参数设置为 127.0.0.1。无需手动修复。
        scored: true

  - id: 1.4
    text: "调度器"
    checks:
      - id: 1.4.1
        text: "确保将 --profiling 参数设置为 false（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-scheduler" | tail -n1 | grep
          "profiling"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
        remediation: |-
          默认情况下，K3s 将 --profiling 标志参数设置为 false。无需手动修复。
        scored: true

      - id: 1.4.2
        text: "确保将 --bind-address 参数设置为 127.0.0.1（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-controller-manager" | tail -n1
          | grep "bind-address"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
            - flag: "--bind-address"
              set: false
        remediation: |-
          默认情况下，K3s 将 --bind-address 参数设置为 127.0.0.1。无需手动修复。
        scored: true
