controls:
version: "cis-1.6-k3s"
id: 5
text: "Kubernetes 策略"
type: "policies"
groups:
  - id: 5.1
    text: "RBAC（Role-Based Access Control）和服务账号"
    checks:
      - id: 5.1.1
        text: "确保仅在必要时使用 cluster-admin 角色（手动）。"
        type: "manual"
        remediation: |-
          识别所有绑定到 cluster-admin 角色的 clusterrolebinding。检查它们是否被使用，以及它们是否需要此角色，或者是否可以使用权限更少的角色。在可能的情况下，首先将用户绑定到较低权限的角色，然后删除与 cluster-admin 角色相关的 clusterrolebinding：kubectl delete clusterrolebinding [name]。
        scored: false

      - id: 5.1.2
        text: "尽量减少对机密信息的访问（手动）。"
        type: "manual"
        remediation: |-
          在可能的情况下，移除对集群中秘钥对象的get、list和watch访问权限。
        scored: false

      - id: 5.1.3
        text: "减少在角色（Roles）和集群角色（ClusterRoles）中使用通配符（wildcard）（手动）。"
        type: "manual"
        remediation: |-
          在可能的情况下，将 clusterroles 和 roles 中对通配符的使用替换为特定的对象或操作。```bashkubectl get roles --all-namespaces -o yamlkubectl get clusterroles -o yaml```
        scored: false

      - id: 5.1.4
        text: "限制创建 Pod 的访问权限（手动方式）。"
        type: "manual"
        remediation: |-
          在可能的情况下，移除集群中对 Pod 对象的创建权限。
        scored: false

      - id: 5.1.5
        text: "确保默认服务账号没有被激活使用。（手动）"
        type: "manual"
        remediation: |-
          在 Kubernetes 工作负载需要对 Kubernetes API 服务器进行特定访问时，请创建明确的服务账号。修改每个默认服务账号的配置，包括此值 automountServiceAccountToken: false。
        scored: false

      - id: 5.1.6
        text: "确保只在必要时挂载服务账号令牌（手动）。"
        type: "manual"
        remediation: |-
          修改不需要挂载服务账户令牌的 Pod 和服务账户的定义，以禁用该功能。
        scored: false

  - id: 5.2
    text: "Pod 安全策略"
    checks:
      - id: 5.2.1
        text: "减少特权容器的准入（手动方式）"
        type: "manual"
        remediation: |-
          kubectl describe psp <psp_name> | grep MustRunAsNonRoot操作员应该应用一个 PodSecurityPolicy，将 Rule 值设置为 MustRunAsNonRoot。可以在《加固指南》中找到此类示例https://docs.rancher.cn/docs/k3s/security/hardening-guide/_index
        scored: false

      - id: 5.2.2
        text: "减少试图共享主机进程 ID 命名空间的容器的准入（手动方式）。"
        type: "manual"
        remediation: |-
          运行以下命令将返回一个数字，该数字表示未明确将 hostPID 值设置为 false 的 PodSecurityPolicy 的数量：```shellkubectl get psp -o json | jq .items[] | jq -r 'select((.spec.hostPID == null) or (.spec.hostPID == false))' | jq .metadata.name | wc -l | xargs -I {} echo '--count={}'```有关为其创建的 PodSecurityPolicy 明确将 hostPID 值设置为 false 的示例，可以在加固指南中找到：[Hardening Guide](https://docs.rancher.cn/docs/k3s/security/hardening-guide/_index)
        scored: false

      - id: 5.2.3
        text: "减少希望共享主机 IPC 命名空间的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          kubectl get psp -o json | jq .items[] | jq -r 'select((.spec.hostIPC == null) or (.spec.hostIPC == false))' | jq .metadata.name | wc -l | xargs -I {} echo '--count={}'操作员应为其创建的 PSP 应用一项 PodSecurityPolicy，明确将 HostIPC 值设置为 false。可以在《Hardening Guide》中找到相关示例。链接：https://docs.rancher.cn/docs/k3s/security/hardening-guide/_index
        scored: false

      - id: 5.2.4
        text: "减少希望共享主机网络命名空间的容器的准入（手动）"
        type: "manual"
        remediation: |-
          一个操作者应该应用一个 PodSecurityPolicy，明确地将 HostNetwork 值设置为 false，为其创建的 PSP。这一操作的示例可以在《Hardening Guide》中找到。https://docs.rancher.cn/docs/k3s/security/hardening-guide/_index
        scored: false

      - id: 5.2.5
        text: "减少具有 allowPrivilegeEscalation（手动）权限的容器准入。"
        type: "manual"
        remediation: |-
          kubectl get psp -o json | jq .items[] | jq -r 'select((.spec.allowPrivilegeEscalation == null) or (.spec.allowPrivilegeEscalation == false))' | jq .metadata.name | wc -l | xargs -I {} echo '--count={}'应该应用一个 PodSecurityPolicy 运算符，为其创建的 PSP 明确设置 allowPrivilegeEscalation 值为 false。可以在《加固指南》中找到示例。https://docs.rancher.cn/docs/k3s/security/hardening-guide/_index
        scored: false

      - id: 5.2.6
        text: "减少根容器的准入（手动）"
        type: "manual"
        remediation: |-
          kubectl get psp -o json | jq .items[] | jq -r 'select((.spec.allowPrivilegeEscalation == null) or (.spec.allowPrivilegeEscalation == false))' | jq .metadata.name | wc -l | xargs -I {} echo '--count={}'操作者应该应用一个 PodSecurityPolicy，将 runAsUser.Rule 的值设置为 MustRunAsNonRoot。具体示例可在强化指南中找到。https://docs.rancher.cn/docs/k3s/security/hardening-guide/_index
        scored: false

      - id: 5.2.7
        text: "限制具有 NET_RAW 权限的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          kubectl get psp <psp_name> -o json | jq .spec.requiredDropCapabilities[]运算符应该应用一个 PodSecurityPolicy，将 .spec.requiredDropCapabilities[] 设置为 All 的值。可以在硬化指南中找到此类示例。请参考：https://docs.rancher.cn/docs/k3s/security/hardening-guide/_index
        scored: false

      - id: 5.2.8
        text: "最小化具有额外权限的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          kubectl get psp操作员应该应用一个 PodSecurityPolicy，将 allowedCapabilities 设置为非空数组。此设置示例可以在《加固指南》中找到。https://docs.rancher.cn/docs/k3s/security/hardening-guide/_index
        scored: false

      - id: 5.2.9
        text: "减少分配了权限的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          kubectl get psp操作员应该应用一个 PodSecurityPolicy，将 requiredDropCapabilities 设置为 ALL。可以在《Hardening Guide》中找到这方面的示例。https://docs.rancher.cn/docs/k3s/security/hardening-guide/_index
        scored: false

  - id: 5.3
    text: "网络策略和CNI"
    checks:
      - id: 5.3.1
        text: "确保所使用的 CNI 支持网络策略（手动配置）。"
        type: "manual"
        remediation: |-
          默认情况下，K3s 使用 Canal（Calico 和 Flannel），并完全支持网络策略。
        scored: false

      - id: 5.3.2
        text: "确保所有命名空间都定义了网络策略（手动）。"
        type: "manual"
        remediation: |-
          在主节点上运行以下命令。for i in kube-system kube-public default; do  kubectl get networkpolicies -n $i;done验证各个命名空间都应用了网络策略。运维应该应用 NetworkPolicies 来防止不必要的流量在网络上不必要地传输。如何应用 NetworkPolicy 的示例可以在 Hardening Guide 中找到。https://docs.rancher.cn/docs/k3s/security/hardening-guide/_index
        scored: false

  - id: 5.4
    text: "Secrets 管理"
    checks:
      - id: 5.4.1
        text: "建议使用将机密作为文件而不是环境变量（手动方式）。"
        type: "manual"
        remediation: |-
          运行以下命令以查找使用从Secrets定义的环境变量的对象的引用：kubectl get all -o jsonpath='{range .items[?(@..secretKeyRef)]} {.kind} {.metadata.name} {"\n"}{end}' -A如果可能的话，请重写应用程序代码，从挂载的秘密文件中读取秘密，而不是从环境变量中读取。
        scored: false

      - id: 5.4.2
        text: "考虑外部秘钥存储（手动操作）。"
        type: "manual"
        remediation: |-
          请参考您的云服务提供商或第三方秘密管理解决方案提供的秘密管理选项。
        scored: false

  - id: 5.5
    text: "可扩展的准入控制"
    checks:
      - id: 5.5.1
        text: "使用 ImagePolicyWebhook 出入控制器（手动）配置镜像来源。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档的指引设置镜像可信任性。
        scored: false

  - id: 5.7
    text: "一般策略"
    checks:
      - id: 5.7.1
        text: "使用命名空间 (手动) 在资源之间创建管理边界。"
        audit: kubectl get namespaces
        type: "manual"
        remediation: |-
          确保这些命名空间是您需要的，并根据您的要求进行适当的管理。按照文档的指导，根据您的部署需求创建所需的对象的命名空间。
        scored: false

      - id: 5.7.2
        text: "确保在您的 Pod 定义中将 seccomp 配置设置为 docker/default（手动方式）。"
        type: "manual"
        remediation: |-
          Seccomp 目前是一个 alpha 特性。默认情况下，所有 alpha 特性都是禁用的。因此，您需要通过传递 "--feature-gates=AllAlpha=true" 参数来在 apiserver 中启用 alpha 特性。编辑主节点上的 /etc/kubernetes/apiserver 文件，并将 KUBE_API_ARGS 参数设置为 "--feature-gates=AllAlpha=true"。KUBE_API_ARGS="--feature-gates=AllAlpha=true"根据您的系统，重新启动 kube-apiserver 服务。例如：systemctl restart kube-apiserver.service使用注释来在您的 Pod 定义中启用 docker/default 的 seccomp 配置文件。示例如下：apiVersion: v1kind: Podmetadata:  name: trustworthy-pod  annotations:    seccomp.security.alpha.kubernetes.io/pod: docker/defaultspec:  containers:    - name: trustworthy-container      image: sotrustworthy:latest
        scored: false

      - id: 5.7.3
        text: "为您的 Pod 和容器应用安全上下文（手动操作）"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档的指引，为您的 Pod 应用安全上下文。对于安全上下文的建议列表，您可以参考 CIS Docker 容器安全基准。
        scored: false

      - id: 5.7.4
        text: "不应使用默认命名空间（手动操作）。"
        type: "manual"
        remediation: |-
          在主节点上运行以下命令。kubectl get all -n default那里应该只有系统管理的资源，如 Kubernetes 服务。确保创建了命名空间，以允许适当地对 Kubernetes 资源进行隔离，并且所有新资源都应该创建在特定的命名空间中。
        scored: false
