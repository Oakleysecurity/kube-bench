controls:
version: "cis-1.6-k3s"
id: 4
text: "工作节点安全配置"
type: "node"
groups:
  - id: 4.1
    text: "工作节点配置文件"
    checks:
      - id: 4.1.1
        text: "确保 kubelet 服务文件的权限设置为 644 或更加严格（不适用）。"
        scored: false

      - id: 4.1.2
        text: "确保 kubelet 服务文件的所有权设置为 root:root（不适用）。"
        scored: false

      - id: 4.1.3
        text: "如果存在代理 kubeproxy.kubeconfig 文件，请确保将权限设置为 644 或更严格（自动化）。"
        audit: stat -c %a $proxykubeconfig
        tests:
          bin_op: or
          test_items:
            - flag: "permissions"
              set: true
              compare:
                op: bitmask
                value: "644"
            - flag: "$proxykubeconfig"
              set: false
        remediation: |-
          在每个工作节点上运行以下命令（根据文件在您系统上的位置）。例如，chmod 644 $proxykubeconfig
        scored: true

      - id: 4.1.4
        text: "确保代理 kubeconfig 文件的所有权设置为 root:root（自动化）。"
        audit: '/bin/sh -c ''if test -e $proxykubeconfig; then stat -c %U:%G $proxykubeconfig;
          fi'' '
        tests:
          bin_op: or
          test_items:
            - flag: root:root
            - flag: "$proxykubeconfig"
              set: false
        remediation: |-
          在每个工作节点上运行以下命令（根据你系统中文件的位置）。例如，chown root:root $proxykubeconfig
        scored: true

      - id: 4.1.5
        text: "确保 --kubeconfig kubelet.conf 文件权限设置为 644 或更严格（自动化）。"
        audit: '/bin/sh -c ''if test -e $kubeletkubeconfig; then stat -c permissions=%a
          $kubeletkubeconfig; fi'' '
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |-
          默认情况下，K3s 使用 644 权限创建 $kubeletkubeconfig 文件，无需手动修复。
        scored: true

      - id: 4.1.6
        text: "确保 --kubeconfig kubelet.conf 文件的所有权设置为 root:root（自动化）。"
        audit: '/bin/sh -c ''if test -e $kubeletkubeconfig; then stat -c %U:%G $kubeletkubeconfig;
          fi'' '
        tests:
          test_items:
            - flag: root:root
        remediation: |-
          默认情况下，K3s 创建 $kubeletkubeconfig 文件并设置为 root:root 拥有者，无需手动修复。
        scored: true

      - id: 4.1.7
        text: "确保证书授权文件的权限设置为 644 或更严格（自动化）。"
        audit: stat -c permissions=%a $kubeletcafile
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
        remediation: |-
          默认情况下，K3s 使用 644 权限创建 $kubeletcafile。
        scored: true

      - id: 4.1.8
        text: "确保客户端证书颿机构文件的所有权设置为 root:root（自动化）。"
        audit: stat -c %U:%G $kubeletcafile
        tests:
          test_items:
            - flag: root:root
              compare:
                op: eq
                value: root:root
        remediation: |-
          默认情况下，K3s 创建的 $kubeletcafile 文件的所有者为 root:root。
        scored: true

      - id: 4.1.9
        text: "确保 kubelet --config 配置文件的权限设置为 644 或更严格（不适用）。"
        scored: false

      - id: 4.1.10
        text: "确保 kubelet --config 配置文件的所有权设置为 root:root（不适用）。"
        scored: false

  - id: 4.2
    text: "Kubelet"
    checks:
      - id: 4.2.1
        text: "确保将 anonymous-auth 参数设置为 false（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "anonymous-auth"
        tests:
          test_items:
            - flag: "--anonymous-auth"
              compare:
                op: eq
                value: false
        remediation: |-
          默认情况下，K3s 启动 kubelet 时设置 --anonymous-auth 为 false。无需手动纠正。
        scored: true

      - id: 4.2.2
        text: "确保 --authorization-mode 参数没有设置为 AlwaysAllow（自动）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "authorization-mode"
        tests:
          test_items:
            - flag: --authorization-mode
              compare:
                op: nothave
                value: AlwaysAllow
        remediation: |-
          K3s 使用 Webhook 作为 --authorization-mode 参数的值启动 kubelet。无需手动修复。
        scored: true

      - id: 4.2.3
        text: "确保将 --client-ca-file 参数设置为适当的值（自动化）。"
        audit: journalctl -u k3s | grep "Running kube-apiserver" | tail -n1 | grep
          "client-ca-file"
        tests:
          test_items:
            - flag: --client-ca-file
        remediation: |-
          默认情况下，K3s 使用 --client-ca-file 启动 kubelet 进程，无需手动修复。
        scored: true

      - id: 4.2.4
        text: "确保将 --read-only-port 参数设置为 0（自动化）。"
        audit: journalctl -u k3s | grep "Running kubelet" | tail -n1 | grep "read-only-port"
        tests:
          bin_op: or
          test_items:
            - flag: "--read-only-port"
              compare:
                op: eq
                value: 0
            - flag: "--read-only-port"
              set: false
        remediation: |-
          默认情况下，K3s 启动 kubelet 进程时，将 --read-only-port 参数设置为 0。
        scored: false

      - id: 4.2.5
        text: "确保 --streaming-connection-idle-timeout 参数未设置为 0（自动化）。"
        audit: journalctl -u k3s | grep "Running kubelet" | tail -n1 | grep "streaming-connection-idle-timeout"
        tests:
          test_items:
            - flag: --streaming-connection-idle-timeout
              compare:
                op: noteq
                value: 0
            - flag: --streaming-connection-idle-timeout
              set: false
          bin_op: or
        remediation: |-
          默认情况下，K3s 在启动 kubelet 时不会设置 --streaming-connection-idle-timeout。
        scored: true

      - id: 4.2.6
        text: "确保 --protect-kernel-defaults 参数设置为 true（自动化）。"
        audit: journalctl -u k3s | grep "Running kubelet" | tail -n1 | grep "protect-kernel-defaults"
        tests:
          test_items:
            - flag: --protect-kernel-defaults
              compare:
                op: eq
                value: true
        remediation: |-
          K3s 服务器需要使用以下选项启动：--protect-kernel-defaults=true。
        scored: true

      - id: 4.2.7
        text: "确保将 --make-iptables-util-chains 参数设置为 true（自动化）。"
        audit: journalctl -u k3s | grep "Running kubelet" | tail -n1 | grep "make-iptables-util-chains"
        tests:
          test_items:
            - flag: --make-iptables-util-chains
              compare:
                op: eq
                value: true
            - flag: --make-iptables-util-chains
              set: false
          bin_op: or
        remediation: |-
          K3s 服务器需要使用以下参数运行：--kube-apiserver-arg='make-iptables-util-chains=true'。
        scored: true

      - id: 4.2.8
        text: "确保未设置 --hostname-override 参数（不适用）。"
        scored: false

      - id: 4.2.9
        text: "确保将 --event-qps 参数设置为 0 或者确保适当的事件捕获。"
        audit: /bin/ps -fC containerd
        tests:
          test_items:
            - flag: --event-qps
              compare:
                op: eq
                value: 0
        remediation: |-
          如果使用 Kubelet 配置文件，请编辑该文件，将 eventRecordQPS 设置为适当的级别。如果使用命令行参数，请编辑每个工作节点上的 kubelet 服务文件 $kubeletsvc，并在 KUBELET_SYSTEM_PODS_ARGS 变量中设置下面的参数。根据系统的不同，重新启动 kubelet 服务。例如：systemctl daemon-reloadsystemctl restart kubelet.service
        scored: false

      - id: 4.2.10
        text: "确保将 --tls-cert-file 和 --tls-private-key-file 参数设置为适当的值（手动）。"
        audit: journalctl -u k3s | grep "Running kubelet" | tail -n1 | grep -E 'tls-cert-file|tls-private-key-file'
        tests:
          test_items:
            - flag: --tls-cert-file
            - flag: --tls-private-key-file
        remediation: |-
          默认情况下，K3s 在执行 kubelet 进程时设置 --tls-cert-file 和 --tls-private-key-file 参数。
        scored: false

      - id: 4.2.11
        text: "确保 --rotate-certificates 参数没有设置为 false（无需应用）。"
        scored: false

      - id: 4.2.12
        text: "验证 RotateKubeletServerCertificate 参数是否设置为 true（不适用）。"
        scored: false

      - id: 4.2.13
        text: "确保 Kubelet 仅使用强加密密码算法（不适用）。"
        scored: false
