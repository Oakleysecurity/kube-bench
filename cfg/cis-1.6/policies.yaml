controls:
version: "cis-1.6"
id: 5
text: "Kubernetes 策略"
type: "policies"
groups:
  - id: 5.1
    text: "RBAC 和服务账户"
    checks:
      - id: 5.1.1
        text: "确保只在必要的情况下使用集群管理员（cluster-admin）角色（手动）。"
        type: "manual"
        remediation: |-
          识别所有绑定到 cluster-admin 角色的 clusterrolebindings。检查它们是否被使用，以及它们是否需要该角色，或者是否可以使用具有更少特权的角色。在可能的情况下，首先将用户绑定到较低特权的角色，然后删除绑定到 cluster-admin 角色的 clusterrolebinding：```kubectl delete clusterrolebinding [name]```
        scored: false

      - id: 5.1.2
        text: "最小化对机密的访问（手动）"
        type: "manual"
        remediation: |-
          在可能的情况下，删除集群中对 secret 对象的 get、list 和 watch 访问权限。
        scored: false

      - id: 5.1.3
        text: "减少在角色（Roles）和集群角色（ClusterRoles）中使用通配符（通用字符）（手动操作）。"
        type: "manual"
        remediation: |-
          在可能的情况下，用具体的对象或操作替换 clusterroles 和 roles 中的通配符使用。
        scored: false

      - id: 5.1.4
        text: "最小化访问权限以创建 Pods（手动）。"
        type: "manual"
        remediation: |-
          在可能的情况下，删除集群中对Pod对象的创建访问权限。
        scored: false

      - id: 5.1.5
        text: "确保默认服务账户未被积极使用。（手动）"
        type: "manual"
        remediation: |-
          在 Kubernetes 工作负载需要特定访问 Kubernetes API 服务器时，创建明确的服务账号。修改每个默认服务账号的配置，包括以下数值 automountServiceAccountToken: false。
        scored: false

      - id: 5.1.6
        text: "确保只在必要的地方挂载Service Account Tokens（手动）。"
        type: "manual"
        remediation: |-
          修改不需要挂载服务账户令牌的 Pod 和服务账户的定义，禁用该功能。
        scored: false

  - id: 5.2
    text: "Pod 安全策略"
    checks:
      - id: 5.2.1
        text: "减少特权容器的准入（手动）"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP，并确保 .spec.privileged 字段被省略或设置为 false。
        scored: false

      - id: 5.2.2
        text: "最小化容器希望共享主机进程 ID 命名空间的准入（手动）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中描述的方式创建一个 PSP，并确保 .spec.hostPID 字段被省略或设置为 false。
        scored: false

      - id: 5.2.3
        text: "减少希望共享主机 IPC 命名空间的容器的准入（手动方式）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP，确保 .spec.hostIPC 字段被省略或设置为 false。
        scored: false

      - id: 5.2.4
        text: "最小化希望共享主机网络命名空间的容器的准入（手动方式）。"
        type: "manual"
        remediation: |-
          根据 Kubernetes 文档中的描述创建一个 Pod Security Policy（PSP），确保将 .spec.hostNetwork 字段省略或设置为 false。
        scored: false

      - id: 5.2.5
        text: "尽量减少具有 allowPrivilegeEscalation 权限的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 Pod Security Policy（PSP），确保 .spec.allowPrivilegeEscalation 字段被省略或设置为 false。
        scored: false

      - id: 5.2.6
        text: "最小化接受 root 容器 (手动)"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP，确保 .spec.runAsUser.rule 被设置为 MustRunAsNonRoot 或 MustRunAs，并且 UID 的范围不包括 0。
        scored: false

      - id: 5.2.7
        text: "最小化具有 NET_RAW 能力的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档中的描述创建一个 PSP，确保 .spec.requiredDropCapabilities 被设置为包含 NET_RAW 或 ALL。
        scored: false

      - id: 5.2.8
        text: "最小化附加特权的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          确保集群中的 Pod 安全策略（PSP）中不包含 allowedCapabilities，除非将其设置为空数组。
        scored: false

      - id: 5.2.9
        text: "减少分配了能力的容器的准入（手动）。"
        type: "manual"
        remediation: |-
          检查在集群上运行的应用程序中的权限使用情况。如果一个命名空间中包含不需要任何 Linux 权限才能运行的应用程序，请考虑添加一个禁止接受不丢弃所有权限的容器的 PSP。
        scored: false

  - id: 5.3
    text: "网络策略和 CNI (Container Network Interface)"
    checks:
      - id: 5.3.1
        text: "确保所使用的 CNI 支持网络策略（手动）。"
        type: "manual"
        remediation: |-
          如果正在使用的 CNI 插件不支持网络策略，应考虑使用不同的插件，或找到另一种限制 Kubernetes 集群流量的替代机制。
        scored: false

      - id: 5.3.2
        text: "确保所有命名空间都定义了网络策略（手动）。"
        type: "manual"
        remediation: |-
          按照文档说明，根据需要创建 NetworkPolicy 对象。
        scored: false

  - id: 5.4
    text: "密钥管理"
    checks:
      - id: 5.4.1
        text: "建议优先将密钥作为文件使用，而不是作为环境变量（手动）。"
        type: "manual"
        remediation: |-
          如果可能的话，重写应用代码，从挂载的密钥文件中读取秘密，而不是从环境变量中读取。
        scored: false

      - id: 5.4.2
        text: "考虑使用外部的秘钥存储（手动方式）。"
        type: "manual"
        remediation: |-
          请参考您的云服务提供商或第三方秘密管理解决方案提供的秘密管理选项。
        scored: false

  - id: 5.5
    text: "可扩展的准入控制"
    checks:
      - id: 5.5.1
        text: "使用 ImagePolicyWebhook 准入控制器配置镜像来源验证（手动）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档的说明设置镜像溯源。
        scored: false

  - id: 5.7
    text: "一般策略"
    checks:
      - id: 5.7.1
        text: "使用命名空间（手动方式）在资源之间创建管理边界。"
        type: "manual"
        remediation: |-
          按照文档的说明为部署中所需的对象创建命名空间。
        scored: false

      - id: 5.7.2
        text: "确保在您的Pod定义中将seccomp配置设置为docker/default（手动）。"
        type: "manual"
        remediation: |-
          Seccomp 目前是一个 alpha 特性。默认情况下，所有 alpha 特性都是禁用的。因此，您需要通过传递 "--feature-gates=AllAlpha=true" 参数来在 apiserver 中启用 alpha 特性。在主节点上编辑 /etc/kubernetes/apiserver 文件，并将 KUBE_API_ARGS 参数设置为 "--feature-gates=AllAlpha=true"。KUBE_API_ARGS="--feature-gates=AllAlpha=true"根据您的系统，重新启动 kube-apiserver 服务。例如：systemctl restart kube-apiserver.service使用注解来在您的 Pod 定义中启用 docker/default 的 seccomp 配置文件。以下是一个示例：apiVersion: v1kind: Podmetadata:  name: trustworthy-pod  annotations:    seccomp.security.alpha.kubernetes.io/pod: docker/defaultspec:  containers:    - name: trustworthy-container      image: sotrustworthy:latest
        scored: false

      - id: 5.7.3
        text: "将安全上下文应用于您的 Pod 和容器（手动）。"
        type: "manual"
        remediation: |-
          按照 Kubernetes 文档的指导，为您的 Pod 应用安全上下文。对于建议的安全上下文清单，您可以参考 Docker 容器的 CIS 安全基准。
        scored: false

      - id: 5.7.4
        text: "不应该使用默认命名空间（手动操作）。"
        type: "manual"
        remediation: |-
          确保创建命名空间以允许对 Kubernetes 资源进行适当的隔离，并且所有新资源都应该在特定的命名空间中创建。
        scored: false
